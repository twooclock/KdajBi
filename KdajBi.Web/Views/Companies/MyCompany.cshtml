@using Newtonsoft.Json;
@using KdajBi.Web.ViewModels;
@model vmCompany
@{
    ViewData["Title"] = "Moje podjetje";
}

@section styles{
    <!-- datatables.net -->
    <link href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />"
    <link href="~/plugins/datatables-buttons/css/buttons.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-fixedheader/css/fixedHeader.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-scroller/css/scroller.bootstrap4.css" rel="stylesheet" />

}


<!-- page content -->
<div class="right_col col-md-12" role="main">


    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="dashboard_graph">

                <div class="row x_title">
                    <div class="col-md-6">
                        <h3>@Html.Raw(@Model.Company.Name)</h3>
                    </div>

                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="card card-primary card-outline card-outline-tabs">
                            <div class="card-header p-0 border-bottom-0">
                                <ul class="nav nav-tabs" id="tab_@Html.Raw(@Model.Company.Id)" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link active" id="general-tab" data-toggle="tab" href="#general" role="tab" aria-controls="general" aria-selected="true">Podjetje</a>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="location-tab" data-toggle="tab" href="#location" role="tab" aria-controls="location" aria-selected="false">Saloni</a>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="employee-tab" data-toggle="tab" href="#employee" role="tab" aria-controls="employee" aria-selected="false">Zaposleni</a>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="tags-tab" data-toggle="tab" href="#tags" role="tab" aria-controls="tags" aria-selected="false">Oznake pri strankah</a>
                                    </li>
                                </ul>
                            </div>
                            <div class="card-body">
                                <div class="tab-content" id="custom-tabs-four-tabContent">
                                    <div id="general" class="tab-pane fade active show" role="tabpanel" aria-labelledby="general-tab">
                                        <form class="form-horizontal">
                                            <div class="form-group">
                                                <label for="inputName" class="control-label">Naziv</label>
                                                <input type="text" class="form-control col-sm-10" id="txtCName" placeholder="Naziv podjetja" value="@Html.Raw(@Model.Company.Name)">
                                            </div>
                                            <div class="form-group">
                                                <label for="inputName" class="control-label">Ulica</label>
                                                <input class="form-control col-sm-10" id="txtCStreet" placeholder="Ulica">
                                            </div>
                                            <div class="form-group">
                                                <label for="inputName" class="control-label">Kraj</label>
                                                <input class="form-control col-sm-10" id="txtCTown" placeholder="Kraj">
                                            </div>
                                            <div class="form-row">
                                                <div class="form-group col-sm-3">
                                                    <label for="inputName" class="control-label">Pošta</label>
                                                    <input class="form-control" id="txtCZip" placeholder="Pošta">
                                                </div>
                                                <div class="form-group col-sm-5">
                                                    <label for="inputName" class="control-label">Kraj</label>
                                                    <input class="form-control" id="txtCZipTown" placeholder="Kraj">
                                                </div>
                                            </div>
                                            <div class="form-row">
                                                <div class="form-group col-sm-3">
                                                    <label for="inputName" class="control-label">Davčna številka</label>
                                                    <input class="form-control col-sm-10" id="txtCTaxID" placeholder="SI12345678">
                                                </div>
                                                <div class="form-group col-sm-6 d-flex flex-column justify-content-end">
                                                    <div class="form-check" style="margin-bottom: 1rem;">
                                                        <input type="checkbox" class="form-check-input" id="cbIsVAT">
                                                        <label class="form-check-label" for="cbIsVAT">Davčni zavezanec</label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <button class="btn btn-default" onclick="saveGeneral()">Shrani</button>
                                            </div>
                                        </form>
                                    </div>

                                    <div id="location" class="tab-pane fade" role="tabpanel" aria-labelledby="location-tab">
                                        <div class="card">
                                            <!-- /.card-header -->
                                            <div class="card-body p-0">
                                                <div class="col-12">
                                                    <div class="table-responsive">

                                                        <table id="dtLocations" class="table table-striped table-bordered" width="100%">
                                                            <thead>
                                                                <tr>
                                                                    <th>
                                                                        Naziv
                                                                    </th>
                                                                    <th>
                                                                        Tel
                                                                    </th>

                                                                    <th>
                                                                    </th>

                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                            </tbody>
                                                        </table>
                                                        <button type="button" id="cmdAddLocation" onclick="cmdAddLocation_Click();" class="btn btn-primary btn-lg">
                                                            Dodaj
                                                        </button>
                                                    </div>
                                                    
                                                </div>

                                            </div>

                                            <!-- /.card-body -->
                                        </div>
                                        <div class="form-check" >
                                            <input type="checkbox" onclick="saveSettings()" class="form-check-input" id="cbUseSingleListOfClients">
                                            <label class="form-check-label" for="cbUseSingleListOfClients">Pri naročanju uporabi enoten seznam strank</label>
                                        </div>
                                        <div class="form-check" >
                                            <input type="checkbox" onclick="saveSettings()"  class="form-check-input" id="cbUseSingleListOfServices">
                                            <label class="form-check-label" for="cbUseSingleListOfServices">Pri naročanju uporabi enoten seznam storitev</label>
                                        </div>
                                    </div>

                                    <div class="tab-pane fade" id="employee" role="tabpanel" aria-labelledby="employee-tab">
                                        <div class="card">
                                            <!-- /.card-header -->
                                            <div class="card-body p-0">
                                                <div class="col-12">
                                                    <div class="table-responsive">

                                                        <table id="dtEmployees" class="table table-striped table-bordered" width="100%">
                                                            <thead>
                                                                <tr>
                                                                    <th>
                                                                        Naziv
                                                                    </th>
                                                                    <th>
                                                                        Ime Priimek
                                                                    </th>
                                                                    <th>
                                                                        eMail
                                                                    </th>
                                                                    <th>
                                                                    </th>

                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                            </tbody>
                                                        </table>
                                                        <button type="button" id="cmdAdd" onclick="cmdAddEmployee_Click();" class="btn btn-primary btn-lg">
                                                            Dodaj
                                                        </button>
                                                    </div>
                                                </div>

                                            </div>

                                            <!-- /.card-body -->
                                        </div>
                                        <div class="form-check" >
                                            <input type="checkbox" onclick="saveSettings()"  class="form-check-input" id="cbAppointments_ShowTimetables">
                                            <label class="form-check-label" for="cbAppointments_ShowTimetables">Nakaži urnike pri naročanju</label>
                                        </div>
                                        <div class="form-check" >
                                            <input type="checkbox" onclick="saveSettings()"  class="form-check-input" id="cbEmployee_AlternatingWeeks">
                                            <label class="form-check-label" for="cbEmployee_AlternatingWeeks">Zaposleni delajo v tedenskih izmenah</label>
                                        </div>
                                    </div>

                                    <div class="tab-pane fade" id="tags" role="tabpanel" aria-labelledby="tags-tab">
                                        <div class="card">
                                            <!-- /.card-header -->
                                            <div class="card-body p-0">
                                                <div class="col-12">
                                                    <div class="table-responsive">

                                                        <table id="dtTags" class="table table-striped table-bordered" width="100%">
                                                            <thead>
                                                                <tr>
                                                                    <th>
                                                                        Oznaka
                                                                    </th>

                                                                    <th>
                                                                    </th>

                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                            </tbody>
                                                        </table>
                                                        <button type="button" id="cmdAdd" onclick="cmdAddTag_Click();" class="btn btn-primary btn-lg">
                                                            Dodaj
                                                        </button>
                                                    </div>
                                                </div>

                                            </div>

                                            <!-- /.card-body -->
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <!-- /.card -->
                        </div>




                    </div>
                </div>

                <div class="clearfix"></div>
            </div>
        </div>

    </div>
    <br />


</div>
<!-- /page content -->
<!-- employee modal content-->
<div id="myEmployeeModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Zaposleni</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="dfEmployee" class="dataform" name="dfEmployee">
                    <div class="form-group">
                        <label for="txtFirstName">
                            Ime:
                        </label>
                        <input type="text" id="txtFirstName" name="txtFirstName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="txtLastName">
                            Priimek:
                        </label>
                        <input type="text" id="txtLastName" name="txtLastName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="txtEmail">
                            Email:
                        </label>
                        <input type="text" id="txtEmail" name="txtEmail" class="form-control" />
                    </div>
                    <div class="form-group" style="display:none">
                        <label for="txtETaxID">Davčna številka</label>
                        <input type="text" id="txtETaxID" name="txtETaxID" class="form-control" placeholder="12345678">
                    </div>
                    <div class="form-group">
                        <label class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="cbActive" value="true" checked="">
                            <span class="custom-control-label">Active</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdDeleteEmployee">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdSaveEmployee">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->
<!-- Location modal content-->
<div id="myLocationModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myLocationModalLabel">Salon</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="dfLocation" name="dfLocation" class="dataform">
                    <div class="form-group">
                        <label for="txtName">
                            Naziv:
                        </label>
                        <input type="text" id="txtName" name="txtName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="txtTel">
                            Telefon:
                        </label>
                        <input type="text" id="txtTel" name="txtTel" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="cbLocationActive" value="true" checked="">
                            <span class="custom-control-label">Aktivno</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdDeleteLocation">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdSaveLocation">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->
<!-- clienttags modal content-->
<div id="myTagModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Oznaka</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true" ><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="dfTag" class="dataform" name="dfTag">
                    <div class="form-group">
                        <label for="txtTag">
                            Ime:
                        </label>
                        <input type="text" id="txtTag" name="txtTag" class="form-control" />
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdDeleteTag">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdSaveTag">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->



@section scripts{
    <!-- datables.net -->
    <script src="~/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>

    <script type="text/javascript">
        var employeeLoaded=false;
        var locationLoaded=false;
        var tagsLoaded=false;
        @await Html.PartialAsync("_ApiAccess")

        $(document).ready(function () {

            $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
                console.info(e.target.id);
                if (e.target.id == "employee-tab" && employeeLoaded == false) {GetEmployeesTable(); employeeLoaded = true; }
                if (e.target.id == "location-tab" && locationLoaded == false) {GetLocationsTable(); locationLoaded = true; }
                if (e.target.id == "services-tab" && servicesLoaded == false) {GetServicesTable(); servicesLoaded = true; }
                if (e.target.id == "tags-tab" && tagsLoaded == false) {GetTagsTable(); tagsLoaded = true; }
            });
                
            $('#dfEmployee').validate({
                rules: {
                    txtFirstName: {
                        minlength: 3,
                        maxlength: 50,
                        required: true
                    },
                    txtEmail: {required: true, maxlength: 255}
                },
                messages: {
                    txtFirstName: "Invalid name!",
                    txtEmail: "Invalid email!"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });
            $('#dfLocation').validate({
                rules: {
                    txtName: {
                        minlength: 3,
                        maxlength: 50,
                        required: true
                    },
                        txtTel: {
                        minlength: 9,
                        maxlength: 15
                    }
                },
                messages: {
                    txtName: "Neveljavno ime"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });
            $('#dfTag').validate({
                rules: {
                    txtTag: {
                        minlength: 3,
                        maxlength: 20,
                        required: true
                    }
                },
                messages: {
                    txtName: "Neveljavna oznaka"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });

            $('#myEmployeeModal').on('hidden.bs.modal', function (e) {
                CancelEmployeeModal();
            });
            $('#myLocationModal').on('hidden.bs.modal', function (e) {
                CancelLocationModal();
            });
            $('#myTagModal').on('hidden.bs.modal', function (e) {
                CancelTagModal();
            });

            //load settings
            loadSettings();
        });

        //#region Employee
         var GetEmployeesTable = function () {

            var table = $('#dtEmployees').DataTable({
                destroy: true,
                responsive: true,
                'order': [[0, 'desc']],
                //                dom: '<""top"">rt<""bottom""ilp><""container"">',
                searching: false,
                'processing': true,
                'serverSide': true,
                'ajax': {
                    'url': apiURL + "/api/myappuserstable",
                    type: 'POST', dataType: 'json',
                    data: function (dtParms) {
                        // I send it as a string to reduce the chance of an error before it reaches the server.
                        return JSON.stringify(dtParms);
                    },
                    'contentType': 'application/json; charset=utf-8',
                    "crossDomain": true,
                    "beforeSend": function (xhr, settings) {
                        getAPIToken().then((result) => {
                            $.ajax($.extend(settings, {
                                headers: { "Authorization": "Bearer " +result.AccessToken },
                                beforeSend: $.noop
                            }));
                        });
                        return false;
                    }

                },
                'columns': [
                    { 'data': 'firstName' },
                    { 'data': 'fullName'    },
                    { 'data': 'email'    },
                    {
                        data: null, 'orderable': false,
                        render: function (data, type, row, meta) {
                            return '<a class="btn btn-default" onclick="showEmployeeDetail(' + row.id + ');">Urejanje</a>';
                        }
                    }
                ]
            });

        }

        function CancelEmployeeModal() {
            $('#dfEmployee').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#dfEmployee input").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }


        function cmdAddEmployee_Click() {
            setEmployeeForm(0);
            $('#cmdDeleteEmployee').addClass('invisible')
            $("#myEmployeeModal").modal("show");
            $("#cmdSaveEmployee").off('click').click(function (evt) {
                if (SaveEmployee(0) != false) {
                    $("#myEmployeeModal").modal("hide");
                    GetEmployeesTable();
                }
            });


        }

        function setEmployeeForm(p_ID) {
            if (p_ID == 0) {
                //clear form
                $("#txtEmail").val('');
                $("#txtFirstName").val('');
                $("#txtLastName").val('');
                $("#txtETaxID").val('');
                $("#cbActive").prop('checked', true);
            }
            else {
                //fill form
                getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/myappuser/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer '+result.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtFirstName").val(result.firstName);
                        $("#txtLastName").val(result.lastName);
                        $("#txtEmail").val(result.email);
                        $("#cbActive").prop('checked', result.active);
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                    }
                });
                });
            }

        }

        function showEmployeeDetail(p_ID) {
            setEmployeeForm(p_ID);
            $('#cmdDeleteEmployee').removeClass('invisible');
            $("#myEmployeeModal").modal("show");
            $("#cmdSaveEmployee").off('click').click(function (evt) {
                if (SaveEmployee(p_ID) != false) { $("#myEmployeeModal").modal("hide"); }
            });
            $("#cmdDeleteEmployee").off('click').click(function (evt) {
                if (DeleteEmployee(p_ID) != false) { $("#myEmployeeModal").modal("hide"); }
            });

        }

        function DeleteEmployee(p_ID) {
            Swal.fire({
                title: 'Zbrišem zaposlenega?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                    $.ajax({
                        type: "DELETE",
                        url: apiURL + "/api/myappuser/" + p_ID,
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") { toastr.success("Zbrisano"); GetEmployeesTable(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                    });

                } else { return false; }
            });
        }

        function SaveEmployee(p_ID) {
            if ($('#dfEmployee').valid()) {
                var user={};
                user.id = p_ID;
                user.FirstName = $('#txtFirstName').val();
                user.LastName = $('#txtLastName').val();
                user.UserName = $('#txtEmail').val();
                user.EMail = $('#txtEmail').val();
                getAPIToken().then((result) => {
                    $.ajax({
                        type: "post",
                        data: JSON.stringify(user),
                        url: apiURL+"/api/myappuser",
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                             if (result == "OK") { toastr.success("Shranjeno"); GetEmployeesTable(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                });
            } else { return false; }
        }
        //#endregion

        //#region Locations
        var GetLocationsTable = function () {

            var tableL = $('#dtLocations').DataTable({
                destroy: true,
                responsive: true,
                'order': [[0, 'desc']],
                //                dom: '<""top"">rt<""bottom""ilp><""container"">',
                searching: false,
                'processing': true,
                'serverSide': true,
                'ajax': {
                    'url': apiURL + "/api/locationstable",
                    type: 'POST', dataType: 'json',
                    data: function (dtParms) {
                        // I send it as a string to reduce the chance of an error before it reaches the server.
                        return JSON.stringify(dtParms);
                    },
                    'contentType': 'application/json; charset=utf-8',
                    "crossDomain": true,
                    "beforeSend": function (xhr, settings) {
                        getAPIToken().then((result) => {
                            $.ajax($.extend(settings, {
                                headers: { "Authorization": "Bearer " +result.AccessToken },
                                beforeSend: $.noop
                            }));
                        });
                        return false;
                    }

                },
                'columns': [
                    { 'data': 'name' },
                    { 'data': 'tel'    },
                    {
                        data: null, 'orderable': false,
                        render: function (data, type, row, meta) {
                            return '<a class="btn btn-default" onclick="showLocationDetail(' + row.id + ');">Urejanje</a>&nbsp;<a class="btn btn-default" href="@Url.Content("~/location/")' + row.id + '">Prikaži</a>';
                        }
                    }
                ]
            });

            
            
        }

         function CancelLocationModal() {
            $('#dfLocation').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#dfLocation input").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }



        function cmdAddLocation_Click() {
            setLocationForm(0);
            $('#cmdDeleteLocation').addClass('invisible')
            $("#myLocationModal").modal("show");
            $("#cmdSaveLocation").off('click').click(function (evt) {
                if (SaveLocation(0) != false) {
                    $("#myLocationModal").modal("hide");
                    GetLocationsTable();
                }
            });


        }

        function setLocationForm(p_ID) {
            if (p_ID == 0) {
                //clear form

                $("#txtName").val('');
                $("#txtTel").val('');
                $("#cbLocationActive").prop('checked', true);
            }
            else {
                //fill form
                getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/location/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtName").val(result.name);
                        $("#txtTel").val(result.tel);

                        $("#cbLocationActive").prop('checked', result.active);
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                    }
                });
                });
            }

        }

        function showLocationDetail(p_ID) {
            setLocationForm(p_ID);
            $('#cmdDeleteLocation').removeClass('invisible');
            $("#myLocationModal").modal("show");
            $("#cmdSaveLocation").off('click').click(function (evt) {
                if (SaveLocation(p_ID) != false) { $("#myLocationModal").modal("hide"); }
            });
            $("#cmdDeleteLocation").off('click').click(function (evt) {
                if (DeleteLocation(p_ID) != false) { $("#myLocationModal").modal("hide"); }
            });

        }

        function DeleteLocation(p_ID) {
            Swal.fire({
                title: 'Zbrišem salon?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                    $.ajax({
                        type: "DELETE",
                        url: apiURL + "/api/location/" + p_ID,
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") { toastr.success("Zbrisano"); GetLocationsTable(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                    });

                } else { return false; }
            });
        }

        function SaveLocation(p_ID) {
            if ($('#dfLocation').valid()) {
                var location={};
                location.id = p_ID;
                location.Name = $('#txtName').val();
                location.Tel = $('#txtTel').val();
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(location),
                    url: apiURL+"/api/location",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                         if (result == "OK") { toastr.success("Shranjeno"); GetLocationsTable(); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });
            } else { return false; }
        }

        //#endregion

         //#region Tag
         var GetTagsTable = function () {

            var table = $('#dtTags').DataTable({
                destroy: true,
                responsive: true,
                'order': [[0, 'desc']],
                //                dom: '<""top"">rt<""bottom""ilp><""container"">',
                searching: false,
                'processing': true,
                'serverSide': true,
                'ajax': {
                    'url': apiURL + "/api/tagstable",
                    type: 'POST', dataType: 'json',
                    data: function (dtParms) {
                        // I send it as a string to reduce the chance of an error before it reaches the server.
                        return JSON.stringify(dtParms);
                    },
                    'contentType': 'application/json; charset=utf-8',
                    "crossDomain": true,
                    "beforeSend": function (xhr, settings) {
                        getAPIToken().then((result) => {
                            $.ajax($.extend(settings, {
                                headers: { "Authorization": "Bearer " +result.AccessToken },
                                beforeSend: $.noop
                            }));
                        });
                        return false;
                    }

                },
                'columns': [
                    { 'data': 'title' },
                    {
                        data: null, 'orderable': false,
                        render: function (data, type, row, meta) {
                            return '<a class="btn btn-default" onclick="showTagDetail(' + row.id + ');">Urejanje</a>';
                        }
                    }
                ]
            });

        }

        function CancelTagModal() {
            $('#dfTag').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#dfTag input").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }


        function cmdAddTag_Click() {
            setTagForm(0);
            $('#cmdDeleteTag').addClass('invisible')
            $("#myTagModal").modal("show");
            $("#cmdSaveTag").off('click').click(function (evt) {
                if (SaveTag(0) != false) {
                    $("#myTagModal").modal("hide");
                    GetTagsTable();
                }
            });


        }

        function setTagForm(p_ID) {
            if (p_ID == 0) {
                //clear form
                $("#txtTag").val('');

            }
            else {
                //fill form
                getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/tag/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtTag").val(result.title);
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error getting data:" + error);
                    }
                });
                });
            }

        }

        function showTagDetail(p_ID) {
            setTagForm(p_ID);
            $('#cmdDeleteTag').removeClass('invisible');
            $("#myTagModal").modal("show");
            $("#cmdSaveTag").off('click').click(function (evt) {
                if (SaveTag(p_ID) != false) { $("#myTagModal").modal("hide"); }
            });
            $("#cmdDeleteTag").off('click').click(function (evt) {
                if (DeleteTag(p_ID) != false) { $("#myTagModal").modal("hide"); }
            });

        }

        function DeleteTag(p_ID) {

            Swal.fire({
                title: 'Zbrišem oznako?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                    $.ajax({
                        type: "DELETE",
                        url: apiURL + "/api/tag/" + p_ID,
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") { toastr.success("Zbrisano"); GetTagsTable(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                    });

                } else { return false; }

            });
        }

        function SaveTag(p_ID) {
            if ($('#dfTag').valid()) {
                var tag={};
                tag.id = p_ID;
                tag.Title = $('#txtTag').val();
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(tag),
                    url: apiURL+"/api/tag",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                         if (result == "OK") { toastr.success("Shranjeno");GetTagsTable(); return true; }
                        else { toastr.error("Napaka:"+result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });
            } else { return false; }
        }
        //#endregion

        function saveSettings() {
            var settings = new Object();
            settings["cbUseSingleListOfClients"] = $("#cbUseSingleListOfClients").prop("checked");
            settings["cbUseSingleListOfServices"] = $("#cbUseSingleListOfServices").prop("checked");
            settings["cbAppointments_ShowTimetables"] = $("#cbAppointments_ShowTimetables").prop("checked");
            settings["cbEmployee_AlternatingWeeks"] = $("#cbEmployee_AlternatingWeeks").prop("checked");
            

            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL + "/api/Settings/Save/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranjeno"); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }

        function loadSettings() {
            var settings = new Object();
            settings["cbUseSingleListOfClients"] = 'false';
            settings["cbUseSingleListOfServices"] = 'false';
            settings["cbAppointments_ShowTimetables"] = 'false';
            settings["cbEmployee_AlternatingWeeks"] = 'false';
            
            getAPIToken().then((result) => {
            $.ajax({
                type: "post",
                data: JSON.stringify(settings),
                url: apiURL+"/api/Settings/Load/",
                contentType: "application/json; charset=utf-8",
                headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                dataType: "json",
                 success: function (result) {
                     if (result["cbUseSingleListOfClients"] != undefined) {
                         if (result["cbUseSingleListOfClients"] == "true") { $('#cbUseSingleListOfClients').prop('checked', true);}
                     }
                     if (result["cbUseSingleListOfServices"] != undefined) {
                         if (result["cbUseSingleListOfServices"] == "true") { $('#cbUseSingleListOfServices').prop('checked', true);}
                     }
                     if (result["cbAppointments_ShowTimetables"] != undefined) {
                         if (result["cbAppointments_ShowTimetables"] == "true") { $('#cbAppointments_ShowTimetables').prop('checked', true);}
                     }
                     if (result["cbEmployee_AlternatingWeeks"] != undefined) {
                         if (result["cbEmployee_AlternatingWeeks"] == "true") { $('#cbEmployee_AlternatingWeeks').prop('checked', true);}
                     }
                },
                error: function (xhr, status, error) {
                    toastr.error("Napaka:" + error.toString());
                    return false;
                }
            });
            });
        }
    </script>
}

