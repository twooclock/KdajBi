@using Newtonsoft.Json;
@using KdajBi.Web;
@using KdajBi.Web.ViewModels;

@{
    ViewData["Title"] = "Stranke";
}

@section styles{
    <link href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />"
    <link href="~/plugins/datatables-buttons/css/buttons.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-fixedheader/css/fixedHeader.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-scroller/css/scroller.bootstrap4.css" rel="stylesheet" />

    <link href="~/plugins/jquery-ui/jquery-ui.min.css" rel="stylesheet" />

    <link href="~/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css" rel="stylesheet" />
    <link href="~/plugins/flatpickr/flatpickr.min.css" rel="stylesheet" />

    <style>
        .select2-container--default .select2-selection--multiple {
            background-color: white;
            border: 1px solid #ced4da;
            border-radius: 4px;
            cursor: text
        }

        .select2-container--default.select2-container--focus .select2-selection--multiple {
            border: solid #ced4da 1px;
        }

        .select2-container--default.select2-container--focus .select2-selection--multiple {
            /*! border:solid black 1px; */ outline: 0
        }

        .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background-color: #3c8dbc;
            opacity: 0.85;
            margin-top: 0.6rem;
        }
    </style>
}


<!-- page content -->
<div class="right_col col-md-12" role="main">


    <div class="row">
        <div class="col-md-12 col-smb-12 col-xs-12">
            <div class="dashboard_graph">

                <div class="row x_title">
                    <div class="col-md-6">
                        <div class="input-group mb-2 mt-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text" onclick="$('#clientsearch').select();$('#clientsearch').autocomplete('search')">
                                    <span class="fas fa-user"></span>
                                </div>
                            </div>
                            <input id="clientsearch" type="text" class="form-control" placeholder="Stranka..." onclick="$('#clientsearch').select(); $('#clientsearch').autocomplete('search')">
                            <div class="input-group-append">
                                <button class="" type="button" onclick="cmdClientAdd_Click();"><i class="fas fa-plus"></i></button>
                            </div>

                        </div>
                    </div>

                </div>
                <div class="card card-primary card-outline card-outline-tabs">
                    <div class="card-header p-0 border-bottom-0">
                        <ul class="nav nav-tabs" id="tabClient" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="general-tab" data-toggle="tab" href="#general" role="tab" aria-controls="general" aria-selected="true">Stranka</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="appointments-tab" data-toggle="tab" href="#appointments" role="tab" aria-controls="appointments" aria-selected="false">Naročila</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="sms-tab" data-toggle="tab" href="#sms" role="tab" aria-controls="appointments" aria-selected="false">Sms sporočila</a>
                            </li>

                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" id="custom-tabs-four-tabContent">
                            <div id="general" class="tab-pane fade active show" role="tabpanel" aria-labelledby="general-tab">
                                <div class="col-md-12">
                                    <form id="dataform" class="dataform" name="dataform">
                                        <div class="form-row">
                                            <div class="form-group mb-1 col-sm-6" style=" margin-bottom: 1px;">
                                                <label for="txtClientFirstName">
                                                    Ime:
                                                </label>
                                                <input type="text" id="txtClientFirstName" name="txtClientFirstName" class="form-control" />
                                            </div>
                                            <div class="form-group mb-1 col-sm-6">
                                                <label for="txtClientLastName">
                                                    Priimek:
                                                </label>
                                                <input type="text" id="txtClientLastName" name="txtClientLastName" class="form-control" />
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group mb-1 col-sm-6">
                                                <label for="txtClientMobile">
                                                    Mobi:
                                                </label>
                                                <div class="input-group">
                                                    <input type="tel" id="txtClientMobile" name="txtClientMobile" class="form-control" onkeyup="if (/\D/g.test(this.value)) this.value = this.value.replace(/\D/g,'')" />
                                                    <div class="input-group-append">
                                                        <div class="input-group-text text-sm">
                                                            <div class="custom-control custom-checkbox">
                                                                <input type="checkbox" class="custom-control-input" id="cbClientSMS">
                                                                <label class="p-0 custom-control-label" for="cbClientSMS">Dovoli</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group mb-1 col-sm-6">
                                                <label for="txtClientEmail">
                                                    Email:
                                                </label>
                                                <div class="input-group">
                                                    <input type="text" id="txtClientEmail" name="txtClientEmail" class="form-control" />
                                                    <div class="input-group-append">
                                                        <div class="input-group-text text-sm">
                                                            <div class="custom-control custom-checkbox">
                                                                <input type="checkbox" class="custom-control-input" id="cbClientEmail">
                                                                <label class="p-0 custom-control-label" for="cbClientEmail">Dovoli</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>




                                        <div id="test2" class="form-group mb-1 ">
                                            <label for="txtClientBirthday">
                                                Rojstni dan:
                                            </label>
                                            <div class="input-group flatpickr">
                                                <input type="text" id="txtClientBirthday" name="txtClientBirthday" class="form-control" aria-describedby="basic-addonY" data-input />
                                                <div class="input-group-append">
                                                    <div class="input-group-text" id="basic-addonY" data-toggle onclick="">
                                                        <i class="fas fa-calendar"></i>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="form-group mb-1">
                                            <label for="txtClientAddress">
                                                Naslov:
                                            </label>
                                            <input type="text" id="txtClientAddress" name="txtClientAddress" class="form-control" />
                                        </div>
                                        <div class="form-group mb-1">
                                            <label for="txtClientZip">
                                                Pošta:
                                            </label>
                                            <input type="text" id="txtClientZip" name="txtClientZip" class="form-control" />
                                        </div>
                                        <div class="form-group mb-1">
                                            <label for="txtClientNotes">
                                                Opombe:
                                            </label>
                                            <textarea rows="2" id="txtClientNotes" name="txtClientNotes" class="form-control"></textarea>
                                        </div>
                                        <div class="form-group mb-1">
                                            <label for="tags">Oznake:</label>
                                            <select id="txtTags" class="form-control" multiple="multiple">
                                            </select>
                                        </div>


                                    </form>
                                    <div class="form-group">
                                        <button id="cmdClientDelete" class="btn btn-danger" onclick="DeleteClient(SelectedClientID);" disabled>Zbriši</button>
                                        <button id="cmdClientSave" class="btn btn-primary" onclick="SaveClient(SelectedClientID);">Shrani</button>
                                    </div>
                                </div>
                            </div>

                            <div id="appointments" class="tab-pane fade" role="tabpanel" aria-labelledby="appointments-tab">
                                <div class="card">
                                    <div class="card-body p-0">
                                        <div class="col-12">
                                            <div class="table-responsive">
                                                <table id="dtAppointments" class="table table-striped table-bordered" width="100%">
                                                    <thead>
                                                        <tr>
                                                            <th>
                                                                Naročen
                                                            </th>
                                                            <th>
                                                                Datum
                                                            </th>
                                                            <th>
                                                                Opis
                                                            </th>
                                                            <th>
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>

                                    </div>


                                </div>
                            </div>

                            <div id="sms" class="tab-pane fade" role="tabpanel" aria-labelledby="sms-tab">
                                <div class="card">
                                    <div class="card-body p-0">
                                        <div class="col-12">
                                            <div class="table-responsive">
                                                <table id="dtsms" class="table table-striped table-bordered" width="100%">
                                                    <thead>
                                                        <tr>
                                                            <th>
                                                                Datum
                                                            </th>
                                                            <th>
                                                                Sporočilo
                                                            </th>
															<th>
                                                                Status
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            


                        </div>
                    </div>
                    <!-- /.card -->
                </div>




                <div class="clearfix"></div>
            </div>
        </div>

    </div>
    <br />


</div>
<!-- /page content -->
<!-- modal new client content-->
<!-- /modal content-->

@section scripts{
    <script src="~/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>
    <script src="~/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/plugins/js-cookie/js.cookie.min.js"></script>
    <script src="~/plugins/select2/js/select2.full.min.js"></script>

    <script src="~/plugins/flatpickr/flatpickr.min.js"></script>

    <script src="~/plugins/dayjs/dayjs.min.js"></script>
    <script src="~/plugins/dayjs/plugin/utc.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_utc)</script>
    <script src="~/plugins/dayjs/plugin/localizedFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localizedFormat);</script>
    <script src="~/plugins/dayjs/plugin/localeData.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localeData)</script>
    <script src="~/plugins/dayjs/plugin/customParseFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_customParseFormat)</script>

    <script type="text/javascript">
        var SelectedClientID=0;
        var fp;
        var dsAppointments = [];
        var loadedSmsTab=false;

        @await Html.PartialAsync("_ApiAccess")
        @await Html.PartialAsync("_GooApiAccess")

       @Html.Raw("var gooCals=" + Newtonsoft.Json.JsonConvert.SerializeObject(Model.GoogleCalendars));

        function hideKeyboard() {
            //this set timeout needed for case when hideKeyborad
            //is called inside of 'onfocus' event handler
            setTimeout(function () {

                //creating temp field
                var field = document.createElement('input');
                field.setAttribute('type', 'text');
                //hiding temp field from peoples eyes
                //-webkit-user-modify is nessesary for Android 4.x
                field.setAttribute('style', 'position:absolute; top: 0px; opacity: 0; -webkit-user-modify: read-write-plaintext-only; left:0px;');
                document.body.appendChild(field);

                //adding onfocus event handler for out temp field
                field.onfocus = function () {
                    //this timeout of 200ms is nessasary for Android 2.3.x
                    setTimeout(function () {

                        field.setAttribute('style', 'display:none;');
                        setTimeout(function () {
                            document.body.removeChild(field);
                            document.body.focus();
                        }, 14);

                    }, 200);
                };
                //focusing it
                field.focus();

            }, 50);
        }

        function loadScript(src) {
            return new Promise(function (resolve, reject) {
                const s = document.createElement('script');
                let r = false;
                s.type = 'text/javascript';
                s.src = src;
                s.async = true;
                s.onerror = function (err) {
                    reject(err, s);
                };
                s.onload = s.onreadystatechange = function () {
                    // console.log(this.readyState); // uncomment this line to see which ready states are called.
                    if (!r && (!this.readyState || this.readyState == 'complete')) {
                        r = true;
                        resolve();
                    }
                };
                const t = document.getElementsByTagName('script')[0];
                t.parentElement.insertBefore(s, t);
            });
        }





        $(document).ready(function () {

            initializeGapi().catch((err) => { toastr.error("Napaka pri komunikaciji z Googlom!\nPoskusite se odjaviti in ponovno prijaviti."); });

            //if (navigator.language.slice(0, 2) != "en") {
                // load locale and Get flatpicker localized instance
                loadScript("/plugins/dayjs/locale/" + navigator.language.slice(0, 2) + ".js")
                    .then(function () {
                        dayjs.locale(navigator.language.slice(0, 2));

                        loadScript("/plugins/flatpickr/l10n/" + navigator.language.slice(0, 2) + ".js")
                            .then(function () {

                                fp = $(".flatpickr").flatpickr({
                                    altInput: true,
                                    locale: dayjs.locale(),
                                    clickOpens: false, allowInput: true,
                                    wrap: true,
                                    altFormat: dayjs.localeData().longDateFormat('l'),
                                    ariaDateFormat: dayjs.localeData().longDateFormat('l'),
                                    dateFormat: dayjs.localeData().longDateFormat('l'),
                                    parseDate: (datestr, format) => {
                                        var fmt = format;
                                        if (fmt == 'Y-m-d') { fmt = 'YYYY-MM-DD'; }
                                        return dayjs(datestr, fmt).toDate();
                                    },
                                    formatDate: (date, format, locale) => {
                                        if (format != 'F j, Y') {
                                            return dayjs(date).format(format);
                                        }
                                    }
                                });
                            });
                    });

            //}
            //bind cboLocations
            $("#cboLocations").off('change').change(function (evt) {
                Cookies.set('DefaultLocation', $(this).val());
                showClientDetail(0);
                GetClients();
                dsAppointments = [];
                var t = $("#dtAppointments").DataTable(); t.clear(); t.rows.add(dsAppointments); t.draw();
            });

            //init toastr
            toastr.options.preventDuplicates = true;
            toastr.options.timeOut = 1000;

           var myClients = JSON.parse('@Html.Raw(Model.ClientsJson)');
            $("#clientsearch").autocomplete({
                minlength: 3,
                delay: 200,
                source: myClients,
                select: function (event, ui) {
                    hideKeyboard();
                    //$("#clientsearch").val(ui.item.label);
                    SelectedClientID = ui.item.value;
                    showClientDetail(SelectedClientID);
                    $("#clientsearch").blur();
                    event.preventDefault();
                    return false;
                },
                focus: function (event, ui) { event.preventDefault(); return false; }
            });

            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                if (e.target.id == "appointments-tab") { loadAppointmentsTab(); }
                if (e.target.id == "sms-tab" && loadedSmsTab == false) { GetSmsTable(); loadedSmsTab = true;}
            });

            $('#dataform').validate({
                    rules: {
                        txtClientFirstName: {
                            minlength: 3,
                            maxlength: 50,
                            required: true
                        }
                    },
                    messages: {
                        txtClientFirstName: "Neveljavno ime!"
                    },
                    highlight: function (element) {
                        $(element).closest('.form-control').addClass('is-invalid');
                    },
                    unhighlight: function (element) {
                        $(element).closest('.form-control').removeClass('is-invalid');
                    },
                    errorElement: 'span',
                    errorClass: 'invalid-feedback',
                    errorPlacement: function (error, element) {
                        if (element.parent('.input-group').length) {
                            error.insertAfter(element.parent());
                        } else { error.insertAfter(element); }
                    }
                });

            initTags();

            $('#dtAppointments').DataTable({
                dom: '<"row"lr><"row"<"col-12"t>><"row"<"col-sm-6"i><"col-sm-6"p>>',
                data: dsAppointments,
                columns: [
                    { title: 'Naročen',orderable: false },
                    {
                        title: 'Datum', orderable: false,
                        render: function (data, type, row, meta) {
                          return dayjs(row[1]).format("LLL");
                        }},
                    { title: 'Opis', orderable: false },
                    {
                        title: '', orderable: false,
                        render: function (data, type, row, meta) {
                          return '<a href="/appointments/index?date='+dayjs(row[1]).toISOString().substring(0, 10)+'\" target=\"_blank\">Prikaži</a>';
                        } },
                ],
            });

        });

        function truncate( str, n, useWordBoundary ){
          if (str.length <= n) { return str; }
          const subString = str.substr(0, n-1); // the original check
          return (useWordBoundary 
            ? subString.substr(0, subString.lastIndexOf(" ")) 
            : subString) + '<a href="#" data-toggle="popover" data-content="'+str+'">&hellip;</a>';
        };

        function GetSmsTable() {
             getAPIToken().then((result) => {
            var table = $('#dtsms').DataTable({
                destroy: true,
                responsive: true,
                'order': [[0, 'desc']],
                //                dom: '<""top"">rt<""bottom""ilp><""container"">',
                searching: false,
                'processing': true,
                'serverSide': true,
                'ajax': {
                    'url': apiURL + "/api/Sms/ClientSmsTable/" + SelectedClientID,
                    type: 'POST', dataType: 'json',
                    data: function (dtParms) {
                        return JSON.stringify(dtParms);
                    },
                    'contentType': 'application/json; charset=utf-8',
                    "crossDomain": true,
                    "beforeSend": function (xhr, settings) {
                        getAPIToken().then((result) => {
                            $.ajax($.extend(settings, {
                                headers: { "Authorization": "Bearer " +result.AccessToken },
                                beforeSend: $.noop
                            }));
                        });
                        return false;
                    }

                },
                'columns': [
                    { 'data': 'date',
                        render: function (data, type, row, meta) {
                            return dayjs(row.date).format('L LT') ;
                        } },
                    { 'data': 'msgTxt',
                        render: function (data, type, row, meta) {
                            return truncate(row.msgTxt,50,true) ;
                        } },
                    { 'data': 'apiResponse',
                        render: function (data, type, row, meta) {
                            if (row.recipients[0].apiResponse != null) {
                                if (row.recipients[0].apiResponse == "OK") { return row.recipients[0].apiResponse; }
                                else { return "<p class='text-danger m-0'>" + row.recipients[0].apiResponse + "</p>"; }
                            } else { return "<p class='text-muted m-0'>(neposlano)</p>"; }
                        } }
                ]
            });
                 table.on('draw.dt', function () {
                    $('[data-toggle="popover"]').popover({trigger: "click hover"})
                });
            });

        }

        async function loadAppointmentsTab() {

            refreshGAPIToken().then(async () => {
                dsAppointments = [];
                gooCals.forEach(async function (gcal) {
                    //for each goo calendar for location
                    console.log(gcal.Item1, gcal.Item2);
                    await findEventsForCalendar(gcal.Item1,gcal.Item2, SelectedClientID, "").then(() => { console.log("refresh table"); var t = $("#dtAppointments").DataTable(); t.clear(); t.rows.add(dsAppointments); t.draw(); }).catch(e => { console.log(e); });
                });
                

                
            });

        }

        async function findEventsForCalendar(p_gcalId,p_gcalName, p_clientId,pageToken) {
            return new Promise(function (resolve, reject) {
                if (typeof pageToken === "undefined") { console.log('no next page'); reject(); return; }

                gapi.client.calendar.events.list({
                    "calendarId": p_gcalId,
                    "sharedExtendedProperty":"clientid="+p_clientId,
                    "showDeleted": false,
                    "singleEvents": true,
                    "pageToken": pageToken
                }).execute(function (response) {
                    if (response.error || response == false) {
                        toastr.error("Napaka pri komunikaciji z Googlom!");
                        reject(response.error); return;
                    }
                    else {
                        findEventsForCalendar(p_gcalId,p_gcalName,p_clientId,response.nextPageToken).catch(e => { console.log(e); });
                            response.items.forEach(function (item) {
                                console.log(item.start.dateTime, item.summary);
                                var row = [];
                                row.push(p_gcalName, item.start.dateTime , item.summary);
                                dsAppointments.push(row);
                                //calendar.addEvent({
                                //    id: item.id,
                                //    title: item.summary,
                                //    start: item.start.dateTime,
                                //    end: item.end.dateTime,
                                //    display: null,
                                //    eventColor:aResource.eventBackgroundColor,
                                //    resourceId: calId,
                                //    extendedProps: ((typeof item.extendedProperties === "undefined") ? {} : item.extendedProperties.shared)
                                //});

                            });
                        resolve();

                    }
                });
            });
        }


         function GetClients() {

            //fill client search
             getAPIToken().then((result) => {
                 $.ajax({
                     type: "GET",
                     url: apiURL + "/api/clients/getclientslist/" + $("#cboLocations").val(),
                     contentType: "application/json; charset=utf-8",
                     headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                     dataType: "json",
                     async: true,
                     success: function (msg) {
                         myClients = msg;
                         $("#clientsearch").autocomplete({
                             minlength: 3,
                             delay: 200,
                             source: myClients,
                             select: function (event, ui) {
                                 $("#clientsearch").val(ui.item.label);
                                 SelectedClientID = ui.item.value;
                                 showClientDetail(SelectedClientID);
                                 return false;
                             },
                             focus: function (event, ui) { event.preventDefault(); return false; }
                         });
                     },
                     error: function () {
                         toastr.error('Error filling clients')
                     }
                 });
             });

        }

        function cmdClientAdd_Click() {
            $('#txtClientFirstName').focus();
            SelectedClientID = 0;
            $('#clientsearch').val('');
            setClientForm(0);
            //$('#cmdClientDelete').addClass('invisible');
            $('#cmdClientDelete').prop('disabled', true);
            /*$("#cmdClientSave").off('click').click(function (evt) {
                if (SaveClient(0) != false) {

                }
            });
            */

        }

        function setClientForm(p_ID) {
            loadedSmsTab = false;
            if (p_ID == 0) {
                //clear form
                $("#txtClientFirstName").val('');
                $("#txtClientLastName").val('');
                $("#txtClientMobile").val('');
                $("#txtClientEmail").val('');
                $("#cbClientSMS").prop('checked', true);
                $("#cbClientEmail").prop('checked', true);
                fp.clear(); //$("#txtClientBirthday").val('');
                $("#txtClientAddress").val('');
                $("#txtClientZip").val('');
                $("#txtClientNotes").val('');

            }
            else {
                //fill form
                getAPIToken().then((result) => {
                    $.ajax({
                        type: "get",
                        url: apiURL + "/api/client/" + p_ID,
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        async: true,
                        success: function (result) {
                            $("#txtClientFirstName").val(result.firstName);
                            $("#txtClientLastName").val(result.lastName);
                            $("#txtClientMobile").val(result.mobile);
                            $("#txtClientEmail").val(result.email);
                            $("#cbClientSMS").prop('checked', result.allowsSMS);
                            $("#cbClientEmail").prop('checked', result.allowsEmail);
                            fp.clear();
                            if (result.birthday != null) {
                                fp.setDate(new Date(result.birthday));
                            }
                            $("#txtClientAddress").val(result.address);
                            $("#txtClientZip").val(result.zip);
                            $("#txtClientNotes").val(result.notes);
                            $("#txtTags").val(result.tags.map(a => a.id)).trigger('change');
                            $("#general-tab").tab('show');
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Error getting client data:" + error);
                        }
                    });
                },
                    function (error) { toastr.error("Error getting token:" + error); }
                );

            }

        }

        function showClientDetail(p_ID) {
            setClientForm(p_ID);
            if (p_ID != 0) {
                //$('#cmdClientDelete').removeClass('invisible');
                $('#cmdClientDelete').prop('disabled', false);
                /*$("#cmdClientSave").off('click').click(function (evt) {
                    if (SaveClient(p_ID) != false) { }
                });

                $("#cmdClientDelete").off('click').click(function (evt) {
                    if (DeleteClient(p_ID) != false) { }
                });
                */
            }
            else {
                //$('#cmdClientDelete').addClass('invisible');
                $('#cmdClientDelete').prop('disabled', true);
            }
        }

        function DeleteClient(p_ID) {
            Swal.fire({
                title: 'Zbrišem stranko \n'+$('#txtClientFirstName').val()+' '+$('#txtClientLastName').val()+'?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                        $.ajax({
                            type: "DELETE",
                            url: apiURL + "/api/client/" + p_ID,
                            contentType: "application/json; charset=utf-8",
                            headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                            dataType: "json",
                            success: function (result) {
                                if (result == "OK") { toastr.success("Stranka zbrisana"); GetClients(); cmdClientAdd_Click(); return true; }
                                else { toastr.error("Napaka:" + result); return false; }
                            },
                            error: function (xhr, status, error) {
                                toastr.error("Napaka:" + error.toString());
                                return false;
                            }
                        });
                    });
                } else { return false; }
            });
        }


        function SaveClient(p_ID) {
            if ($('#dataform').valid()) {
                var client={};
                client.id = p_ID;
                client.LocationId = parseInt($("#cboLocations").val());
                client.FirstName = $('#txtClientFirstName').val();
                client.LastName =$("#txtClientLastName").val();
                client.Mobile =$("#txtClientMobile").val();
                client.Email =$("#txtClientEmail").val();
                client.AllowsSMS = $("#cbClientSMS").prop('checked');
                client.AllowsEmail = $("#cbClientEmail").prop('checked');
                //if (dayjs.utc($("#txtClientBirthday").val(),"l").isValid())
                //{ client.Birthday = dayjs.utc($("#txtClientBirthday").val(),"l");}

                client.Birthday =fp.selectedDates[0];
                client.Address = $("#txtClientAddress").val();
                client.Zip =$("#txtClientZip").val();
                client.Notes = $("#txtClientNotes").val();
                client.Sex = "F";

                var myTags = [];
                $('#txtTags').select2('data').forEach(function (item) {
                    var clientTag = {};
                    clientTag.clientId = p_ID;
                    clientTag.tagId = item.id;
                    var tag = { id:0, Title: 'Title'};

                    if (item.added == true)
                    { tag.id == 0; tag.Title = item.text; }
                    else
                    { tag.id == item.id }
                    clientTag.Tag=tag;

                    myTags.push(clientTag);
                });

                client.ClientTags = myTags;

                client.Active = true;

                var replacer = function (key, value) {
                    if (this[key] instanceof Date) {
                        return dayjs(this[key]).format('YYYY-MM-DD HH:mmZ');
                    }
                    return value;
                }

                getAPIToken().then((result) => {
                    $.ajax({
                        type: "post",
                        data: JSON.stringify(client, replacer),
                        url: apiURL + "/api/client/",
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (retval) {
                            if (retval.result == "OK") { toastr.success("Shranjeno"); GetClients(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                });
            } else { return false; }
        }

        //#region tags
        var lastResults = [];


        function initTags() {

            //get tags
            var myTags= [];
            getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL + "/api/tags/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    async: false,
                    success: function (result) {
                        var retval = [];
                        result.forEach(function (item) {
                            retval.push({ id: item.id, text: item.title })
                        });
                        myTags = retval;

                        $("#txtTags").select2({
                            multiple: true,
                            tags: true,
                            placeholder: "",
                            tokenSeparators: [","],

                            data: myTags,

                            createTag: function (params) {
                                var term = $.trim(params.term);
                                if (term === '') { return null; }
                                //var text = term + (lastResults.some(function (r) { return r.text == term }) ? "" : " (nova oznaka)");
                                return {
                                    id: lastResults.length,
                                    text: term, added: true, tagId: 0
                                };
                            },
                            insertTag: function (data, tag) {
                                // Insert the tag at the end of the results
                                data.push(tag);
                              }
                        });

                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error getting data:" + error);
                    }
                });
            });




            $('#txtTags').on("select2:select", function (e) {
                var data = e.params.data;
                if (data.added) {
                    Swal.fire({
                        title: "Želite dodati novo oznako " + data.text.split('(')[0] + "?",
                        showDenyButton: true,
                        confirmButtonText: 'Da',
                        denyButtonText: 'Ne',
                    }).then((result) => {
                        if (result.isDenied) {
                            var selectedTags = $("#txtTags").val();
                            var index = selectedTags.indexOf(data.id);
                            selectedTags.splice(index, 1);
                            if (selectedTags.length == 0) {
                                $("#txtTags").val("").trigger("change");
                            } else {
                                $("#txtTags").val(selectedTags).trigger("change");
                            }
                        }
                    });
                }
            });

        }


        //#endregion
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoadOkay()" onerror="gapiLoadFail(event)"></script>

}

