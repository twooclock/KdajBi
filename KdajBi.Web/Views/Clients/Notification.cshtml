@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Obveščanje strank";
}

@section styles{
    <link href="~/plugins/jquery-ui/jquery-ui.min.css" rel="stylesheet" />

    <link href="~/plugins/toastr/toastr.min.css" rel="stylesheet" />
    <link href="~/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/plugins/select2-bootstrap4-theme/select2-bootstrap4.min.css" rel="stylesheet" />
    <link href="~/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
<link href="~/plugins/flatpickr/flatpickr.min.css" rel="stylesheet" />
<link href="~/plugins/flatpickr/plugins/confirmDate/confirmDate.css" rel="stylesheet" />
<link href="~/plugins/bs-stepper/css/bs-stepper.min.css" rel="stylesheet" />
    <style>
        .select2-container--default .select2-selection--multiple {
            background-color: white;
            border: 1px solid #ced4da;
            border-radius: 4px;
            cursor: text
        }

        .select2-container--default.select2-container--focus .select2-selection--multiple {
            border: solid #ced4da 1px;
        }

        .select2-container--default.select2-container--focus .select2-selection--multiple {
            /*! border:solid black 1px; */ outline: 0
        }

        .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background-color: #3c8dbc;
            opacity: 0.85;
            margin-top: 0.6rem;
        }
    </style>
}


<!-- page content -->
<div class="right_col col-md-12" role="main">


    <div class="row">
        
        <div class="col-md-12 mt-1">
          <h2>Obveščanje strank</h2>
          <div id="stepper2" class="bs-stepper">
            <div class="bs-stepper-header">
              <div class="step" data-target="#step-nl-1">
                <button type="button" class="btn step-trigger">
                  <span class="bs-stepper-circle">1</span>
                  <span class="bs-stepper-label">Izbira strank</span>
                </button>
              </div>
              <div class="line"></div>
              <div class="step" data-target="#step-nl-2">
                <div class="btn step-trigger">
                  <span class="bs-stepper-circle">2</span>
                  <span class="bs-stepper-label">Priprava sporočila</span>
                </div>
              </div>
              <div class="line"></div>
              <div class="step" data-target="#step-nl-3">
                <button type="button" class="btn step-trigger">
                  <span class="bs-stepper-circle">3</span>
                  <span class="bs-stepper-label">Pošiljanje</span>
                </button>
              </div>
            </div>
            <div class="bs-stepper-content">
                <div id="step-nl-1" class="content">
                    <p id="lblStranke" class="">Stranke</p>
                    <div id="cblClients" class="col-md-6">
                        <div id="cblHeader"class="form-control custom-control custom-checkbox" style="padding-left: 2rem;"><input class="custom-control-input" type="checkbox" id="cbSelectAll"><label for="cbSelectAll" class="custom-control-label"> </label>
                        <input id="txtClientSearch" style="border:0" type="text" value="" >
                        </div>
                    </div>
                    <button class="btn btn-primary" onclick="stepper2.next()">Naprej</button>
                </div>
                <div id="step-nl-2" class="content">
                    <div class="form-group mb-1">
                        <label id="lblMessage" for="txtMessage">
                            Sporočilo:
                        </label>
                        <textarea rows="5" id="txtMessage" name="txtMessage" class="form-control" maxlength="640"></textarea>
                    </div>
                    <button class="btn btn-primary" onclick="stepper2.next()">Naprej</button>
                </div>
                <div id="step-nl-3" class="content">
                    <div id="test2" class="form-group mb-1 ">
                        <label for="txtNotificationTime">
                            Sporočilo pošlji:
                        </label>
                        <div class="input-group flatpickr">
                            <input type="text" id="txtNotificationTime" name="txtNotificationTime" class="form-control col-md-6" aria-describedby="basic-addonY" data-input />
                            <div class="input-group-append">
                                <div class="input-group-text" id="basic-addonY" data-toggle onclick="">
                                    <i class="fas fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                        <div class="form-group mb-1">
                                            <label for="txtDebug">
                                                Debug:
                                            </label>
                                            <textarea rows="10" id="txtDebug" name="txtDebug" class="form-control"></textarea>
                                        </div>
                    </div>
                    <button class="btn btn-primary" onclick="sendMessage()">Pošlji</button>
                    <button type="button" class="btn btn-default" onclick="test();">TEST</button>
                </div>
            </div>
          </div>
        </div>

    </div>
    <br />


</div>
<!-- /page content -->
<!-- modal new client content-->
<!-- /modal content-->

@section scripts{
    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>
    <script src="~/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/plugins/js-cookie/js.cookie.min.js"></script>
    <script src="~/plugins/toastr/toastr.min.js"></script>
    <script src="~/plugins/select2/js/select2.full.min.js"></script>
    <script src="~/plugins/sweetalert2/sweetalert2.min.js"></script>

    <script src="~/plugins/flatpickr/flatpickr.min.js"></script>
    <script src="~/plugins/flatpickr/plugins/confirmDate/confirmDate.js"></script>

    <script src="~/plugins/dayjs/dayjs.min.js"></script>
    <script src="~/plugins/dayjs/plugin/utc.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_utc)</script>
    <script src="~/plugins/dayjs/plugin/localizedFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localizedFormat); </script>
    <script src="~/plugins/dayjs/plugin/localeData.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localeData)</script>
    <script src="~/plugins/dayjs/plugin/customParseFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_customParseFormat)</script>
    <script src="~/plugins/bs-stepper/js/bs-stepper.min.js"></script>

    <script type="text/javascript">
        
        function getAPIToken() {
            var tnow = (621355968e9 + 10000 + (new Date()).getTime() * 1e4);
            var reqdata = { Token: apiToken.RefreshToken, UserEmail: apiUser };
            if (tnow < apiToken.Expiration)
            { return apiToken.AccessToken; }
            else {
                //request new token
                $.ajax({
                    type: "post",
                    data: JSON.stringify(reqdata),
                    url: apiURL+"/api/token/refresh",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer '+apiToken.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        return apiToken.AccessToken;
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            }
        }

        function hideKeyboard() {
            //this set timeout needed for case when hideKeyborad
            //is called inside of 'onfocus' event handler
            setTimeout(function () {

                //creating temp field
                var field = document.createElement('input');
                field.setAttribute('type', 'text');
                //hiding temp field from peoples eyes
                //-webkit-user-modify is nessesary for Android 4.x
                field.setAttribute('style', 'position:absolute; top: 0px; opacity: 0; -webkit-user-modify: read-write-plaintext-only; left:0px;');
                document.body.appendChild(field);

                //adding onfocus event handler for out temp field
                field.onfocus = function () {
                    //this timeout of 200ms is nessasary for Android 2.3.x
                    setTimeout(function () {

                        field.setAttribute('style', 'display:none;');
                        setTimeout(function () {
                            document.body.removeChild(field);
                            document.body.focus();
                        }, 14);

                    }, 200);
                };
                //focusing it
                field.focus();

            }, 50);
        }

        function loadScript(src) {
            return new Promise(function (resolve, reject) {
                const s = document.createElement('script');
                let r = false;
                s.type = 'text/javascript';
                s.src = src;
                s.async = true;
                s.onerror = function (err) {
                    reject(err, s);
                };
                s.onload = s.onreadystatechange = function () {
                    // console.log(this.readyState); // uncomment this line to see which ready states are called.
                    if (!r && (!this.readyState || this.readyState == 'complete')) {
                        r = true;
                        resolve();
                    }
                };
                const t = document.getElementsByTagName('script')[0];
                t.parentElement.insertBefore(s, t);
            });
        }

        var delay = (function () {
            var timer = {}
                , values = {}
            return function (el) {
                var id = el.id + '.' + el.name
                return {
                    enqueue: function (ms, cb) {
                        if (values[id] == el.value) return
                        //if (!el.value) return
                        var original = values[id] = el.value
                        clearTimeout(timer[id])
                        timer[id] = setTimeout(function () {
                            if (original != el.value) return // solves race condition
                            cb.apply(el)
                        }, ms)
                    }
                }
            }
        }());


        var fp;

        var myClients = JSON.parse('@Html.Raw(Model.ClientsJson)');
        

        @await Html.PartialAsync("_ApiAccess")

        var stepper2 = new Stepper(document.querySelector('#stepper2'), {
            linear: false,
            animation: true
        })

        function formatDate(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear(),
                hour = d.getHours(),
                min = d.getMinutes();
            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;

            return [day, month, year, hour,min].join('.');
        }
        function test() {
            var tekst = $('#txtDebug').val();
            tekst = 'fp.selectedDates:' + formatDate(fp.selectedDates[0]) + 'utc:' + new Date(dayjs(fp.selectedDates[0]).utc()) + '\n' + tekst;
            dayjs(fp.selectedDates[0]).utc()
            $('#txtDebug').val(tekst)
            return false;
        }

        function sendMessage() {
            var sendMsg = { Message: $('#txtMessage').val(), SendDate: fp.selectedDates[0] }
            var tekst = $('#txtDebug').val();
            tekst = 'send:' + JSON.stringify(sendMsg) + '\n' + tekst;
            $('#txtDebug').val(tekst)
        }


        function filterClients(p_filter) {
            //set show/hide
            console.info(new Date(), p_filter);
            var array = document.querySelectorAll('#cblClients li')
            for(var i = 0; i< array.length; i++) {
				array[i].style.display = 'none';
			}
            array = Array.prototype.filter.call(document.querySelectorAll('#cblClients li'), 
				function (obj) {
					return obj.childNodes[0].childNodes[1].innerHTML.toLowerCase().indexOf(p_filter) > -1;
                });
            for(var i = 0; i< array.length; i++) {
				array[i].style.display = 'block';
			}
        }
        function getSelected() {
            return $('#cblClients input:checked').length;
        }

        function checkClient(id) {
            document.getElementById('lblStranke').innerHTML = 'Stranke ' + getSelected() + '/' + myClients.length + ':';
        }
         

        $(document).ready(function () {
            var globalTimeout = null; 
            $('#txtClientSearch').keyup(function () {
                delay(this).enqueue(800, function () {
                    filterClients($('#txtClientSearch').val());
                });

                
            }); 
            //count message characters
            document.getElementById('txtMessage').onkeyup = function () {
                document.getElementById('lblMessage').innerHTML = "Sporočilo (" + (640 - this.value.length)+"/640):";
            };

            // load locale and Get flatpicker localized instance
            loadScript("/plugins/dayjs/locale/" + navigator.language.slice(0, 2) + ".js")
                .then(function () {
                    dayjs.locale(navigator.language.slice(0, 2));
                    loadScript("/plugins/flatpickr/l10n/" + navigator.language.slice(0, 2) + ".js")
                        .then(function () {
                            fp = $(".flatpickr").flatpickr({
                                altInput: true,
                                defaultDate: new Date(),
                                minDate: new Date(),
                                locale: dayjs.locale(),
                                plugins: [new confirmDatePlugin({ showAlways: true })],
                                enableTime: true, minTime: "8:00", maxTime: "20:00",
                                dateFormat: "llll",
                                clickOpens: true, allowInput: false, wrap: true,
                                //allowInvalidPreload: true,
                                altFormat: dayjs.localeData().longDateFormat('llll'),
                                //ariaDateFormat: dayjs.localeData().longDateFormat('llll'),
                                dateFormat: dayjs.localeData().longDateFormat('llll'),
                                parseDate: (datestr, format) => {
                                    var fmt = format;
                                    if (fmt == 'Y-m-d\\TH:i:S') { fmt = 'YYYY-MM-DD\\THH:mm'; }
                                    if (fmt == 'H:i:S') { fmt = 'HH:mm'; }
                                    var tekst = $('#txtDebug').val();
                                    tekst = 'parseDate(' + datestr + ',' + fmt + ') return:' + formatDate(dayjs(datestr, fmt).toDate()) + '\n' + tekst;
                                    $('#txtDebug').val(tekst)
                                    return dayjs(datestr, fmt).toDate();
                                },
                                formatDate: (date, format, locale) => {
                                    if (format != 'F j, Y') {
                                        var tekst = $('#txtDebug').val();
                                        tekst = 'formatDate:' + formatDate(date) + '-' + format + '-' + locale.weekdays.longhand[0] + '\n' + tekst;
                                        $('#txtDebug').val(tekst)
                                        return dayjs(date).format(format);
                                    }
                                }
                            });
                        });
                });


            //bind cboLocations
            $("#cboLocations").off('change').change(function (evt) {
                Cookies.set('DefaultLocation', $(this).val());
                setClientForm(0);
                GetClients();
            });

            //init toastr
            toastr.options.preventDuplicates = true;
            toastr.options.timeOut = 1000;

           
            //create checkboxlist
            var myUL = document.createElement("ul");
            myUL.style = "padding-left: 0px; list-style-type: none; max-height: 200px; overflow-y: scroll;";
                myClients.forEach(function (item) {
                    var myLI = document.createElement("li");
                    myLI.id = item.Id;
                    var myLIspan = document.createElement("span");
                    myLIspan.innerHTML = item.FullName;

                    var myLIDiv = document.createElement("div");
                    myLIDiv.addEventListener('click', function () { checkClient(this.id);});

                    myLIDiv.className = "form-control custom-control custom-checkbox";
                    myLIDiv.style = "padding-left: 2rem;";
                        var myLIDivInput = document.createElement("input");
                    myLIDivInput.className  = "custom-control-input";
                    myLIDivInput.type = "checkbox";
                    myLIDivInput.id = "customCheckbox"+item.Id;
                    
                    var myLIDivLabel = document.createElement("label");
                    myLIDivLabel.setAttribute("for" , "customCheckbox" + item.Id);
                    myLIDivLabel.className ="custom-control-label";
                    myLIDivLabel.innerHTML = item.FullName;
                    $(myLIDiv).append(myLIDivInput)
                    $(myLIDiv).append(myLIDivLabel)

                    
                    $(myLI).append(myLIDiv)


                    //$(myLI).append(myLIspan)
                    $(myUL).append(myLI)
                });
                $('#cblClients').append(myUL);


            $("#clientsearch").autocomplete({
                minlength: 3,
                delay: 200,
                source: myClients,
                select: function (event, ui) {
                    hideKeyboard();
                    $("#clientsearch").val(ui.item.label);
                    SelectedClientID = ui.item.value;
                    setClientForm(SelectedClientID);
                    $("#clientsearch").blur();
                    return false;
                },
                focus: function (event, ui) { event.preventDefault(); return false; }
            });

            

            initTags();
            });





         function GetClients() {

            //fill client search
            $.ajax({
                type: "GET",
                url:  apiURL + "/api/clients/getclientslist/"+$("#cboLocations").val(),
                contentType: "application/json; charset=utf-8",
                headers: { 'Authorization': 'Bearer '+apiToken.AccessToken },
                dataType: "json",
                async: true,
                success: function (msg) {
                    myClients = msg;
                    $( "#clientsearch" ).autocomplete({
                        minlength:3,
                        delay:200,
                        source: myClients,
                        select: function (event, ui) {
                            $("#clientsearch").val(ui.item.label);
                            SelectedClientID = ui.item.value;
                            setClientForm(SelectedClientID);
                            return false;
                        },
                        focus:function (event, ui) {event.preventDefault(); return false;}
                    });
                },
                error: function () {
                    toastr.error('Error filling clients')
                }
            });

        }

        function cmdClientAdd_Click() {
            setClientForm(0);
            $('#cmdClientDelete').addClass('invisible')
            $("#cmdClientSave").off('click').click(function (evt) {
                if (SaveClient(0) != false) {

                }
            });


        }

        function setClientForm(p_ID) {
            if (p_ID == 0) {
                //clear form
                $("#txtClientFirstName").val('');
                $("#txtClientLastName").val('');
                $("#txtClientMobile").val('');
                $("#txtClientEmail").val('');
                $("#cbClientSMS").prop('checked', true);
                $("#cbClientEmail").prop('checked', true);
                fp.clear(); //$("#txtClientBirthday").val('');
                $("#txtClientAddress").val('');
                $("#txtClientZip").val('');
                $("#txtClientNotes").val('');

            }
            else {
                //fill form
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/client/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer '+apiToken.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtClientFirstName").val(result.firstName);
                        $("#txtClientLastName").val(result.lastName);
                        $("#txtClientMobile").val(result.mobile);
                        $("#txtClientEmail").val(result.email);
                        $("#cbClientSMS").prop('checked', result.allowsSMS);
                        $("#cbClientEmail").prop('checked', result.allowsEmail);
                        fp.clear();
                        if (result.birthday != null) {
                            fp.setDate(new Date(result.birthday));
                        }
                        $("#txtClientAddress").val(result.address);
                        $("#txtClientZip").val(result.zip);
                        $("#txtClientNotes").val(result.notes);
                        $("#txtTags").val(result.tags.map(a => a.id)).trigger('change');
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error getting client data:" + error);
                    }
                });
            }

        }

        function showClientDetail(p_ID) {
            setClientForm(p_ID);
            $('#cmdClientDelete').removeClass('invisible');
            $("#cmdClientSave").off('click').click(function (evt) {
                if (SaveClient(p_ID) != false) {  }
            });
            $("#cmdClientDelete").off('click').click(function (evt) {
                if (DeleteClient(p_ID) != false) { }
            });

        }

        function DeleteClient(p_ID) {
            Swal.fire({
                title: 'Zbrišem stranko?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "DELETE",
                        url: apiURL + "/api/client/" + p_ID,
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + apiToken.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") { toastr.success("Stranka zbrisana"); GetClients(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });

                } else { return false; }
            });
        }

        function SaveClient(p_ID) {
            if ($('#dataform').valid()) {
                var client={};
                client.id = p_ID;
                client.LocationId = parseInt($("#cboLocations").val());
                client.FirstName = $('#txtClientFirstName').val();
                client.LastName =$("#txtClientLastName").val();
                client.Mobile =$("#txtClientMobile").val();
                client.Email =$("#txtClientEmail").val();
                client.AllowsSMS = $("#cbClientSMS").prop('checked');
                client.AllowsEmail = $("#cbClientEmail").prop('checked');
                if (dayjs.utc($("#txtClientBirthday").val(),"l").isValid())
                { client.Birthday = dayjs.utc($("#txtClientBirthday").val(),"l");}
                client.Address =$("#txtClientAddress").val();
                client.Zip =$("#txtClientZip").val();
                client.Notes = $("#txtClientNotes").val();

                var myTags = [];
                $('#txtTags').select2('data').forEach(function (item) {
                    var clientTag = {};
                    clientTag.clientId = p_ID;
                    clientTag.tagId = item.id;
                    var tag = { id:0, Title: 'Title'};

                    if (item.added == true)
                    { tag.id == 0; tag.Title = item.text; }
                    else
                    { tag.id == item.id }
                    clientTag.Tag=tag;

                    myTags.push(clientTag);
                });

                client.ClientTags = myTags;

                client.Active = true;
                $.ajax({
                    type: "post",
                    data: JSON.stringify(client),
                    url: apiURL+"/api/client/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer '+apiToken.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranjeno"); GetClients(); return true; }
                        else { toastr.error("Napaka:"+result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            } else { return false; }
        }

        //#region tags
        var lastResults = [];


        function initTags() {

            //get tags
            var myTags= [];

            $.ajax({
                    type: "get",
                    url: apiURL+"/api/tags/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer '+apiToken.AccessToken },
                    dataType: "json",
                    async: false,
                    success: function (result) {
                        var retval = [];
                        result.forEach(function(item) {
                            retval.push({ id: item.id, text: item.title })
                            });
                        myTags= retval;
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error getting data:" + error);
                    }
                });

            $("#txtTags").select2({
                multiple: true,
                tags: true,
                placeholder: "",
                tokenSeparators: [","],

                data: myTags,

                createTag: function (params) {
                    var term = $.trim(params.term);
                    if (term === '') { return null; }
                    //var text = term + (lastResults.some(function (r) { return r.text == term }) ? "" : " (nova oznaka)");
                    return {
                        id: lastResults.length,
                        text: term, added: true, tagId: 0
                    };
                },
                insertTag: function (data, tag) {
                    // Insert the tag at the end of the results
                    data.push(tag);
                  }
            });


            $('#txtTags').on("select2:select", function (e) {
                var data = e.params.data;
                if (data.added) {
                    Swal.fire({
                        title: "Želite dodati novo oznako " + data.text.split('(')[0] + "?",
                        showDenyButton: true,
                        confirmButtonText: 'Da',
                        denyButtonText: 'Ne',
                    }).then((result) => {
                        if (result.isDenied) {
                            var selectedTags = $("#txtTags").val();
                            var index = selectedTags.indexOf(data.id);
                            selectedTags.splice(index, 1);
                            if (selectedTags.length == 0) {
                                $("#txtTags").val("").trigger("change");
                            } else {
                                $("#txtTags").val(selectedTags).trigger("change");
                            }
                        }
                    });
                }
            });

        }


        //#endregion
    </script>
}

