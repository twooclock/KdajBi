@using Newtonsoft.Json;
@using KdajBi.Web;
@using KdajBi.Web.ViewModels;
@using System.Globalization;
@model vmAppointments
@{
    ViewData["Title"] = "Naročila";
}

@section styles{
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900">
    <link href="~/plugins/bootstrap-tokenfield/css/tokenfield-typeahead.min.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-tokenfield/css/bootstrap-tokenfield.min.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/plugins/jquery-ui/jquery-ui.min.css" rel="stylesheet" />
    <link href="~/plugins/flatpickr/flatpickr.min.css" rel="stylesheet" />
    <link href="~/plugins/flatpickr/plugins/confirmDate/confirmDate.css" rel="stylesheet" />
    <link href='~/lib/fullcalendar-scheduler-5.10.1/lib/main.min.css' rel='stylesheet' />

    <style>
@{ string val = "";
    if (Model.Settings.TryGetValue("AppointmentsRowHeight", out val) == true)
    {
        if (String.IsNullOrEmpty(val) == false)
        {
            @Html.Raw(".fc .fc-timegrid-slot {");
            @Html.Raw("height:"+val);
            @Html.Raw("border-bottom: 0}");
        }
    }
}

        .fc-fullscreen-button:before {
            font-family: "Font Awesome 5 Free";
            content: "\f065";
            display: inline-block;
            padding-right: 3px;
            font-weight: 900;
        } .fc-datepicker-button:before {
            font-family: "Font Awesome 5 Free";
            content: "\f073";
            display: inline-block;
            padding-right: 3px;
            font-weight: 900;
        } .fc-linkcreator-button:before {
            font-family: "Font Awesome 5 Free";
            content: "\f0c1";
            display: inline-block;
            padding-right: 3px;
            font-weight: 900;
        } body {
            margin: 0;
            padding: 0;
            font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
            font-size: 14px;
        } #calendar {
            max-width: 1100px;
        } ::backdrop {
            background-color: white;
        } :fullscreen {
            overflow-y: scroll;
        } :-ms-fullscreen {
            overflow-y: scroll;
        } :-webkit-full-screen {
            overflow-y: scroll;
        } :-moz-full-screen {
            overflow-y: scroll;
        } div.token {
            font-size: 13px;
        }
        /*sticky header
        .fc-toolbar.fc-header-toolbar {
            position: sticky;
            top: 250px;
            z-index: 10;
        }*/
        .fc-head-container.fc-widget-header {
            position: sticky;
            top: 308px;
            z-index: 10;
            background: red;
        }
        /*.fc-timeline .fc-body .fc-scroller {
            height: 400px !important;
        }*/
        .fc .fc-toolbar.fc-header-toolbar {
            margin-bottom: 1.5em;
            position: sticky;
            background: #ffffff;
            z-index: 100;
            top: 47px;
        } .fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky > * {
            top: 82px;
        } .fc-header-toolbar {
            padding: 0px !important;
        } .content-wrapper {
            background: white;
        }
        .movefor3cals {
            padding-left:23em;
        }
        @@media
        (max-width: 576px) {
            .movefor3cals
            {
                padding-left: 0;
            }
        }
    </style>
}

<!-- page content -->

@{
    string val = "";
    bool Show3Calendars = false;
    if (Model.Settings.TryGetValue("AppointmentsShow3Calendars", out val) == true)
    {
        Show3Calendars = (bool.Parse(val) == true);
        if (bool.Parse(val) == true)
        { <text>
                <div id="fs" class="right_col row" role="main">
                    <div id="3calendars" class="col-3 d-none d-md-block" style="top: 3em; position: fixed; z-index: 10;">
                        <div class="form-group">
                            <input type="text" class="form-control" id="datepick1" style="display: none">
                            <input type="text" class="form-control" id="datepick2" style="display: none">
                            <input type="text" class="form-control" id="datepick3" style="display: none">
                        </div>
                    </div>
                    <div id="fs" class="col movefor3cals">
        </text>}
    else
    { <text>
            <div class="right_col" role="main">
                <div id="fs">
    </text>}

}

}

<div id='calendar'></div>
<!-- Workplace modal content-->
<div id="myModal" class="modal fade" data-keyboard="true" tabindex='-1' role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Naročilo</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body ui-front">
                <form id="formEvent" class="formEvent" name="formEvent">
                    <div class="form-row">
                        <div class="form-group col-9">
                            <label for="txtClientsearch">
                                Stranka:
                            </label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text" onclick="$('#txtClientsearch').select();$('#txtClientsearch').autocomplete('search')">
                                        <span class="fas fa-user"></span>
                                    </div>
                                </div>
                                <input id="txtClientsearch" type="text" class="form-control" placeholder="Stranka..." onclick="$('#txtClientsearch').select(); $('#txtClientsearch').autocomplete('search')">
                            </div>
                        </div>

                        <div class="form-group col-3">
                            <label for="txtClientMobile">
                                Mobi:
                            </label>
                            <input type="tel" id="txtClientMobile" name="txtClientMobile" class="form-control" oninput="CheckMobileNumber(this);" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="txtNotes">
                            Naročilo:
                        </label>
                        <input type="text" id="txtNotes" name="txtNotes" class="form-control ">
                    </div>
                    <div id="rowMinDuration" class="form-group">
                        <label for="txtMinDuration">
                            Trajanje (min):
                        </label>
                        <input type="number" min="1" id="txtMinDuration" name="txtMinDuration" class="form-control ">
                    </div>
                    <div id="rowDT" class="form-row">
                        <div class="form-group pr-2 col-9 ">
                            <label for="txtStartTime">
                                Datum ura:
                            </label>
                            <div id="dpstart" class="input-group flatpickr p-0">
                                <input type="text" id="txtStartTime" name="txtStartTime" class="form-control" aria-describedby="basic-addonY" data-input />
                                <div class="input-group-append">
                                    <div class="input-group-text" id="basic-addonY" data-toggle onclick="">
                                        <i class="fas fa-calendar"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-3 ">
                            <label for="txtEndTime">
                                Do (ura):
                            </label>
                            <input type="text" id="txtEndTime" class="form-control flatpickr flatpickr-input" data-id="timePicker24" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="cboGooCal">
                            Delovno mesto/zaposleni:
                        </label>
                        <select id="cboGooCal" name="cboGooCal" class="selectpicker custom-select custom-select-sm form-control">
                            @foreach (var item in Model.GoogleCalendars)
                            {
                                <option value="@item.Item1" data-workplaceid="@Html.Raw(item.Item3)">@Html.Raw(item.Item2)</option>
                            }
                        </select>
                    </div>


                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdMove">
                    Premakni
                </button>
                <button type="button" class="btn btn-default" id="cmdSendLink">
                    Pošlji
                </button>
                <button type="button" class="btn btn-default" id="cmdDelete">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdSave">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->
<!-- DatePick modal content-->
<div id="myDatePickModal" class="modal fade" data-keyboard="true" tabindex='-1' role="dialog">
    <div class="modal-dialog modal-dialog-centered" style="max-width: fit-content;">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">skoči na datum</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body ui-front">
                <form>
                    <div class="form-group">
                        <input type="text" class="form-control" id="datepick" style="visibility: hidden" aria-describedby="emailHelp">
                    </div>
                </form>
            </div>
            <div class="modal-footer">

            </div>
        </div>
    </div>
</div>
<!-- /modal content-->





</div>
</div>
<!-- /page content -->



@section scripts{
    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>
    <script src="~/plugins/bootstrap-select/js/bootstrap-select.min.js"></script>
    <script src="~/plugins/jquery-ui/jquery-ui.min.js"></script>
    <!-- cookies needed for changing location -->
    <script src="~/plugins/js-cookie/js.cookie.min.js"></script>
    <script src="~/plugins/bootstrap-tokenfield/bootstrap-tokenfield.min.js"></script>


    <script src="~/plugins/flatpickr/flatpickr.min.js"></script>
    <script src="~/plugins/flatpickr/plugins/confirmDate/confirmDate.js"></script>
    <script src="~/plugins/dayjs/dayjs.min.js"></script>
    <script src="~/plugins/dayjs/plugin/utc.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_utc)</script>
    <script src="~/plugins/dayjs/plugin/localizedFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localizedFormat);</script>
    <script src="~/plugins/dayjs/plugin/localeData.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localeData)</script>
    <script src="~/plugins/dayjs/plugin/customParseFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_customParseFormat)</script>

    <script src='~/lib/fullcalendar-scheduler-5.10.1/lib/main.js'></script>
    <script src='~/lib/fullcalendar-scheduler-5.10.1/lib/rrule.min.js'></script>
    <script src='~/lib/fullcalendar-scheduler-5.10.1/lib/main.global.min.js'></script>

    <script src="~/plugins/AlloyFinger/alloy_finger.js"></script>

    <script type="text/javascript">
        @await Html.PartialAsync("_ApiAccess")
        @await Html.PartialAsync("_GooApiAccess")

        function CheckMobileNumber(el) {
            var mobi = $(el).val();
            mobi = mobi.replace(/[^\d\+]/g, '');
            $(el).val(mobi);
        }

        function hideKeyboard() {
            //this set timeout needed for case when hideKeyborad
            //is called inside of 'onfocus' event handler
            setTimeout(function () {

                //creating temp field
                var field = document.createElement('input');
                field.setAttribute('type', 'text');
                //hiding temp field from peoples eyes
                //-webkit-user-modify is nessesary for Android 4.x
                field.setAttribute('style', 'position:absolute; top: 0px; opacity: 0; -webkit-user-modify: read-write-plaintext-only; left:0px;');
                document.body.appendChild(field);

                //adding onfocus event handler for out temp field
                field.onfocus = function () {
                    //this timeout of 200ms is nessasary for Android 2.3.x
                    setTimeout(function () {

                        field.setAttribute('style', 'display:none;');
                        setTimeout(function () {
                            document.body.removeChild(field);
                            document.body.focus();
                        }, 14);

                    }, 200);
                };
                //focusing it
                field.focus();

            }, 50);
        }

        function loadScript(src) {
            return new Promise(function (resolve, reject) {
                const s = document.createElement('script');
                let r = false;
                s.type = 'text/javascript';
                s.src = src;
                s.async = true;
                s.onerror = function (err) {
                    reject(err, s);
                };
                s.onload = s.onreadystatechange = function () {
                    // console.log(this.readyState); // uncomment this line to see which ready states are called.
                    if (!r && (!this.readyState || this.readyState == 'complete')) {
                        r = true;
                        resolve();
                    }
                };
                const t = document.getElementsByTagName('script')[0];
                t.parentElement.insertBefore(s, t);
            });
        }


        var calendar;
        var eventToMove = null;
        var fp; var dp; var tp;
        var SelectedClientID = 0;
        var myClients = JSON.parse('@Html.Raw(Model.ClientsJson)');


        //#region events
        @Html.Raw("var eventsMonths = []; eventsMonths.push(dayjs(Date()).format(\"YYYYMM\"));")
        async function FetchRenderEvents(p_calendar, p_date) {
            return new Promise(function (resolve, reject) {
                console.info("FetchRenderEvents:", p_date);
                if (isInArray(eventsMonths, dayjs(p_date).format("YYYYMM")) == false) {
                    console.info("asking for events for ", dayjs(p_date).format("YYYY-MM"));
                    var firstDayOfMonth = dayjs.utc().year(p_date.getFullYear()).month(p_date.getMonth()).startOf('month').local(); //  new Date(p_date.getFullYear(), p_date.getMonth(), 1);
                    var lastDayOfMonth = dayjs.utc().year(p_date.getFullYear()).month(p_date.getMonth()).endOf('month').local()//new Date(p_date.getFullYear(), p_date.getMonth() + 1, 0);

                    refreshGAPIToken().then(async () => {
                        p_calendar.getResources().forEach(async function (aResource) {
                            //for each goo calendar
                            console.log(aResource.extendedProps.gid)
                            await getEventsForResource(aResource,firstDayOfMonth,lastDayOfMonth,"").catch(e => { console.log(e); eventsMonths = eventsMonths.filter(function(item) { return item !== dayjs(p_date).format("YYYYMM")})});
                        });

                        eventsMonths.push(dayjs(p_date).format("YYYYMM"));
                        resolve(true);
                    });
                }
                else { resolve(true); }
            });

        }
        async function getEventsForResource(aResource,firstDayOfMonth,lastDayOfMonth,pageToken) {
            return new Promise(function (resolve, reject) {
                if (typeof pageToken === "undefined") { console.log('no next page'); reject(); return; }
                let calId = getResourceIdByGid(aResource.extendedProps.gid);
                console.info("first:" + firstDayOfMonth.toString(),firstDayOfMonth.toISOString());
                console.info("last:" + lastDayOfMonth.toString(),lastDayOfMonth.toISOString());
                gapi.client.calendar.events.list({
                    "calendarId": aResource.extendedProps.gid,
                    "timeMin": firstDayOfMonth.toISOString(),
                    "timeMax": lastDayOfMonth.toISOString(),
                    "showDeleted": false,
                    "singleEvents": true,
                    "pageToken": pageToken
                }).execute(function (response) {
                    if (response.error || response == false) {
                        toastr.error("Napaka pri komunikaciji z Googlom!");
                        reject(response.error); return;
                    }
                    else {
                        getEventsForResource(aResource,firstDayOfMonth,lastDayOfMonth,response.nextPageToken).catch(e => { console.log(e); });
                        //var myEvents=[];
                        calendar.batchRendering(function() {
                            response.items.forEach(function (item) {
                                calendar.addEvent({
                                    id: item.id,
                                    title: item.summary,
                                    start: item.start.dateTime,
                                    end: item.end.dateTime,
                                    display: null,
                                    eventColor:aResource.eventBackgroundColor,
                                    resourceId: calId,
                                    extendedProps: ((typeof item.extendedProperties === "undefined") ? {} : item.extendedProperties.shared)
                                });
                            });
                          });

                        //put on calendar


                    }
                });
            });
        }


        //#endregion

    //#region background events
        @Html.Raw("var resourceswd=" + Newtonsoft.Json.JsonConvert.SerializeObject(Model.resourcesWD));
        @Html.Raw("var exMonths = [];")

         @{
             bool nakaziUrnike = false;
             if (Model.Settings.TryGetValue("cbAppointments_ShowTimetables", out val) == true)
             {
                 nakaziUrnike =bool.Parse(val);
             }

            }

        function isInArray(array, value) {
            return (array.find(item => { return item == value }) || []).length > 0;
        }
        function getEventStart(p_rruleString) {
            //parse start time from rrule
            //rrule example: DTSTART:20210101T070000\nRRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO
            var retval = p_rruleString.split(':')[1];
            retval = retval.split('\n')[0];
            retval = retval.split('T')[1];
            return "T" + retval;

        }
        function RenderBackgroundEvents(p_calendar) {
            console.info("RenderBackgroundEvents");

            p_calendar.getResources().forEach(function (aResource) {
                resourceswd.forEach(function (rwd) {
                    if (rwd.resourceId == aResource.id) {
                        rwd.WeekDays.forEach(function (arrayItem, idx) {
                            var reswd = rwd.WeekDays[idx];
                            if (arrayItem.changed == true) {
                                //remove events by Id
                                aResource.getEvents().forEach(function (rEvent) {
                                    if (rEvent.id == idx.toString() && rEvent.display=="background") { rEvent.remove(); }
                                });

                                //re-set background events (rrule events for a given weekday with exceptions set)
                                for (var k = 0; k < reswd.calEvents.length; k++) {
                                    var caleventbase = reswd.calEvents[k];
                                    var oldrrule = caleventbase.rrule;
                                    var eventstart = getEventStart(oldrrule);
                                    for (var j = 0; j < reswd.exDates.length; j++) {
                                        caleventbase.rrule = caleventbase.rrule + "\nEXDATE:" + dayjs(reswd.exDates[j]).format('YYYYMMDD') + eventstart;
                                    }
                                    console.info("add:", caleventbase.rrule.replace(/(\r\n|\n|\r)/gm, " "));
                                    p_calendar.addEvent(reswd.calEvents[k]);
                                    caleventbase.rrule = oldrrule;
                                }

                                arrayItem.changed = false;
                            }
                        });
                    }
                });


            });
        }

        async function FetchRenderExceptions(p_calendar, p_date) {
            return new Promise(function (resolve, reject) {
                console.info("FetchRenderExceptions:", p_date);
                if (isInArray(exMonths, dayjs(p_date).format("YYYYMM")) == false) {
                    console.info("asking for exceptions for ", dayjs(p_date).format("YYYY-MM"));
                    getAPIToken().then((result) => {
                        $.ajax({
                            type: "post",
                            data: "",
                            url: apiURL + "/api/GetLocationScheduleExceptions/@Html.Raw(Model.Location.Id)/" + dayjs(p_date).format("YYYYMMDD"),
                            contentType: "application/json; charset=utf-8",
                            headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                            dataType: "json",
                            success: function (result) {
                                result.forEach(function (aWorkplaces) {
                                    aWorkplaces.exceptions.forEach(function (aException) {
                                        //add to exDates
                                        var dantedna = new Date(aException.date).getDay();

                                        resourceswd.forEach(function (rwd) {
                                            if (rwd.resourceId == aWorkplaces.id) {
                                                rwd.WeekDays[dantedna].exDates.push(dayjs(aException.date).format("YYYYMMDD"));
                                                rwd.WeekDays[dantedna].changed = true;
                                                JSON.parse(aException.eventsJson).forEach(function (eventItem) {
                                                    eventItem.resourceId = aWorkplaces.id;
                                                    eventItem.display = "background";
                                                    p_calendar.addEvent(eventItem);
                                                });
                                            }
                                        });


                                    });
                                });
                                RenderBackgroundEvents(p_calendar);

                                exMonths.push(dayjs(p_date).format("YYYYMM"));
                                resolve(true);
                            },
                            error: function (xhr, status, error) {
                                toastr.error("Napaka:" + error.toString());
                                reject(false);
                            }
                        });
                    });

                }
                else { resolve(true); }
            });

        }


    //#endregion




        function getResourceIdByGid(p_gid) {
            var res = calendar.getResources();
            for (var i = 0; i < res.length; i++) {
                if (res[i].extendedProps.gid == p_gid) { return res[i].id; }
            }

        }


        async function SaveDragedEvent(info) {
            return new Promise(function (resolve, reject) {
                var res = info.event.getResources();
                var calid = res[0].extendedProps.gid;
                var eid = info.event.id;
                var eventPatch = {
                    start: { 'dateTime': info.event.start },
                    end: { 'dateTime': info.event.end }
                };
                refreshGAPIToken().then(() => {
                    if (info.newResource != null) {
                        //move event first
                        calid = info.newResource.extendedProps.gid;
                        var eventToUpdate = gapi.client.calendar.events.move({
                            "calendarId": info.oldResource.extendedProps.gid,
                            "eventId": info.event.id,
                            "destination": info.newResource.extendedProps.gid
                        }).execute(function (response) {
                            if (response.error || response == false) {
                                toastr.error("Napaka:gapi.client.calendar.events.move");
                                reject(info); return;
                            }
                            else {
                                console.log("Moved event: %s", info.event.id);

                                if (info.delta.milliseconds != 0 || info.delta.days != 0 || info.delta.months != 0 || info.delta.years != 0) {
                                    //update event if changed
                                    eid = info.event.id;
                                    eventPatch.extendedProperties = response.extendedProperties;
                                    var eventToUpdate = gapi.client.calendar.events.patch({
                                        "calendarId": calid,
                                        "eventId": eid,
                                        "resource": eventPatch
                                    }).execute(function (response) {
                                        if (response.error || response == false) {
                                            toastr.error("Napaka:gapi.client.calendar.events.patch");
                                            reject(info); return;
                                        }
                                        else {
                                            console.log("Updated event after move: %s", response.id);
                                            resolve(true);
                                        }
                                    });
                                }
                            }
                        });

                    } else {
                        if (info.delta.milliseconds != 0 || info.delta.days != 0 || info.delta.months != 0 || info.delta.years != 0) {
                            //update event
                            var eventToUpdate = gapi.client.calendar.events.patch({
                                "calendarId": calid,
                                "eventId": eid,
                                "resource": eventPatch
                            }).execute(function (response) {
                                if (response.error || response == false) {
                                    toastr.error("Napaka:gapi.client.calendar.events.patch");
                                    reject(info); return;
                                }
                                else {
                                    console.log("Updated event: %s", response.id);
                                    resolve(true);
                                }
                            });
                        }
                    }
                });
            });
        }

        async function SaveResizedEvent(info) {
            return new Promise(function (resolve, reject) {
                var res = info.event.getResources();
                var calid = res[0].extendedProps.gid;
                var eid = info.event.id;
                var eventPatch = {
                    start: { 'dateTime': info.event.start },
                    end: { 'dateTime': info.event.end }
                };
                refreshGAPIToken().then(() => {
                    var eventToUpdate = gapi.client.calendar.events.patch({
                        "calendarId": calid,
                        "eventId": eid,
                        "resource": eventPatch
                    }).execute(function (response) {
                        if (response.error || response == false) {
                            toastr.error("Napaka:gapi.client.calendar.events.patch");
                            reject(info); return;
                        }
                        else {
                            console.log("Updated resized event: %s", response.id);
                            resolve(true);
                        }
                    });
                });
            });
        }

        var isFullScreen = false;
        function goFullScreen(p_ElementId) {

            var elem = document.getElementById(p_ElementId);

            if (elem.requestFullscreen) { elem.requestFullscreen(); }
            else if (elem.mozRequestFullScreen) { elem.mozRequestFullScreen(); }
            else if (elem.webkitRequestFullscreen) { elem.webkitRequestFullscreen(); }
            else if (elem.msRequestFullscreen) { elem.msRequestFullscreen(); }
            isFullScreen = true;
            $(".fc-toolbar.fc-header-toolbar").css('top', '0px');
            $(".fc-scrollgrid-section-header.fc-scrollgrid-section-sticky > *").css('top', '34px');
        }
        function exitFullScreen() {

            if (document.exitFullscreen) { document.exitFullscreen(); }
            else if (document.mozCancelFullScreen) { document.mozCancelFullScreen(); }
            else if (document.webkitExitFullscreen) { document.webkitExitFullscreen(); }
            else if (document.msExitFullscreen) { document.msExitFullscreen(); }
            isFullScreen = false;
            $(".fc-toolbar.fc-header-toolbar").css('top', '47px');
            $(".fc-scrollgrid-section-header.fc-scrollgrid-section-sticky > *").css('top', '82px');
        }
        function exitHandler() {
            if (!document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement) {
                exitFullScreen();
            }
        }

        $.validator.addMethod("time", function (value, element) {
            return /^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test(value);
        }, "Vnesite veljaven čas npr. 8:30 ali 17:45");

        $.validator.addMethod("greaterThan", function (value, element, param) {
            var cas = value.split(":");
            var endDate = new Date(fp.selectedDates[0]);
            if (cas[0] != undefined) {  endDate.setHours(cas[0]); }
            if (cas[1] != undefined) {  endDate.setMinutes(cas[1]); }
            return (endDate > fp.selectedDates[0]);
        }, "Konec mora biti večji od začetka.");

            function getScrollTime()
            {
                return "13:30:00";
            }

        async function loadLocale(lang) {
            return new Promise(function (resolve, reject) {
                console.info("loadLocale:", lang);

                if (lang != "en") {
                    loadScript("/lib/fullcalendar-scheduler-5.10.1/lib/locales/" + navigator.language.slice(0, 2) + ".js").then(resolve());
                } else { resolve(); }
            });
        }
        var resourceA=null;
        function loadCalendar() {
            var mySlot = localStorage.getItem("Slot");
            var myView = localStorage.getItem("View");
            var cancelSwipe = false;
            var calEvents=@Html.Raw(Model.calEvents);
            if (mySlot == null) { mySlot = "00:30"; }
            if (myView == null) { myView = "resourceTimeGridDay"; }
                loadLocale(navigator.language.slice(0, 2))
                    .then(function () {
                        var idate = new Date();
                        let searchParams = new URLSearchParams(window.location.search);
                        if (searchParams.has('date')) { idate = searchParams.get('date'); }
                        calendar = new FullCalendar.Calendar(document.getElementById('calendar'), {
                            locale: navigator.language.slice(0, 2),
                            firstDay:1,
                            eventDisplay: 'block',
                            themeSystem: 'bootstrap',
                            stickyFooterScrollbar: true,
                            stickyHeaderDates: true,
                            initialView: myView,
                            initialDate: idate,
                            allDaySlot: false,
                            slotMinTime: "@Html.Raw(Model.Location.Schedule.minTime())", //"7:00:00",
                            slotMaxTime: "@Html.Raw(Model.Location.Schedule.maxTime())", //"21:00:00",
                            slotDuration: mySlot,
                            slotLabelInterval: mySlot,
                            slotLabelFormat: function (date)
                            {
                                if (date.date.minute == 0)
                                    return date.date.hour.toString().padStart(2, '0') + ':00';

                                return date.date.minute;
                            },
                                                        //scrollTime: getScrollTime(), //"8:00:00",
                            height:'auto',
                            expandRows: true,
                            editable: true,
                            selectable: true,
                            dayMaxEvents: true, // allow "more" link when too many events
                            //dayMinWidth: 200,
                            headerToolbar: {
                                left: 'datepicker prev,next today',
                                center: 'title',
                                right: 'resourceTimeGridDay,resourceTimeGridTwoDay,timeGridWeek,dayGridMonth mnuResources,slotinterval,linkcreator,fullscreen'
                            },
                            customButtons: {
                                fullscreen: {
                                    click: function () {
                                        if (isFullScreen) { exitFullScreen(); } else { goFullScreen('fs'); }

                                    }
                                },
                                linkcreator: {
                                    click: function () {
                                        showSendLink();
                                    }
                                },
                                slotinterval: {
                                    text:  "",
                                    click: function (a) {
                                        if (mySlot == "00:30") { mySlot = "00:15"; this.innerText = "30'"; } else { mySlot = "00:30"; $(this).attr("title", "15'"); this.innerText="15'"; }
                                        localStorage.setItem("Slot", mySlot);
                                        calendar.setOption('slotDuration', mySlot);
                                        calendar.setOption('slotLabelInterval', mySlot)

                                    }
                                },
                                mnuResources: {
                                    text: "R",
                                    click: function () {
                                        console.log('remove resource...');
                                        if (resourceA == null) {
                                            resourceA = calendar.getResourceById('2');
                                            resourceA.remove();
                                        } else { calendar.addResource(resourceA); resourceA = null; calendar.render(); }

                                        calendar.refetchEvents();
                                    }
                                },
                                datepicker: {
                                    click: function () {
                                        $("#myDatePickModal").modal("show"); }
                                },
                            },

                            views: {
                                resourceTimeGridDay: {
                                    titleFormat: function (date) { return dayjs(date.start.marker).format("dddd, ll"); }
                                },
                                resourceTimeGridTwoDay: {
                                    type: 'resourceTimeGrid',
                                    duration: { days: 3 },
                                    buttonText: '3 dni',
                                }
                            },

                            resources: [
                            @foreach (var item in Model.Location.Workplaces)
                            {
                                FullCalendar.Resource myResource = new FullCalendar.Resource(@item.Id.ToString(), @item.Id.ToString(), @item.Name, item.GoogleCalendarColor);
                                myResource.extendedProps.Add("gid", item.GoogleCalendarID);
                                FullCalendar.businessHours myBH;
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.SundayStart.ToString("HH:mm"), Model.Location.Schedule.SundayEnd.ToString("HH:mm"), new int[] { 0 });
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.MondayStart.ToString("HH:mm"), Model.Location.Schedule.MondayEnd.ToString("HH:mm"), new int[] { 1 });
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.TuesdayStart.ToString("HH:mm"), Model.Location.Schedule.TuesdayEnd.ToString("HH:mm"), new int[] { 2 });
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.WednesdayStart.ToString("HH:mm"), Model.Location.Schedule.WednesdayEnd.ToString("HH:mm"), new int[] { 3 });
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.ThursdayStart.ToString("HH:mm"), Model.Location.Schedule.ThursdayEnd.ToString("HH:mm"), new int[] { 4 });
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.FridayStart.ToString("HH:mm"), Model.Location.Schedule.FridayEnd.ToString("HH:mm"), new int[] { 5 });
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.SaturdayStart.ToString("HH:mm"), Model.Location.Schedule.SaturdayEnd.ToString("HH:mm"), new int[] { 6 });
                                myResource.businessHours.Add(myBH);
                                @Html.Raw(myResource.ToJson() + ",")
                            }
                            ],
                            events:@Html.Raw(Model.calEvents),
                            //events: function (info, successCallback, failureCallback) {
                            //pazi, če delaš prek funkcije moraš spreminjat calevents tudi pri SaveMoveEvent!
                            //    if (resourceA == null) { successCallback(calEvents); return; }
                            //    else {
                            //        var novi = [];

                            //        calEvents.forEach(function (item) {
                            //            if (item.display == 'background') { novi.push(item); }
                            //            else {
                            //                if (item.resourceId!= '2') {novi.push(item);  } }
                            //        });
                            //        successCallback(novi);
                            //    }
                            //},
                            eventTimeFormat: {
                                hour: "2-digit",
                                minute: "2-digit",
                                hour12: false
                            },
                            eventClick: function (info) {
                                console.info("eventClick: info:", info);

                                showEvent(info);
                            },
                            eventDrop: function (info) {
                                console.info("eventDrop: info:", info);
                                cancelSwipe = true;
                                Swal.fire({
                                    title: 'Premaknem naročilo?', showDenyButton: true, confirmButtonText: 'Da', denyButtonText: 'Ne',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        SaveDragedEvent(info)
                                            .catch((result) => { result.revert(); toastr.error("Napaka! (pritisnite tipko F5)"); })
                                            .then(() => {
                                                if (typeof info.event?.extendedProps?.client != "undefined") {
                                                    var client = JSON.parse(info.event.extendedProps.client);
                                                    notifyClient(info.event.start, client.mobile, client.value);
                                                }
                                            });
                                    } else { info.revert(); }
                                });
                            },
                            eventResize: function (event, dayDelta, minuteDelta) {
                                //console.info("eventResize: ", event);
                                SaveResizedEvent(event)
                                    .catch((result) => { result.revert(); toastr.error("Napaka! (pritisnite tipko F5)"); })
                                    .then(() => {
                                        if (typeof event?.event?.extendedProps?.client != "undefined") {
                                            var client = JSON.parse(event.event.extendedProps.client);
                                            notifyClient(event?.event.start, client.mobile, client.value);
                                        }
                                    });
                            },
                            select: function (arg) {
                                if (typeof arg.resource === "undefined") {
                                    //switch view
                                    calendar.changeView("resourceTimeGridDay", arg.start);
                                } else {
                                    //show new Event modal
                                    newEvent(arg);
                                }
                            },
                            longPressDelay: 300,
                            datesSet: function (dateInfo) {
                                console.info("date changes to:", dateInfo.start);
                                console.info("view changes to:", dateInfo.view);
                                localStorage.setItem("View", dateInfo.view.type);
                                let dateE = dateInfo.end;
                                var datum =dayjs(dateInfo.start).add(1, 'month').toDate()
                                FetchRenderEvents(calendar, dateInfo.start)
                                    .then(result => { if (dateE.getMonth() > datum.getMonth()) { FetchRenderEvents(calendar, datum ) } })
                                    .then(result => { FetchRenderEvents(calendar, dateInfo.end) });

                                @if (nakaziUrnike == true)
                                {
                                <text>
                                FetchRenderExceptions(calendar, dateInfo.start)
                                    .then(result => { if (dateE.getMonth() > datum.getMonth()) { FetchRenderExceptions(calendar, datum ) } })
                                    .then(result => { FetchRenderExceptions(calendar, dateInfo.end) });
                                </text>
                                }

                                //show hollydays
                                var daysOfYear = [];
                                var de = dateInfo.end;
                                de.setDate(dateInfo.end.getDate() - 1)
                                for (var d = dateInfo.start; d <= de; d.setDate(d.getDate() + 1)) {
                                    daysOfYear.push(dayjs(new Date(d)).format("YYYY-MM-DD"));
                                }

                                let endPatterns = ['01-01','01-02','02-08','04-27','05-01','05-02','06-25','08-15','10-31','11-01','12-25','12-26'];
                                //add easter monday
                                endPatterns.push(getEasterMonday(dateInfo.start.getFullYear()));
                                let filtered = daysOfYear.filter(day => (
                                    endPatterns.some(pattern => day.endsWith(pattern))
                                ));
                                
                                filtered.forEach(function (item, index) {
                                    switch (dateInfo.view.type) {
                                        case 'resourceTimeGridDay':
                                            $("#calendar").find('.fc-toolbar > div > h2').addClass('text-danger'); //day
                                            break;
                                        case 'resourceTimeGridTwoDay':
                                        case 'timeGridWeek':
                                            $("#calendar").find('th[data-date="' + item + '"]').addClass('text-danger'); //3dni,week

                                            break;
                                        case 'dayGridMonth':
                                            $("#calendar").find('td[data-date="' + item + '"]').addClass('text-danger'); //month
                                            break;
                                        default:
                                    }
                                });
                                
                            }

                            

                            });
                        calendar.render();
                        //setTimeout(() => {
                            if (mySlot == "00:30") { $(".fc-slotinterval-button").text("15'"); } else { $(".fc-slotinterval-button").text("30'"); }
                        //}, 400);
                        //calendar.setOption("height", "1450px");

                        // gestures
                        var af = new AlloyFinger(document.getElementById('calendar'), {
                            swipe: function (evt) {
                                if (cancelSwipe == false) {
                                    switch (evt.direction) {
                                        case "Left": calendar.next();
                                            break;
                                        case "Right": calendar.prev();
                                            break;
                                    }
                                } else { cancelSwipe = false; }
                            }
                        });
                        var af = new AlloyFinger(document.getElementById('myDatePickModal'), {
                            swipe: function (evt) {
                                switch (evt.direction) {
                                    case "Left": dp.changeMonth(1);
                                        break;
                                    case "Right": dp.changeMonth(-1);
                                        break;
                                }
                            }
                        });
                    });
        }








            document.addEventListener('DOMContentLoaded', function() {
                // load locale and Get flatpicker localized instance
                console.info("loading dayjs,fp:", navigator.language.slice(0, 2));
                loadScript("/plugins/dayjs/locale/" + navigator.language.slice(0, 2) + ".js")
                    .then(async function () {
                        dayjs.locale(navigator.language.slice(0, 2));
                        await initializeGapi().then((result) => { loadCalendar(); }).catch((err) => { toastr.error("Napaka pri komunikaciji z Googlom!\nPoskusite se odjaviti in ponovno prijaviti."); });



                        loadScript("/plugins/flatpickr/l10n/" + navigator.language.slice(0, 2) + ".js")
                            .then(function () {
                                fp = $("#dpstart").flatpickr({
                                    altInput: true,
                                    wrap:true,
                                    //minDate: new Date(),
                                    locale: dayjs.locale(),
                                    plugins: [new confirmDatePlugin({ showAlways: true })],
                                    enableTime: true, //minTime: "8:00", maxTime: "20:00",
                                    dateFormat: "llll",
                                    clickOpens: true, allowInput: false, wrap: true,
                                    //allowInvalidPreload: true,
                                    altFormat: dayjs.localeData().longDateFormat('llll'),
                                    //ariaDateFormat: dayjs.localeData().longDateFormat('llll'),
                                    dateFormat: dayjs.localeData().longDateFormat('llll'),
                                    parseDate: (datestr, format) => {
                                        var fmt = format;
                                        if (fmt == 'Y-m-d\\TH:i:S') { fmt = 'YYYY-MM-DD\\THH:mm'; }
                                        if (fmt == 'H:i:S') { fmt = 'HH:mm'; }
                                        return dayjs(datestr, fmt).toDate();
                                    },
                                    formatDate: (date, format, locale) => {
                                        if (format != 'F j, Y') {
                                            return dayjs(date).format(format);
                                        }
                                    }
                                });

                                dp = $("#datepick").flatpickr({
                                    dateFormat: "d.m.Y",
                                    locale: dayjs.locale(),
                                    defaultDate: new Date(),
                                    time_24hr: true, inline: true,
                                    onChange: function(selectedDates, dateStr, instance) {
                                        console.log(selectedDates);
                                        calendar.gotoDate(selectedDates[0]);
                                        $("#myDatePickModal").modal("hide");
                                    }
                                });
                                @{
                                    if (Show3Calendars==true)
                                    {
                                    <text>
                                const datum1 = new Date();
                                const datum2 = (new Date()).setMonth(datum1.getMonth()+1);
                                const datum3 = (new Date()).setMonth(datum1.getMonth()+2);
                                dp1 = $("#datepick1").flatpickr({
                                    dateFormat: "d.m.Y",
                                    locale: dayjs.locale(),
                                    defaultDate: datum1,
                                    time_24hr: true, inline: true,
                                    onChange: function(selectedDates, dateStr, instance) {
                                        console.log(selectedDates);
                                        calendar.gotoDate(selectedDates[0]);
                                    }
                                });
                                dp2 = $("#datepick2").flatpickr({
                                    dateFormat: "d.m.Y",
                                    locale: dayjs.locale(),
                                    defaultDate: datum2,
                                    time_24hr: true, inline: true,
                                    onChange: function(selectedDates, dateStr, instance) {
                                        console.log(selectedDates);
                                        calendar.gotoDate(selectedDates[0]);
                                    }
                                });
                                dp3 = $("#datepick3").flatpickr({
                                    dateFormat: "d.m.Y",
                                    locale: dayjs.locale(),
                                    defaultDate: datum3,
                                    time_24hr: true, inline: true,
                                    onChange: function(selectedDates, dateStr, instance) {
                                        console.log(selectedDates);
                                        calendar.gotoDate(selectedDates[0]);
                                    }
                                });
                                    </text>
                                    }
                                 }

                                tp = $("#txtEndTime").flatpickr({
                                    allowInput: true,
                                    enableTime: true,
                                    noCalendar: true,
                                    dateFormat: "H:i",
                                    time_24hr: true,
                                    onOpen: [
                                        function (selectedDates, dateStr, instance) {
                                            instance.setDate($("#txtEndTime").val());
                                    }]
                                });
                            });
                    });





                //fill client search
                $("#txtClientsearch").autocomplete({
                    minlength: 3,
                    delay: 200,
                    source: myClients,
                    select: function (event, ui) {
                        hideKeyboard();
                        $("#txtClientsearch").val(ui.item.label);
                        $("#txtClientMobile").val(ui.item.mobile);
                        SelectedClientID = ui.item.value;
                        $("#txtClientsearch").blur();
                        event.preventDefault();
                        document.getElementById("txtNotes").click();
                        setTimeout(() => { document.getElementById("txtNotes-tokenfield").focus(); }, 400);
                        //$("#txtNotes-tokenfield").focus();
                        return false;
                    },
                    response: function (event, ui) {
                        if (ui.content.length === 0) {
                            SelectedClientID = 0;
                        }
                    },
                    focus: function (event, ui) { event.preventDefault(); return false; }
                });



                $('#formEvent').validate({
                    rules: {
                        txtEndTime: { time: true, greaterThan: "#txtStartTime" },
                    },
                    messages: {
                        txtClientFirstName: "Neveljavno ime!"
                    },
                    highlight: function (element) {
                        $(element).closest('.form-control').addClass('is-invalid');
                    },
                    unhighlight: function (element) {
                        $(element).closest('.form-control').removeClass('is-invalid');
                    },
                    errorElement: 'span',
                    errorClass: 'invalid-feedback',
                    errorPlacement: function (error, element) {
                        if (element.parent('.input-group').length) {
                            error.insertAfter(element.parent());
                        } else { error.insertAfter(element); }
                    }
                });

                $("#myModal").on('shown.bs.modal', function(){
                    $(this).find('#txtClientsearch').focus();
                });
                $('#myModal').on('hidden.bs.modal', function (e) {
                    CancelModal();
                });

                initServicesTags();

                $("#cboLocations").off('change').change(function (evt) {
                    Cookies.set('DefaultLocation', $(this).val());
                    window.location.reload(true);
                });

                //ad exitFullScreen handler (če user pressing Esc to exit fullscreen)
                if (document.addEventListener) {
                    document.addEventListener('webkitfullscreenchange', exitHandler, false);
                    document.addEventListener('mozfullscreenchange', exitHandler, false);
                    document.addEventListener('fullscreenchange', exitHandler, false);
                    document.addEventListener('MSFullscreenChange', exitHandler, false);
                }

                $("#cmdSendLink").click(function (evt) {
                    if (SendLink() != false) { $("#myModal").modal("hide"); }
                });
            });






            //#region Event modal


        function CancelModal() {
            $('#formEvent').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#formEvent input").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }





        function newEvent(arg) {
            PrepareModal('event');
            SelectedClientID = 0;
            //clear form
            $("#txtClientsearch").val('');
            $("#txtClientMobile").val('');
            $("#txtNotes").val('');
            $("#txtNotes").tokenfield('setTokens', ' ');

                fp.setDate(arg.start);
                var cHour = arg.end.getHours();
                var cMinuts = arg.end.getMinutes();
                var outStr = (cHour <= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts <= 9 ? ('0' + cMinuts) : cMinuts);
            $("#txtEndTime").val(outStr);
            $("#cboGooCal").selectpicker('val', arg.resource.extendedProps.gid);
            $('#cmdDelete').addClass('invisible');
            $("#myModal").modal("show");
            $("#cmdSave").off('click').click(function (evt) {
                if (SaveNewEvent() != false) { $("#myModal").modal("hide"); }
            });
            $("#txtClientsearch").focus();
            if (eventToMove !== null) {
                $("#cmdMove").text('Prilepi');
                $("#cmdMove").show();
                $("#cmdMove").off('click').click(function (evt) {
                    //move event here
                    console.log('move event here')
                    SaveMoveEvent();
                    $("#myModal").modal("hide");
            });
            } else {$("#cmdMove").hide(); }

        }

        function showEvent(info) {
            PrepareModal('event');
            SelectedClientID = 0;
            //show Event info
            if (typeof info.event?.extendedProps?.client === "undefined") {
                $("#txtClientsearch").val('');
                $("#txtClientMobile").val('');
            }
            else {
                var client = JSON.parse(info.event.extendedProps.client);
                $("#txtClientsearch").val(client.label);
                SelectedClientID = client.value;
                $("#txtClientMobile").val(client.mobile);
            }
            if (typeof info.event?.extendedProps?.notes === "undefined") {
                if (info.event?.title.length > 0) {
                    $("#txtNotes").val(info.event?.title);
                    $("#txtNotes").tokenfield('setTokens', info.event?.title);
                }
                else {
                    $("#txtNotes").val('');
                    $("#txtNotes").tokenfield('setTokens', ' ');
                }
            }
            else {
                try {
                    $("#txtNotes").tokenfield('setTokens', JSON.parse(info.event.extendedProps.notes));
                } catch (e) {
                    $("#txtNotes").tokenfield('setTokens', info.event.extendedProps.notes);
                }
            }

            fp.setDate(info.event.start);
            var cHour = info.event.end.getHours();
            var cMinuts = info.event.end.getMinutes();
            var outStr = (cHour <= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts <= 9 ? ('0' + cMinuts) : cMinuts);
            $("#txtEndTime").val(outStr);
            var res = info.event.getResources();
            $("#cboGooCal").selectpicker('val', res[0].extendedProps.gid);
            $('#cmdDelete').removeClass('invisible');
            $("#myModal").modal("show");
            $("#cmdSave").off('click').click(function (evt) {
                if (SaveEvent(info) != false) { $("#myModal").modal("hide"); }
            });
            $("#cmdDelete").off('click').click(function (evt) {
                if (DeleteEvent(info) != false) { $("#myModal").modal("hide"); }
            });

            $("#cmdMove").off('click').click(function (evt) {
                eventToMove = info;
                $("#myModal").modal("hide");
            });
            $("#cmdMove").text('Premakni');
            $("#cmdMove").show();
            hideKeyboard();
        }



        function DeleteEvent(info) {
            Swal.fire({
                title: 'Zbrišem naročilo?', showDenyButton: true, confirmButtonText: 'Da', denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    var res = info.event.getResources();
                    refreshGAPIToken().then(() => {
                        gapi.client.calendar.events.delete({
                            "calendarId": res[0].extendedProps.gid,
                            "eventId": info.event.id
                        }).execute(function (response) {
                            if (response.error || response == false) {
                                toastr.error("Napaka:gapi.client.calendar.events.delete");
                                return false;
                            }
                            else {
                                console.log("Deleted event: %s", info.event.id);
                                info.event.remove();
                                return true;
                            }

                        });
                    });
                } else { return false; }
            });
        }


        async function getClientID() {
                return new Promise(function (resolve, reject) {
                    if (SelectedClientID == 0) {
                        const name = $("#txtClientsearch").val().trim();
                        if (name.length > 0) {
                            var client = {};
                            client.id = 0;
                            client.LocationId = parseInt($("#cboLocations").val());

                            const i = name.indexOf(' ');
                            if (i > -1) {
                                client.FirstName = name.substring(0, i).trim();
                                client.LastName = name.substring(i + 1).trim();
                            }
                            else {
                                client.FirstName = name.substring(i + 1).trim();
                                client.LastName = "";
                            }

                            client.Mobile = $("#txtClientMobile").val().trim();
                            client.Email = "";
                            client.AllowsSMS = true;
                            client.AllowsEmail = true;
                            client.Birthday = new Date($("#txtClientBirthday").val());
                            client.Address = "";
                            client.Zip = "";
                            client.Notes = "";
                            client.Active = true;
                            client.Sex = "F";
                            getAPIToken().then((result) => {
                                $.ajax({
                                    type: "post",
                                    data: JSON.stringify(client),
                                    url: apiURL + "/api/client/",
                                    contentType: "application/json; charset=utf-8",
                                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                                    dataType: "json",
                                    success: function (retval) {
                                        if (retval.result == "OK") { toastr.info("Shranil novo stranko (" + retval.id.toString() + ")"); myClients.push( {id:retval.id, label:name,mobile:client.Mobile}); resolve(retval.id); }
                                        else { reject(retval.result); return false; }
                                    },
                                    error: function (xhr, status, error) {
                                        reject("Error saving client:" + error.toString());
                                        return false;
                                    }
                                });
                            });
                        }
                        else { resolve(SelectedClientID); }
                }
                else { resolve(SelectedClientID);}
            });
        }

        function SaveNewEvent() {
            if ($('#formEvent').valid()) {
                //save client
                getClientID().catch((result) => { toastr.info(result); }).then((resultClientID) => {
                    //create new event
                    var calid = $('#cboGooCal').val();
                    var cas = $("#txtEndTime").val().split(":");
                    var endDate = new Date(fp.selectedDates[0]);
                    if (cas[0] != undefined) { endDate.setHours(cas[0]); }
                    if (cas[1] != undefined) { endDate.setMinutes(cas[1]); }
                    var eventSummary = $("#txtClientsearch").val();
                    if ($("#txtClientMobile").val().length != 0) { eventSummary = eventSummary + "(" + $("#txtClientMobile").val() + ")" }
                    var selServices = getSelectedServicesNames();
                    if (selServices.length > 0) { eventSummary = eventSummary + "\n" + selServices.join(' '); }
                    var newEvent = {
                        start: { 'dateTime': new Date(fp.selectedDates[0]) },
                        end: { 'dateTime': endDate },
                        summary: eventSummary,
                        "extendedProperties": {
                            "shared": {
                                clientid:resultClientID,
                                client: JSON.stringify({ label: $("#txtClientsearch").val(), value: resultClientID, mobile: $("#txtClientMobile").val() }),
                                notes: JSON.stringify($('#txtNotes').tokenfield('getTokens'))
                            }
                        }
                    };

                    refreshGAPIToken().then(() => {
                        var eventToUpdate = gapi.client.calendar.events.insert({
                            "calendarId": calid,
                            "resource": newEvent
                        }).execute(function (response) {
                            if (response.error || response == false) {
                                toastr.error("Napaka:gapi.client.calendar.events.insert");
                                return false;
                            }
                            else {
                                console.log("Created event: %s", response.id);
                                //put on full calendar
                                var newevt=calendar.addEvent({
                                    id: response.id,
                                    title: newEvent.summary,
                                    start: newEvent.start.dateTime,
                                    end: newEvent.end.dateTime,
                                    resourceId: getResourceIdByGid(calid),
                                    extendedProps: {
                                        clientid:resultClientID,
                                        client: JSON.stringify({ label: $("#txtClientsearch").val(), value: resultClientID, mobile: $("#txtClientMobile").val() }),
                                        notes: JSON.stringify($('#txtNotes').tokenfield('getTokens'))
                                    }
                                });
                                if ($('#txtNotes').tokenfield('getTokens').length > 0) { if ($('#txtNotes').tokenfield('getTokens')[0].color != null) { newevt.setProp('color', '#' + $('#txtNotes').tokenfield('getTokens')[0].color); } }
                                //notify client
                                notifyClient(newEvent.start.dateTime, $("#txtClientMobile").val(),resultClientID);
                            }
                        });
                    });
                });


            } else { return false; }
        }

        function SaveEvent(p_event) {
            if ($('#formEvent').valid()) {
                //save client (if changed)
                getClientID().catch((result) => { toastr.info(result); }).then((resultClientID) => {
                    //create new event
                    var res = p_event.event.getResources();
                    var calid = $('#cboGooCal').val();
                    var cas = $("#txtEndTime").val().split(":");
                    var endDate = new Date(fp.selectedDates[0]);
                    if (cas[0] != undefined) { endDate.setHours(cas[0]); }
                    if (cas[1] != undefined) { endDate.setMinutes(cas[1]); }

                    var eventSummary = $("#txtClientsearch").val();
                    if ($("#txtClientMobile").val().length != 0) { eventSummary = eventSummary + "(" + $("#txtClientMobile").val() + ")" }
                    var selServices = getSelectedServicesNames();
                    if (selServices.length > 0) { eventSummary = eventSummary + "\n" + selServices.join(' '); }
                    var newEvent = {
                        start: { 'dateTime': new Date(fp.selectedDates[0]) },
                        end: { 'dateTime': endDate },
                        summary: eventSummary,
                        "extendedProperties": {
                            "shared": {
                                clientid:resultClientID,
                                client: JSON.stringify({ label: $("#txtClientsearch").val(), value: resultClientID, mobile: $("#txtClientMobile").val() }),
                                notes: JSON.stringify($('#txtNotes').tokenfield('getTokens'))
                            }
                        }
                    };

                    refreshGAPIToken().then(() => {
                        var eventToUpdate = gapi.client.calendar.events.insert({
                            "calendarId": calid,
                            "resource": newEvent
                        }).execute(function (response) {
                            if (response.error || response == false) {
                                toastr.error("Napaka:gapi.client.calendar.events.insert");
                                return false;
                            }
                            else {
                                console.log("Created event: %s", response.id);
                                //put on calendar
                                var newevt=calendar.addEvent({
                                    id: response.id,
                                    title: newEvent.summary,
                                    start: newEvent.start.dateTime,
                                    end: newEvent.end.dateTime,
                                    resourceId: getResourceIdByGid(calid),
                                    extendedProps: {
                                        client: JSON.stringify({ label: $("#txtClientsearch").val(), value: resultClientID, mobile: $("#txtClientMobile").val() }),
                                        notes: JSON.stringify($('#txtNotes').tokenfield('getTokens'))
                                    }
                                });
                                if ($('#txtNotes').tokenfield('getTokens').length > 0) { if ($('#txtNotes').tokenfield('getTokens')[0].color != null) { newevt.setProp('color', '#' + $('#txtNotes').tokenfield('getTokens')[0].color); } }
                                //notify client
                                notifyClient(newEvent.start.dateTime, $("#txtClientMobile").val(),resultClientID);
                            }
                            //delete previous event
                            gapi.client.calendar.events.delete({
                                "calendarId": res[0].extendedProps.gid,
                                "eventId": p_event.event.id
                            }).execute(function (response) {
                                if (response.error || response == false) {
                                    toastr.error("Napaka:gapi.client.calendar.events.delete");
                                    return false;
                                }
                                else {
                                    console.log("Deleted event: %s", p_event.event.id);
                                    p_event.event.remove();
                                    return true;
                                }
                            });
                        });
                    });
                });
            } else { return false; }
        }

        function SaveMoveEvent() {
            if ($('#formEvent').valid()) {
                //move event
                var res = eventToMove.event.getResources();
                var oldCalId = res[0].extendedProps.gid;
                var newCalId = $('#cboGooCal').val();
                var oldStart = eventToMove.event.start;
                var oldEnd = eventToMove.event.end;
                var newStart = new Date(fp.selectedDates[0]);
                var diffMs = oldEnd.getTime()-oldStart.getTime();
                var newEnd = new Date(newStart.getTime() + diffMs);

                var eventPatch = {
                    start: { 'dateTime': newStart },
                    end: { 'dateTime': newEnd }
                };
                var oldEvent = calendar.getEventById(eventToMove.event.id);
                var client = null;
                if (typeof oldEvent.extendedProps?.client !== "undefined") {
                    client = JSON.parse(oldEvent.extendedProps.client);
                }

                refreshGAPIToken().then(() => {
                    //move event first
                    if (newCalId != oldCalId) {
                        var eventToUpdate = gapi.client.calendar.events.move({
                            "calendarId": oldCalId,
                            "eventId": eventToMove.event.id,
                            "destination": newCalId
                        }).execute(function (response) {
                            if (response.error || response == false) {
                                toastr.error("Napaka:gapi.client.calendar.events.move");
                                return;
                            }
                            else {
                                console.log("Moved event: %s", eventToMove.event.id);
                                oldEvent.setResources(getResourceIdByGid(newCalId));

                                diffMs = newStart.getTime() - oldStart.getTime();
                                if (diffMs != 0) {
                                    //update event
                                    var eventToUpdate = gapi.client.calendar.events.patch({
                                        "calendarId": newCalId,
                                        "eventId": eventToMove.event.id,
                                        "resource": eventPatch
                                    }).execute(function (response) {
                                        if (response.error || response == false) {
                                            toastr.error("Napaka:gapi.client.calendar.events.patch");
                                            return;
                                        }
                                        else {
                                            console.log("Updated event after move: %s", response.id);
                                            oldEvent.moveDates(diffMs);
                                            eventToMove = null;
                                            toastr.success("Premaknil");
                                        }
                                    });
                                }
                            }
                        });
                    }
                    else {
                        diffMs = newStart.getTime() - oldStart.getTime();
                        if (diffMs != 0) {
                            //update event
                            var eventToUpdate = gapi.client.calendar.events.patch({
                                "calendarId": newCalId,
                                "eventId": eventToMove.event.id,
                                "resource": eventPatch
                            }).execute(function (response) {
                                if (response.error || response == false) {
                                    toastr.error("Napaka:gapi.client.calendar.events.patch");
                                    return;
                                }
                                else {
                                    console.log("Updated event after move: %s", response.id);
                                    oldEvent.moveDates(diffMs);
                                    eventToMove = null;
                                    toastr.success("Premaknil");
                                }
                            });
                        }
                    }
                });
                if (client !== null) { notifyClient(newStart, client.mobile, client.value); }
            } else { return false; }
        }


        //init services tags
        function initServicesTags() {
            //get tags
            getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL + "/api/services/@{ val = "";
                if (Model.Settings.TryGetValue("cbUseSingleListOfServices", out val) == true)
                {
                    if (val.ToLower() == "false") {@Html.Raw(Model.Location.Id+"/"); } else {@Html.Raw("0/"); }
                }
            }",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    async: false,
                    success: function (result) {
                        var retval = [];
                        result.forEach(function (item) {
                            var token = {};
                            token.value = item.id;
                            token.minutes = item.minutes;
                            token.color = item.color;
                            token.label = item.name;
                            if (item.minutes > 0) { token.label=token.label+' ('+item.minutes+' min)'}
                            retval.push(token)
                        });

                        $("#txtNotes").tokenfield({
                            autocomplete: {
                                source: retval,
                                delay: 100
                            },
                            showAutocompleteOnFocus: true, createTokensOnBlur: true
                        })

                      $('#txtNotes').on('tokenfield:createdtoken', function (e) {
                          $('#txtMinDuration').val(getServiceDuration());
                          setEndTime("#txtEndTime", getServiceDuration());

                      })
                        $('#txtNotes').on('tokenfield:removedtoken', function (e) {
                            $('#txtMinDuration').val(getServiceDuration());
                            setEndTime("#txtEndTime", getServiceDuration());

                      })
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error getting data:" + error);
                    }
                });
            });
        }
        function setEndTime(p_selector, p_Minutes) {
            if (p_Minutes != 0) {
                var endDate = new Date(fp.selectedDates[0]);
                var newEndTime = new Date(endDate.getTime() + p_Minutes * 60000);
                var cHour = newEndTime.getHours();
                var cMinuts = newEndTime.getMinutes();
                var outStr = (cHour <= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts <= 9 ? ('0' + cMinuts) : cMinuts);
                $(p_selector).val(outStr);
            }
        }

        function getServiceDuration() {
            var maxDur = 0;
            $('#txtNotes').tokenfield('getTokens').forEach(function (arrayItem, idx) {
                if (arrayItem.hasOwnProperty('minutes')) {
                    @{
                        if (Model.Settings.TryGetValue("AppointmentsSumServicesLength", out val) == true)
                        {
                            if (bool.Parse(val) == true)
                            { @Html.Raw("maxDur +=  arrayItem.minutes;");}
                            else
                            { @Html.Raw("maxDur = Math.max(maxDur, arrayItem.minutes);");}

                        }

                    }

                }
            });
            return maxDur;
        }
        function getSelectedServicesNames()
        {
            var retval = [];
            $('#txtNotes').tokenfield('getTokens').forEach(function (arrayItem, idx) {
                if (arrayItem.hasOwnProperty('minutes')) {
                    retval.push(arrayItem.label.replace('('+arrayItem.minutes+' min)',''));
                } else { retval.push(arrayItem.label); }
            });
            return retval;
        }


    //#endregion

        function showSendLink() {
            PrepareModal('link');
            $("#myModal").modal("show");
        }

        function PrepareModal(p_prepareFor) {
            if (p_prepareFor == 'event') {
                $('#cmdDelete').show();
                $('#cmdSave').show();
                $('#cmdSendLink').hide();
                $('#rowMinDuration').hide();
                $('#rowDT').show();
                $("#cboGooCal option[value='0']").remove();
                $('#cboGooCal').selectpicker('refresh');
            }
            else {
                $('#cmdSendLink').show();
                $('#cmdDelete').hide();
                $('#cmdSave').hide();
                $('#rowMinDuration').show();
                $('#rowDT').hide();
                $("#cboGooCal").prepend("<option value='0' selected='selected'>Kdorkoli</option>");
                $('#cboGooCal').selectpicker('refresh');
            }
        }

        function SendLink(p_event) {
            if ($('#formEvent').valid()) {
                //send Link
                var appointmentToken = {};
                appointmentToken.Token = '';
                appointmentToken.Service = getSelectedServicesNames().join(' ');
                appointmentToken.Minutes = $('#txtMinDuration').val();
                appointmentToken.CompanyId = 0;
                appointmentToken.LocationId = parseInt($("#cboLocations").val());;
                appointmentToken.ClientId = SelectedClientID;
                appointmentToken.AppUserId = 0;
                appointmentToken.WorkplaceId = $('#cboGooCal').find('option:selected').attr('data-workplaceid');
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(appointmentToken),
                    url: apiURL + "/api/appointment-tokens/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (retval) {
                        if (retval.hasOwnProperty('id')) { toastr.success("Link sent!"); }
                        else { toastr.error("Link NOT sent!"); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error saving client:" + error.toString());
                        return false;
                    }
                });
                });



            } else { return false; }
        }

        function getSMSMessage(p_Start) {
            @{ string msgTemplate = "";
                if (Model.Settings.TryGetValue("SMS_GOO_Msg", out msgTemplate) == false)
                {
                    msgTemplate = "Pozdravljeni! Naročeni ste <DANESJUTRI> <DATUM> ob <URA>. Veselimo se vašega obiska!";
                }
                @Html.Raw("var msgTemplate=`"+msgTemplate+"`;");
            }
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            if (dayjs(p_Start).format("DD-MM-YYYY") == dayjs(today).format("DD-MM-YYYY"))
            { msgTemplate=msgTemplate.replace("<DANESJUTRI>","danes"); }
            else
            {
                if (dayjs(p_Start).format("DD-MM-YYYY") == dayjs(tomorrow).format("DD-MM-YYYY"))
            { msgTemplate=msgTemplate.replace("<DANESJUTRI>","jutri"); }
            else
                {
                    const wd = ['v nedeljo', 'v ponedeljek', 'v torek', 'v sredo','v četrtek', 'v petek', 'v soboto'];
                    msgTemplate = msgTemplate.replace("<DANESJUTRI>", wd[p_Start.getDay()]);
                }
            }
            msgTemplate = msgTemplate.replace("<URA>", dayjs(p_Start).format("LT"));
            msgTemplate = msgTemplate.replace("<DATUM>", dayjs(p_Start).format("l"));
            return msgTemplate;
        }

        function QueueSMS(p_Start, p_Mobile, p_ClientId) {

            var smsc = {};
            smsc.CampaignType = 3; //direct without approval
            smsc.LocationId = $("#cboLocations").val();
            smsc.MsgTxt = getSMSMessage(p_Start);
            smsc.SendAfter = dayjs.utc().local();
            smsc.Recipients = [p_Mobile + '|' + p_ClientId];

            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(smsc),
                    url: apiURL + "/api/Sms/QueueSmsCampaign",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") {
                            toastr.success('SMS uspešno poslan');
                        }
                        else { toastr.error("Napaka pri pošiljanju:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka pri pošiljanju:" + error.toString());
                        return false;
                    }
                });
            });
        }

        function notifyClient(p_Start, p_Mobile, p_ClientId) {

            @{ val = "";
                if (Model.Settings.TryGetValue("SMS_AppointmentSMS", out val) == true)
                {
                    if (val.ToLower() != "true") {@Html.Raw("return;"); }
                }
            }
            if (typeof p_Start === "undefined") { console.log('Notify client start is undefined');  return; }
            if (p_Mobile != "") {
                    let cancelsms = false;
                    let toast = toastr.warning("Poslal bom SMS " + p_Mobile + ". <br\><small>(Klik za preklic)</small>", "",
                    {
                        timeOut: 7000, extendedTimeOut: 7000,
                        progressBar: true,
                        closeButton: true,
                        onHidden: function () { if (cancelsms == false) { QueueSMS(p_Start, p_Mobile, p_ClientId); } },
                        onclick: function () { cancelsms = true; }
                    });
                }

        }

        function getEasterMonday(year) {
	        var f = Math.floor,
		        // Golden Number - 1
		        G = year % 19,
		        C = f(year / 100),
		        // related to Epact
		        H = (C - f(C / 4) - f((8 * C + 13)/25) + 19 * G + 15) % 30,
		        // number of days from 21 March to the Paschal full moon
		        I = H - f(H/28) * (1 - f(29/(H + 1)) * f((21-G)/11)),
		        // weekday for the Paschal full moon
		        J = (year + f(year / 4) + I + 2 - C + f(C / 4)) % 7,
		        // number of days from 21 March to the Sunday on or before the Paschal full moon
		        L = I - J,
		        month = 3 + f((L + 40)/44),
		        day = L + 28 - 31 * f(month / 4);

	        return  dayjs(new Date(year, month-1, day+1)).format("YYYY-MM-DD");
        }

    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoadOkay()" onerror="gapiLoadFail(event)"></script>

}
