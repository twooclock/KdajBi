@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Obveščanje strank";
}

@section styles{
    <link href="~/plugins/jquery-ui/jquery-ui.min.css" rel="stylesheet" />

    <link href="~/plugins/toastr/toastr.min.css" rel="stylesheet" />
    <link href="~/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/plugins/flatpickr/flatpickr.min.css" rel="stylesheet" />
    <link href="~/plugins/flatpickr/plugins/confirmDate/confirmDate.css" rel="stylesheet" />
    <link href="~/plugins/bs-stepper/css/bs-stepper.min.css" rel="stylesheet" />
    <style>


        .tc__rendered {
            list-style-type: none;
            white-space: nowrap
        }

        .tc__choice {
            cursor: pointer;
            border: solid #ced4da 1px;
            opacity: 0.85;
            float: left;
            border-radius: 4px;
        }

            .tc__choice.active {
                background-color: #3c8dbc;
            }

        .cCB {
            padding-left: 2rem;
        }

        .cCB2 {
            padding-left: 0.7rem;
        }

        .ulClients {
            padding-left: 0px;
            list-style-type: none;
            max-height: 300px;
            overflow-y: scroll;
        }

        .ccl {
            padding-left: 0.5rem;
        }
    </style>
}


<!-- page content -->
<div class="right_col col-md-12" role="main">


    <div class="row">

        <div class="col-md-12 mt-1">
            <h2>Obveščanje strank</h2>
            <div id="stepper2" class="bs-stepper">
                <div class="bs-stepper-header">
                    <div class="step" data-target="#step-nl-1">
                        <button type="button" class="btn step-trigger">
                            <span class="bs-stepper-circle">1</span>
                            <span class="bs-stepper-label">Izbira strank</span>
                        </button>
                    </div>
                    <div class="line"></div>
                    <div class="step" data-target="#step-nl-2">
                        <div class="btn step-trigger">
                            <span class="bs-stepper-circle">2</span>
                            <span class="bs-stepper-label">Priprava sporočila</span>
                        </div>
                    </div>
                    <div class="line"></div>
                    <div class="step" data-target="#step-nl-3">
                        <button type="button" class="btn step-trigger">
                            <span class="bs-stepper-circle">3</span>
                            <span class="bs-stepper-label">Pošiljanje</span>
                        </button>
                    </div>
                </div>
                <div class="bs-stepper-content pb-0">
                    <div id="step-nl-1" class="content">
                        <div class="row">

                        </div>
                        <div id="notifyTypeSelect" class="row">
                            <button type="button" class="btn btn-primary col-12 py-4" onclick="setNotify(0);">Obvestil bom posamezne stranke</button>
                            <button type="button" class="btn btn-primary col-12  my-2 py-4" onclick="setNotify(1);">Obvestil bom vse stranke izbrane lokacije</button>
                            <button type="button" class="btn btn-primary col-12 py-4" onclick="setNotify(2);">Obvestil bom vse ženske/moške</button>
                        </div>
                        <div class="row">
                            <div id="cblClients" class="col-md-6" style="display: none">
                                <p id="lblStranke" class="">Poiščite in označite posamezne stranke ali ...</p>
                                <div id="cblHeader" class="form-control custom-control custom-checkbox cCB">
                                    <div class="row">
                                        <div class="col-0 pl-2">
                                            <input class="custom-control-input" type="checkbox" id="cbSelectAll"><label for="cbSelectAll" class="custom-control-label"> </label>
                                        </div>
                                        <div class="col-md-5 p-0">
                                            <input id="txtClientSearch" style="border:0" type="text" value="" placeholder="Stranka...">
                                        </div>
                                        <div class="col-md-6">
                                            <ul id="tagCloud" class="tc__rendered p-0">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="cblLocations" class="col-md-6" style="display: none">
                                <div class="row">
                                    <p>...označite posamezne lokacije ali ...</p>
                                </div>
                                <div class="row">
                                    @await Component.InvokeAsync("LocationsCheckboxList", new { CompanyId = int.Parse(User.FindFirst("CompanyId").Value) })
                                </div>
                            </div>
                            <div id="cblSex" class="col-md-6" style="display: none">
                                <div class="row">
                                    <p style="margin-top: 16px;">...izberite:</p>
                                </div>

                                <div class="row">
                                    <div class="form-group">
                                        <div class="custom-control custom-radio ">
                                            <input class="custom-control-input" type="radio" id="rbSexF" name="rbSex" onclick="ToNextStep(2);">
                                            <label for="rbSexF" class="custom-control-label ">vse ženske</label>
                                        </div>
                                        <div class="custom-control custom-radio ">
                                            <input class="custom-control-input" type="radio" id="rbSexM" name="rbSex" onclick="ToNextStep(2);">
                                            <label for="rbSexM" class="custom-control-label ">vse moške</label>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>



                        <button id="btnNext" class="btn btn-primary" onclick="ToNextStep(2);" style="display: none">Naprej</button>
                    </div>
                </div>
                <div id="step-nl-2" class="content">
                    <div class="form-group mb-1">
                        <label id="lblMessage" for="txtMessage">
                            Sporočilo:
                        </label>
                        <textarea rows="5" id="txtMessage" name="txtMessage" class="form-control" maxlength="640"></textarea>
                    </div>
                    <button class="btn btn-primary" onclick="ToNextStep(3);">Naprej</button>
                </div>
                <div id="step-nl-3" class="content">
                    <div class="row">
                        <div class="col-md-6">
                            <textarea rows="5" id="lblMsg" name="txtMessage" class="form-control" readonly></textarea>
                        </div>
                    </div>
                    <div class="row">
                        <div id="lblSending" class="col-md-6 font-weight-bold">V pošiljanju...</div>
                        <div id="lblSmsInfo" class="col-md-6"></div>
                    </div>
                    <div id="test2" class="form-group mb-1 ">
                        <label for="txtNotificationTime">
                            Sporočila pošlji:
                        </label>
                        <div class="input-group flatpickr col-md-6 p-0">
                            <input type="text" id="txtNotificationTime" name="txtNotificationTime" class="form-control " aria-describedby="basic-addonY" data-input />
                            <div class="input-group-append">
                                <div class="input-group-text" id="basic-addonY" data-toggle onclick="">
                                    <i class="fas fa-calendar"></i>
                                </div>
                            </div>
                        </div>
                        <div class="form-group mb-1" style="display:none">
                            <label for="txtDebug">
                                Debug:
                            </label>
                            <textarea rows="10" id="txtDebug" name="txtDebug" class="form-control"></textarea>
                        </div>
                    </div>
                    <button class="btn btn-primary" onclick="sendMessage()">Pošlji</button>
                    <button type="button" class="btn btn-default" style="display:none" onclick="test();">TEST</button>
                </div>
            </div>
        </div>
    </div>

</div>
<br />


</div>
<!-- /page content -->
<!-- modal new client content-->
<!-- /modal content-->

@section scripts{
    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>
    <script src="~/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/plugins/js-cookie/js.cookie.min.js"></script>
    <script src="~/plugins/toastr/toastr.min.js"></script>
    <script src="~/plugins/sweetalert2/sweetalert2.min.js"></script>

    <script src="~/plugins/flatpickr/flatpickr.min.js"></script>
    <script src="~/plugins/flatpickr/plugins/confirmDate/confirmDate.js"></script>

    <script src="~/plugins/dayjs/dayjs.min.js"></script>
    <script src="~/plugins/dayjs/plugin/utc.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_utc)</script>
    <script src="~/plugins/dayjs/plugin/localizedFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localizedFormat);</script>
    <script src="~/plugins/dayjs/plugin/localeData.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localeData)</script>
    <script src="~/plugins/dayjs/plugin/customParseFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_customParseFormat)</script>
    <script src="~/plugins/bs-stepper/js/bs-stepper.min.js"></script>

    <script type="text/javascript">



        function hideKeyboard() {
            //this set timeout needed for case when hideKeyborad
            //is called inside of 'onfocus' event handler
            setTimeout(function () {

                //creating temp field
                var field = document.createElement('input');
                field.setAttribute('type', 'text');
                //hiding temp field from peoples eyes
                //-webkit-user-modify is nessesary for Android 4.x
                field.setAttribute('style', 'position:absolute; top: 0px; opacity: 0; -webkit-user-modify: read-write-plaintext-only; left:0px;');
                document.body.appendChild(field);

                //adding onfocus event handler for out temp field
                field.onfocus = function () {
                    //this timeout of 200ms is nessasary for Android 2.3.x
                    setTimeout(function () {

                        field.setAttribute('style', 'display:none;');
                        setTimeout(function () {
                            document.body.removeChild(field);
                            document.body.focus();
                        }, 14);

                    }, 200);
                };
                //focusing it
                field.focus();

            }, 50);
        }

        function loadScript(src) {
            return new Promise(function (resolve, reject) {
                const s = document.createElement('script');
                let r = false;
                s.type = 'text/javascript';
                s.src = src;
                s.async = true;
                s.onerror = function (err) {
                    reject(err, s);
                };
                s.onload = s.onreadystatechange = function () {
                    // console.log(this.readyState); // uncomment this line to see which ready states are called.
                    if (!r && (!this.readyState || this.readyState == 'complete')) {
                        r = true;
                        resolve();
                    }
                };
                const t = document.getElementsByTagName('script')[0];
                t.parentElement.insertBefore(s, t);
            });
        }

        var delay = (function () {
            var timer = {}
                , values = {}
            return function (el) {
                var id = el.id + '.' + el.name
                return {
                    enqueue: function (ms, cb) {
                        if (values[id] == el.value) return
                        //if (!el.value) return
                        var original = values[id] = el.value
                        clearTimeout(timer[id])
                        timer[id] = setTimeout(function () {
                            if (original != el.value) return // solves race condition
                            cb.apply(el)
                        }, ms)
                    }
                }
            }
        }());


        var fp;
        var notifyType;

        var myClients = JSON.parse('@Html.Raw(Model.ClientsJson)');


        @await Html.PartialAsync("_ApiAccess")

       var stepper2 = new Stepper(document.getElementById('stepper2'), {
                linear: false,
                animation: true
            })

        function formatDate(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear(),
                hour = d.getHours(),
                min = d.getMinutes();
            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;

            return [day, month, year, hour,min].join('.');
        }

        function test() {
            var tekst = $('#txtDebug').val();
            tekst = 'fp.selectedDates:' + formatDate(fp.selectedDates[0]) + 'utc:' + new Date(dayjs(fp.selectedDates[0]).utc()) + '\n' + tekst;
            dayjs(fp.selectedDates[0]).utc()
            $('#txtDebug').val(tekst)
            return false;
        }
        function ToNextStep(p_Step) {
            if (p_Step == 2)
            {
                var smsc = getSmscObject();
                if (smsc.Recipients.length > 0) { stepper2.next(); }
                else { return false; }
            }
            if (p_Step == 3)
            {
                if ($('#txtMessage').val().length > 0) { stepper2.next(); }
                else { return false; }
            }

        }
        function getSmscObject() {

            var smsc={};
            smsc.CampaignType = notifyType;
            smsc.MsgTxt = $('#txtMessage').val();
            smsc.SendAfter= new Date(dayjs(fp.selectedDates[0]).utc());
            switch (notifyType)
            {
                case 0:
                    var Recipients = []
                    $("#ulClients input:checkbox:checked").each(function () {
                        Recipients.push($(this).attr("id").substring(3));
                    });
                    smsc.Recipients = Recipients;
                    break;
                case 1:
                    var Recipients = []
                    $("#cblLocations input:checkbox:checked").each(function () {
                        Recipients.push($(this).val());
                    });
                    smsc.Recipients = Recipients;
                    break;
                case 2:
                    var Recipients = [];
                    if ($("#rbSexF").prop("checked")) { Recipients[0] = "F"; }
                    if ($("#rbSexM").prop("checked")) { Recipients[0] = "M"; }
                    smsc.Recipients = Recipients;
                    break;
            }
            return smsc;
        }

        function sendMessage() {
            Swal.fire({
                title: 'Pošljem sporočila?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                    $.ajax({
                        type: "post",
                        data: JSON.stringify(getSmscObject()),
                        url: apiURL + "/api/Sms/QueueSmsCampaign",
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") {
                                Swal.fire('Sporočila so v pošiljanju.').then((result) => {
                                    window.location.href = '@Url.Action("Index", "Home")';
                                    return true;
                                });
                            }
                            else { toastr.error("Napaka pri pošiljanju:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka pri pošiljanju:" + error.toString());
                            return false;
                        }
                    });
                    });

                } else { return false; }
            });


        }


        function filterClients(p_filter) {
            //set show/hide
            p_filter = p_filter.toLowerCase();
            console.info(new Date(), p_filter);

            var myUL = document.querySelector('#ulClients');
            myUL.style.display = 'none';
            var array = document.querySelectorAll('#ulClients li')
            for(var i = 0; i< array.length; i++) {
				array[i].style.display = 'none';
            }
            //filter string
            array = Array.prototype.filter.call(document.querySelectorAll('#ulClients li'),
				function (obj) {
					return (obj.childNodes[0].childNodes[1].innerHTML.toLowerCase().indexOf(p_filter) > -1);
                });
            //filter tags
            selectedTags = [];
            $("#tagCloud .tc__choice.active").each(function (i, obj) {
                selectedTags.push('#' + $(this).attr("data-id") + '#');
                });
            if (selectedTags.length > 0) {
                array = Array.prototype.filter.call(array,
                    function (obj) {
                        return selectedTags.some(v => obj.childNodes[0].childNodes[1].getAttribute("tags").includes(v));
                    });
            }
            //results
            for (var i = 0; i < array.length; i++) {
				array[i].style.display = 'block';
            }
            myUL.style.display = 'block';
        }

        function getSelected() {
            return $('.ulClients input:checked').length;
        }

        function checkClient(id) {
            console.info(new Date(),'checkClient',id);
            document.getElementById('lblStranke').innerHTML = 'Stranke ' + getSelected() + '/' + myClients.length + ':';
        }


        $(document).ready(function () {


            document.getElementById('stepper2').addEventListener('shown.bs-stepper', function (event) {
                if (event.detail.indexStep == 2) {
                document.getElementById('lblMsg').innerHTML = $('#txtMessage').val();

                    //show sms limit info
                    getAPIToken().then((result) => {
                     $.ajax({
                        type: "post",
                        data: JSON.stringify(getSmscObject()),
                        url: apiURL+"/api/Sms/SmsInfo",
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer '+result.AccessToken },
                        dataType: "json",
                         success: function (result) {
                             var smsInfo = "";
                             var cssClass = "text-success";
                             if (result.limit >= result.recipients)
                             { smsInfo = "Pošljete lahko " + result.limit + " sporočil."; }
                             else
                             {
                                 smsInfo = "Pošljete lahko " + result.limit + " sporočil.";
                                 smsInfo = (result.recipients - result.limit) + " sporočil ne bo poslanih! Naročite dodatne sms-e!";
                                 cssClass = "text-warning";
                             }
                             if (result.limit == 0) { smsInfo = "Ni limita! Naročite dodatne sms-e!"; cssClass = "text-danger";}
                             if (result.limit == -1) { smsInfo = "Prišlo je do napake. Pošiljanje trenutno ni mogoče!"; cssClass = "text-danger"; }

                             $('#lblSending').text("Pripravljenih " + result.recipients+" sporočil.");
                             $('#lblSmsInfo').removeClass("text-success");
                             $('#lblSmsInfo').removeClass("text-warning");
                             $('#lblSmsInfo').removeClass("text-danger");
                             $('#lblSmsInfo').addClass(cssClass);
                             $('#lblSmsInfo').text(smsInfo);

                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                     });
                        });
                }
            })


            //count message characters
            document.getElementById('txtMessage').onkeyup = function () {
                document.getElementById('lblMessage').innerHTML = "Sporočilo (" + (640 - this.value.length) + "/640):";
            };

            // load locale and Get flatpicker localized instance
            loadScript("/plugins/dayjs/locale/" + navigator.language.slice(0, 2) + ".js")
                .then(function () {
                    dayjs.locale(navigator.language.slice(0, 2));
                    loadScript("/plugins/flatpickr/l10n/" + navigator.language.slice(0, 2) + ".js")
                        .then(function () {
                            fp = $(".flatpickr").flatpickr({
                                altInput: true,
                                defaultDate: new Date(),
                                minDate: new Date(),
                                locale: dayjs.locale(),
                                plugins: [new confirmDatePlugin({ showAlways: true })],
                                enableTime: true, minTime: "8:00", maxTime: "20:00",
                                dateFormat: "llll",
                                clickOpens: true, allowInput: false, wrap: true,
                                //allowInvalidPreload: true,
                                altFormat: dayjs.localeData().longDateFormat('llll'),
                                //ariaDateFormat: dayjs.localeData().longDateFormat('llll'),
                                dateFormat: dayjs.localeData().longDateFormat('llll'),
                                parseDate: (datestr, format) => {
                                    var fmt = format;
                                    if (fmt == 'Y-m-d\\TH:i:S') { fmt = 'YYYY-MM-DD\\THH:mm'; }
                                    if (fmt == 'H:i:S') { fmt = 'HH:mm'; }
                                    var tekst = $('#txtDebug').val();
                                    tekst = 'parseDate(' + datestr + ',' + fmt + ') return:' + formatDate(dayjs(datestr, fmt).toDate()) + '\n' + tekst;
                                    $('#txtDebug').val(tekst);
                                    return dayjs(datestr, fmt).toDate();
                                },
                                formatDate: (date, format, locale) => {
                                    if (format != 'F j, Y') {
                                        var tekst = $('#txtDebug').val();
                                        tekst = 'formatDate:' + formatDate(date) + '-' + format + '-' + locale.weekdays.longhand[0] + '\n' + tekst;
                                        $('#txtDebug').val(tekst)
                                        return dayjs(date).format(format);
                                    }
                                }
                            });
                        });
                });


            //bind cboLocations
            $("#cboLocations").off('change').change(function (evt) {
                Cookies.set('DefaultLocation', $(this).val());
                setClientForm(0);
                GetClients();
            });

            //init toastr
            toastr.options.preventDuplicates = true;
            toastr.options.timeOut = 1000;

        });

        function TagCloud_Change() {
            filterClients($('#txtClientSearch').val());
        }



        function GetClients() {

            //fill client search
            getAPIToken().then((result) => {
            $.ajax({
                type: "GET",
                url:  apiURL + "/api/clients/getclientslist/"+$("#cboLocations").val(),
                contentType: "application/json; charset=utf-8",
                headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                dataType: "json",
                async: true,
                success: function (msg) {
                    myClients = msg;

                },
                error: function () {
                    toastr.error('Error filling clients')
                }
            });
            });

        }

        function CreateSelectClientsUI() {
            const maxListItems=1000;
            $('#txtClientSearch').keyup(function () {
                delay(this).enqueue(800, function () {
                    filterClients($('#txtClientSearch').val());
                });


            });

            $("#cbSelectAll").click(function () {
                var myUL = document.querySelector('#ulClients');
                var items = myUL.querySelectorAll('li:not([style*="display:none"]):not([style*="display: none"]) .icb');
                items[0].parentNode.style.display = 'none';
                for (i = 0; i < items.length; ++i) {
                    items[i].checked = this.checked;
                };
                items[0].parentNode.style.display = 'block';
                checkClient(0);
            });
             //create checkboxlist
            var myUL = document.createElement("ul");
            myUL.id = "ulClients";
            myUL.className = "ulClients";
            const fragment = document.createDocumentFragment();
            let myLI = document.createElement("li");
            let myLIspan = document.createElement("span");

            let myLIDiv = document.createElement("div");

            if (myClients.length < maxListItems) { myLIDiv.className = "form-control custom-control custom-checkbox cCB"; }
            else { myLIDiv.className = "cCB2"; }
            let myLIDivInput = document.createElement("input");
            if (myClients.length < maxListItems) { myLIDivInput.className = "icb custom-control-input"; }
            else { myLIDivInput.className = "icb"; }
            myLIDivInput.type = "checkbox";

            let myLIDivLabel = document.createElement("label");
            if (myClients.length < maxListItems) { myLIDivLabel.className = "custom-control-label"; }
            else { myLIDivLabel.className = "ccl"; }

            myClients.forEach(function (item) {
                let myLIClone = myLI.cloneNode(false);
                myLIClone.id = item.Id;
                let myLIspanClone = myLIspan.cloneNode(false);
                myLIspanClone.innerHTML = item.FullName;
                let myLIDivClone = myLIDiv.cloneNode(false);
                let myLIDivInputClone = myLIDivInput.cloneNode(false);
                myLIDivInputClone.addEventListener('click', function () { checkClient(item.Id); });
                myLIDivInputClone.id = "cCB" + item.Id;
                let myLIDivLabelClone = myLIDivLabel.cloneNode(false);
                myLIDivLabelClone.setAttribute("for", "cCB" + item.Id);
                myLIDivLabelClone.setAttribute("tags",  item.ct);
                myLIDivLabelClone.innerHTML = item.FullName;
                myLIDivClone.appendChild(myLIDivInputClone)
                myLIDivClone.appendChild(myLIDivLabelClone)

                myLIClone.appendChild(myLIDivClone)

                fragment.appendChild(myLIClone)
            });

            myUL.appendChild(fragment)
            document.getElementById('cblClients').appendChild(myUL);
            //create locations list


            //create tag cloud
            getAPIToken().then((result) => {
            $.ajax({
                type: "get",
                url: apiURL + "/api/tags/",
                contentType: "application/json; charset=utf-8",
                headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                dataType: "json",
                async: false,
                success: function (result) {
                    const fragment = document.createDocumentFragment();
                    let myLI = document.createElement("li");
                    myLI.className = "tc__choice px-1";
                    result.forEach(function (item) {
                        let myLIClone = myLI.cloneNode(false);
                        myLIClone.innerHTML = item.title;
                        myLIClone.setAttribute("data-id", item.id);
                        fragment.appendChild(myLIClone)
                    });
                    document.getElementById('tagCloud').appendChild(fragment);
                    $(".tc__choice").click(function () {
                        //toggle active class
                        $(this).toggleClass("active");
                        TagCloud_Change();

                    });
                },
                error: function (xhr, status, error) {
                    toastr.error("Error getting data:" + error);
                }
            });
            });
        }

        function setNotify(p_type)
        {
            notifyType = p_type;
            $("#notifyTypeSelect").hide();
            $("#btnNext").show();

            switch (p_type)
            {
                case 0:
                    CreateSelectClientsUI();
                    $("#cblClients").show();
                    break;
                case 1:
                    $("#cblLocations").show();
                    break;
                case 2:
                    $("#cblSex").show();
                    break;
            }
        }








    </script>
}

