@using Microsoft.AspNetCore.Identity
@using KdajBi.Core.Models;
@using Newtonsoft.Json;
@inject KdajBi.Web.Services.IApiTokenProvider apiTP
@inject UserManager<AppUser> UserManager
var apiURL="@Html.Raw(apiTP.Settings().BaseAddress)"
var apiToken=JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Token))')
var apiUser='@Html.Raw(@UserManager.GetUserName(User))';
 async function refreshAPIToken() {
    return new Promise(function(resolve, reject) {
            var tnow = (621355968e9 + 10000 + (new Date()).getTime() * 1e4);
            var reqdata = { Token: apiToken.RefreshToken, UserEmail: apiUser };
            if (tnow < apiToken.Expiration)
            { resolve(apiToken); }
            else {
                //request new token
                $.ajax({
                    type: "post",
                    data: JSON.stringify(reqdata),
                    url: apiURL+"/api/token/refresh",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (result) {
                        apiToken.RefreshToken=result.refreshToken;
                        apiToken.AccessToken=result.accessToken;
                        apiToken.Expiration=result.expiration;
                        resolve(apiToken);
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        reject(error);
                    }
                });

            }
        });
    }

async function getAPIToken() {
    return new Promise(function(resolve, reject) {
        refreshAPIToken().then((result) => { console.log('new api TokenExpiresAt (UTC):'+new Date((result.Expiration-621355968000000000)/10000) ); return result; }).then((result) => { resolve(result) }).catch((error) => { toastr.error("Napaka:" + error.toString()); reject(); });
    });
}