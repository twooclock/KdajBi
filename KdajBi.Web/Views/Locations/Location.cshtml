@using Newtonsoft.Json;
@using KdajBi.Web;
@using KdajBi.Web.ViewModels;
@using System.Globalization;
@model vmLocation
@{
    ViewData["Title"] = "Lokacija";
}

@section styles{
    <!-- datatables.net -->
    <link href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />"
    <link href="~/plugins/datatables-buttons/css/buttons.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-fixedheader/css/fixedHeader.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-scroller/css/scroller.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.min.css" rel="stylesheet" />
    <link href='~/lib/fullcalendar-scheduler-5.10.1/lib/main.min.css' rel='stylesheet' />
    <link href="~/plugins/shepherdjs/shepherd.css" rel="stylesheet" />"
    <link href="~/plugins/summernote/summernote-bs4.min.css" rel="stylesheet" />"

    <style>
        .fc-fullscreen-button:before {
            font-family: "Font Awesome 5 Free";
            content: "\f065";
            display: inline-block;
            padding-right: 3px;
            font-weight: 900;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
            font-size: 14px;
        }

        #calendar {
            max-width: 1100px;
        }

        ::backdrop {
            background-color: white;
        }


        :fullscreen {
            overflow-y: scroll;
        }

        :-ms-fullscreen {
            overflow-y: scroll;
        }

        :-webkit-full-screen {
            overflow-y: scroll;
        }

        :-moz-full-screen {
            overflow-y: scroll;
        }

        div.token{
            font-size: 13px;
        }
        /*sticky header*/
        .fc-toolbar.fc-header-toolbar {
            position: sticky;
            top: 200px;
            z-index: 10;
        }

        .fc-head-container.fc-widget-header {
            position: sticky;
            top: 308px;
            z-index: 10;
            background: red;
        }

        .fc-timeline .fc-body .fc-scroller {
            height: 400px !important;
        }
        .fc .fc-toolbar.fc-header-toolbar {
            margin-bottom: 1.5em;
            position: sticky;
            top: 0;
            background: #ffffff;
            z-index: 100;
        }

        .fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky > * {
            top: 34px;
        }
        .fc-header-toolbar {
            padding: 0px !important;
        }
    </style>
}

<!-- page content -->
<div class="right_col col-md-12" role="main">
    <div id="fs">

    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="dashboard_graph">

                <div class="row x_title">
                    <div class="col-md-6">
                        <h3>@Html.Raw(@Model.Location.Name)</h3>

                    </div>

                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="card card-primary card-outline card-outline-tabs">
                            <div class="card-header p-0 border-bottom-0">
                                <ul class="nav nav-tabs" id="tab_@Html.Raw(@Model.Location.Id)" role="tablist">
                                    <li class="nav-item">
                                        <a class="nav-link active" id="general-tab" data-toggle="tab" href="#general" role="tab" aria-controls="general" aria-selected="true">Splošno</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="timetable-tab" data-toggle="tab" href="#timetable" role="tab" aria-controls="timetable" aria-selected="false">Urnik</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="workplaces-tab" data-toggle="tab" href="#workplace" role="tab" aria-controls="workplace" aria-selected="false">Delovna mesta</a>
                                    </li>
                                     <li class="nav-item">
                                        <a class="nav-link" id="servicegroups-tab" data-toggle="tab" href="#servicegroups" role="tab" aria-controls="servicegroups" aria-selected="false">Skupine storitev</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="services-tab" data-toggle="tab" href="#services" role="tab" aria-controls="services" aria-selected="false">Storitve</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="sms-tab" data-toggle="tab" href="#sms" role="tab" aria-controls="sms">SMS obveščanje</a>
                                    </li>
                                </ul>
                            </div>
                            <div class="card-body">
                                <div class="tab-content" id="custom-tabs-four-tabContent">
                                    <div class="tab-pane fade active show" id="general" role="tabpanel" aria-labelledby="general-tab">
                                        <form id="formGeneral" name="formGeneral" class="form-horizontal">
                                            <div class="row">
                                            <div class="col-sm form-group">
                                                <label for="inputName" class="col-sm control-label">Ime</label>
                                                <div class="col-sm-10">
                                                    <input class="form-control" id="inputName" placeholder="Ime" value="@Html.Raw(@Model.Location.Name)">
                                                </div>
                                            </div>
                                            <div class="col-sm form-group">
                                                <label for="inputTel" class="col-sm control-label">Telefon</label>
                                                <div class="col-sm-10">
                                                    <input class="form-control" id="inputTel" placeholder="Telefon" value="@Html.Raw(@Model.Location.Tel)">
                                                </div>
                                            </div>
                                                </div>
                                                <div class="row">
                                            <div class="col-sm form-group">
                                                <label for="inputAddress" class="col-sm control-label">Naslov</label>
                                                <div class="col-sm-10">
                                                    <input class="form-control" id="inputAddress" placeholder="Naslov" value="@Html.Raw(@Model.Location.Address)">
                                                </div>
                                            </div>
                                                    <div class="col-sm form-group">
                                                <label for="inputTimetable" class="col-sm control-label">Urnik</label>
                                                <div class="col-sm-10">
                                                    <input class="form-control" id="inputTimetable" placeholder="Urnik" value="@Html.Raw(@Model.Location.Timetable)">
                                                </div>
                                            </div>
                                                </div>
                                            <div class="row">
                                                <div class="form-group col-sm-8">
                                                    <label for="inputPublicBookingToken" class="control-label">Naslov za samostojno naročanje strank
                                                    <a href="#!" data-toggle="popover" data-content="Samostojno nočanje bo omogočeno na povezavi https://kdajbi.si/narocanje/[Del naslova za naročanje]. Stranka, s katero boste delili naslov, se bo lahko samostojno naročila."><i class="fa fa-info-circle"></i></a>
                                                    </label>
                                                    <div>
                                                        <input class="form-control" id="inputPublicBookingToken" placeholder="[Če želite omogočiti vtipkajte vsaj 3 znake]" value="@Html.Raw(@Model.Location.PublicBookingToken)">
                                                        @if (string.IsNullOrEmpty(@Model.Location.PublicBookingToken) == false)
                                                        {<span id="lblPublicBookingToken" for="inputPublicBookingToken">Samostojno naročanje je omogočeno na povezavi <a href="https://kdajbi.si/narocanje/@Model.Location.PublicBookingToken" target="_blank"> https://kdajbi.si/narocanje/@Model.Location.PublicBookingToken</a></span> }
                                                    else
                                                    {<span id="lblPublicBookingToken" for="inputPublicBookingToken">[Samostojno naročanje ni omogočeno]</span>}
                                                    <a href="#/" class="btn btn-default float-right" onclick="shareTheLink()" ><i class="fa fa-share-alt"></i>&nbsp;Deli povezavo</a>
                                                    </div>

                                                </div><div class="col-sm-2">
                                                    <img id="imgQR" class="float-right" />
                                                </div>
                                            </div>
											<div class="form-group">
												<label for="txtPublicBookingText" class="control-label">Tekst pri samostojnem naročanju
												<a href="#!" data-toggle="popover" data-content="Tekst se prikaže na dnu strani za naročanje. Mišljen je kot dodatne informacije za stranko, mogoče urnik, kontakt ipd."><i class="fa fa-info-circle"></i></a>
												</label>
                                                <div class="col-sm-10">
													<input class="form-control" id="txtPublicBookingText" placeholder="" value="">
												</div>
											</div>
                                            <div class="row">
											<div class="col-sm form-group">
											    <label for="txtPublicBookingMaxDays" class="control-label">Koliko dni vnaprej si lahko stranka izbere prost termin
											    <a href="#!" data-toggle="popover" data-content="Vpišite koliko dni vnaprej si stranka lahko izbere prost termin. Stranka se bo lahko naročila za največ toliko dni vnaprej. (S tem lahko omejite, da bi se vam stranke naročile npr. 6 mesecev vnaprej)"><i class="fa fa-info-circle"></i></a>
                                                </label>
                                                <div class="col-sm-10">
												    <input class="form-control" id="txtPublicBookingMaxDays" type="number" pattern="[0-9.]+" placeholder="" value="">
											    </div>
										    </div>
                                                    <div class="form-group col-sm d-flex flex-column justify-content-end">
                                                        <div class="form-check">
                                                            <input type="checkbox" class="form-check-input" id="chkPublicBookingAllowCurrentDay">
                                                            <label class="form-check-label" for="chkPublicBookingAllowCurrentDay">
                                                                Dovoli naročanje na trenutni dan
                                                                <a href="#!" data-toggle="popover" data-content="Dovoli stranki, da se naroči na trenutni dan"><i class="fa fa-info-circle"></i></a>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <div class="form-group col-sm d-flex flex-column justify-content-end">
                                                        <div class="form-check">
                                                            <input type="checkbox" class="form-check-input" id="chkPublicBookingAlertMeWithSMS">
                                                            <label class="form-check-label" for="chkPublicBookingAlertMeWithSMS">
                                                                Ko se stranka naroči, me obvesti prek SMS
                                                                <a href="#!" data-toggle="popover" data-content="Ko si bo stranka izbrala termin, boste oveščeni prek SMS, da  boste termin lahko čimprej potrdili.(SMS bo poslan na telefon naveden zgoraj.)"><i class="fa fa-info-circle"></i></a>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <div class="form-group col-sm d-flex flex-column justify-content-end">
                                                        <div class="form-check">
                                                            <input type="checkbox" class="form-check-input" id="chkPublicBookingAuthorizeAfterSlotSelection">
                                                            <label class="form-check-label" for="chkPublicBookingAuthorizeAfterSlotSelection">
                                                                Prijava stranke šele po izbiri termina
                                                                <a href="#!" data-toggle="popover" data-content="Stranka se bo morala prijaviti (s pinom prejetim prek sms) šele po izbiri prostega termina. (Vsakdo bo lahko videl storitve in proste termine!)"><i class="fa fa-info-circle"></i></a>
                                                            </label>
                                                        </div>
                                                    </div>
                                                    <div class="form-group col-sm d-flex flex-column justify-content-end">
                                                        <div class="form-check">
                                                            <input type="checkbox" class="form-check-input" id="chkPublicBookingClientDataIsMandatory">
                                                            <label class="form-check-label" for="chkPublicBookingClientDataIsMandatory">
                                                                Obvezen vnos podatkov o stranki 
                                                                <a href="#!" data-toggle="popover" data-content="Stranka bo morala obvezno vnest svoje podatke (ime, priimek in naslov)"><i class="fa fa-info-circle"></i></a>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>
                                                 <div class="form-group">
                                                    <label for="txtPublicBookingTOS" class="control-label">Splošni pogoji naročanja:
                                                    <a href="#!" data-toggle="popover" data-content="Vpišite svoje splošne pogoje za samostojno naročanje (Če pustite prazno, pogoji ne bodo prikazani!)"><i class="fa fa-info-circle"></i></a>
                                                    </label>
                                                    <div class="col-sm-10">
                                                        <input class="form-control" id="txtPublicBookingTOS" placeholder="" value="">
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="txtPublicBookingCSS" class="control-label">CSS za napredno oblikovanje strani
                                                    <a href="#!" data-toggle="popover" data-content="Vpišite css za napredno oblikovanje strani (Mora vsebovat <style></style>)"><i class="fa fa-info-circle"></i></a>
                                                    </label>
                                                    <div class="col-sm-10">
                                                        <input class="form-control" id="txtPublicBookingCSS"  placeholder="" value="">
                                                    </div>
                                                </div>
                                        </form>

                                        <div class="form-group">
                                            <div class="col-sm-offset-2 col-sm-10">
                                                <button class="btn btn-default" onclick="saveGeneral()">Shrani</button>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="tab-pane fade" id="timetable" role="tabpanel" aria-labelledby="timetable-tab">
                                        <div class="card">
                                            <!-- /.card-header -->
                                            <div class="card-body p-0">
                                                <div id='wcalendar'></div>
                                                <form id="formSchedule" name="formSchedule" class="form-horizontal" style="display: none">
                                                    <table class="table-vcenter table-sm">
                                                        <tbody>
                                                            <tr>
                                                                <td>Ponedeljek</td>
                                                                <td><input id="Mo_from" name="Mo_from" class="form-control" placeholder="8:00" value="@Html.Raw(@Model.Location.Schedule.MondayStart.ToString("HH:mm"))"></td>
                                                                <td><input id="Mo_to" name="Mo_to" class="form-control" placeholder="20:00" value="@Html.Raw(@Model.Location.Schedule.MondayEnd.ToString("HH:mm"))"></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Torek</td>
                                                                <td><input id="Tu_from" name="Tu_from" class="form-control" placeholder="8:00" value="@Html.Raw(@Model.Location.Schedule.TuesdayStart.ToString("HH:mm"))"></td>
                                                                <td><input id="Tu_to" name="Tu_to" class="form-control" placeholder="20:00" value="@Html.Raw(@Model.Location.Schedule.TuesdayEnd.ToString("HH:mm"))"></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Sreda</td>
                                                                <td><input id="We_from" name="We_from" class="form-control" placeholder="8:00" value="@Html.Raw(@Model.Location.Schedule.WednesdayStart.ToString("HH:mm"))"></td>
                                                                <td><input id="We_to" name="We_to" class="form-control" placeholder="20:00" value="@Html.Raw(@Model.Location.Schedule.WednesdayEnd.ToString("HH:mm"))"></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Četrtek</td>
                                                                <td><input id="Th_from" name="Th_from" class="form-control" placeholder="8:00" value="@Html.Raw(@Model.Location.Schedule.ThursdayStart.ToString("HH:mm"))"></td>
                                                                <td><input id="Th_to" name="Th_to" class="form-control" placeholder="20:00" value="@Html.Raw(@Model.Location.Schedule.ThursdayEnd.ToString("HH:mm"))"></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Petek</td>
                                                                <td><input id="Fr_from" name="Fr_from" class="form-control" placeholder="8:00" value="@Html.Raw(@Model.Location.Schedule.FridayStart.ToString("HH:mm"))"></td>
                                                                <td><input id="Fr_to" name="Fr_to" class="form-control" placeholder="20:00" value="@Html.Raw(@Model.Location.Schedule.FridayEnd.ToString("HH:mm"))"></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Sobota</td>
                                                                <td><input id="Sa_from" name="Sa_from" class="form-control" placeholder="8:00" value="@Html.Raw(@Model.Location.Schedule.SaturdayStart.ToString("HH:mm"))"></td>
                                                                <td><input id="Sa_to" name="Sa_to" class="form-control" placeholder="20:00" value="@Html.Raw(@Model.Location.Schedule.SaturdayEnd.ToString("HH:mm"))"></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Nedelja</td>
                                                                <td><input id="Su_from" class="form-control" placeholder="8:00" value="@Html.Raw(@Model.Location.Schedule.SundayStart.ToString("HH:mm"))"></td>
                                                                <td><input id="Su_to" class="form-control" placeholder="20:00" value="@Html.Raw(@Model.Location.Schedule.SundayEnd.ToString("HH:mm"))"></td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </form>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-sm-offset-2 col-sm-10">
                                                    <button class="btn btn-default" onclick="saveSchedule()">Shrani</button>
                                                </div>
                                            </div>
                                            <!-- /.card-body -->
                                        </div>
                                    </div>

                                    <div class="tab-pane fade" id="workplace" role="tabpanel" aria-labelledby="workplaces-tab">
                                        <div class="card">
                                            <!-- /.card-header -->
                                            <div class="card-body p-0">
                                                <div class="col-12">
                                                    <div class="table-responsive">
                                                        <table id="dtWorkplaces" class="table table-striped table-bordered" width="100%">
                                                            <thead>
                                                                <tr>
                                                                    <th>
                                                                        #
                                                                    </th>
                                                                    <th>
                                                                        Naziv
                                                                    </th>
                                                                    <th>
                                                                        Google koledar
                                                                    </th>
                                                                    <th>
                                                                        Aktivno
                                                                    </th>
                                                                    <th>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                            </tbody>
                                                        </table>
                                                        <button type="button" id="cmdAdd" onclick="cmdAdd_Click();" class="btn btn-primary btn-lg">
                                                            Dodaj
                                                        </button>
                                                    </div>
                                                </div>

                                            </div>

                                            <!-- /.card-body -->
                                        </div>
                                    </div>
                                    <!-- /.tab-pane service groups -->
                                    <div class="tab-pane fade" id="servicegroups" role="tabpanel" aria-labelledby="servicegroups-tab">
                                    <div class="card">
                                        <!-- /.card-header -->
                                        <div class="card-body p-0">
                                            <div class="col-12">
                                                <div class="table-responsive">
                                                    <table id="dtServiceGroups" class="table table-striped table-bordered" width="100%">
                                                        <thead>
                                                            <tr>
                                                                <th>
                                                                    #
                                                                </th>
                                                                <th>
                                                                    Naziv
                                                                </th>
                                                                 <th>
                                                                    Barva
                                                                </th>
                                                                <th>
                                                                    Aktivno
                                                                </th>
                                                                <th>
                                                                </th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                        </tbody>
                                                    </table>
                                                    <button type="button" id="cmdServiceGroupAdd" onclick="cmdServiceGroupAdd_Click();" class="btn btn-primary btn-lg">
                                                        Dodaj
                                                    </button>
                                                </div>
                                            </div>

                                        </div>
                                        <!-- /.card-body -->
                                    </div>
    
                                </div>
                                <!-- /.tab-pane services -->
                                    <div class="tab-pane fade" id="services" role="tabpanel" aria-labelledby="services-tab">
                                        <div class="card">
                                            <!-- /.card-header -->
                                            <div class="card-body p-0">
                                                <div class="col-12">
                                                    <div class="table-responsive">
                                                        <table id="dtServices" class="table table-striped table-bordered" width="100%">
                                                            <thead>
                                                                <tr>
                                                                    <th>
                                                                        Skupina
                                                                    </th>
                                                                    <th>
                                                                        Naziv
                                                                    </th>
                                                                    <th>
                                                                        Trajanje
                                                                    </th>
                                                                    <th>
                                                                        Barva
                                                                    </th>
                                                                    <th>
                                                                        Samostojno naročanje
                                                                        <a href="#!" data-toggle="popover" data-content="Storitev je na voljo pri samostojnem naročanju strank."><i class="fa fa-info-circle"></i></a>
                                                                    </th>
                                                                    <th>
                                                                        Aktivno
                                                                    </th>
                                                                    <th>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                            </tbody>
                                                        </table>
                                                        <button type="button" id="cmdServiceAdd" onclick="cmdServiceAdd_Click();" class="btn btn-primary btn-lg">
                                                            Dodaj
                                                        </button>
                                                    </div>
                                                </div>

                                            </div>


                                            <!-- /.card-body -->
                                        </div>
                                        <div id="ServiceLength" class="form-group">
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input" type="radio" id="customRadio1" name="customRadio" onchange="SaveRadio(1);" checked="">
                                                <label for="customRadio1" class="custom-control-label">Pri naročanju uporabi trajanje najdaljše storitve</label>
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input" type="radio" id="optAppointmentsSumServicesLength" name="customRadio" onchange="SaveRadio(2);">
                                                <label for="optAppointmentsSumServicesLength" class="custom-control-label">Pri naročanju seštej trajanje storitev</label>
                                            </div>

                                        </div>
                                    </div>
                                    <!-- /.tab-pane sms -->
                                    <div class="tab-pane" id="sms" role="tabpanel" aria-labelledby="sms-tab">
                                        <form id="formSMS" class="form-horizontal" name="formSMS">
                                            <div class="form-group">
                                                <label for="SMS_SenderName" class="col-sm-2 control-label">
                                                    Ime pošiljatelja
                                                    <a href="#!" data-toggle="popover" data-html="true" data-content="Privzeto bo sms sporočilo za uporabnika prišlo iz številke 2929. <br/>Lahko se dogovorite za besedo do 11 znakov ali uporabite poljubno telefonsko številko."><i class="fa fa-info-circle"></i></a>
                                                </label>
                                                <div class="col-sm-10">
                                                    <input type="text" class="form-control" id="SMS_SenderName" placeholder="2929" value="">
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label id="lblMessage" for="SMS_GOO_Msg" class="col-sm-2 control-label">
                                                    Sporočilo:
                                                    <a href="#!" data-toggle="popover" data-content="Sms sporočilo. Kode (<DANESJUTRI>, <DATUM>, ...) bodo zamenjane z dejanskimi vrednostmi pred pošiljanjem."><i class="fa fa-info-circle"></i></a>
                                                </label>
                                                <div class="row">
                                                    <div class="col-sm-10">
                                                        <textarea rows="2" id="SMS_GOO_Msg" name="SMS_GOO_Msg" class="form-control" placeholder="Pozdravljeni naročeni ste..." oninput="showSMSInfo(this.value,'lblGOO_MsgSMSinfo')"></textarea>
                                                            <label id="lblGOO_MsgSMSinfo" class="form-check-label">
                                                            [Pri pošiljanju se sporočilo lahko razdeli na več delov!]
                                                            <a href="#!" data-toggle="popover" data-content="Sporočilo se pri pošiljanju razdeli na dele dolge 160 znakov, če pa vsebuje šumnike ali posebne znake pa na dele dolge 67 znakov. Limit se porablja glede na število poslanih delov. Če želite prihraniti limit, naj bodo vaša sporočila kratka in brez šumnikov in posebnih znakov."><i class="fa fa-info-circle"></i></a>
                                                            </label>
                                                        </div>
                                                    <div class="col-sm-2">
                                                        <button type="button" class="btn btn-info" onclick="resetSMSText()">Privzeto sporočilo</button>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group col-sm-6 d-flex flex-column justify-content-end">
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input" id="SMS_genGOOsms" onclick="$('#SMS_GOO_Props').toggle(1000);">
                                                    <label class="form-check-label" for="SMS_genGOOsms">Generiraj sporočila iz naročil</label>
                                                </div>
                                            </div>

                                            <div id="SMS_GOO_Props" style="display: none;" class="ml-4">
                                                <div class="row">
                                                    <div class="form-group row">
                                                        <label for="SMS_GOO_Time" class="col-sm-2 control-label pt-2">Ob:</label>
                                                        <div class="col-sm-5">
                                                            <input type="text" class="form-control" id="SMS_GOO_Time" name="SMS_GOO_Time" placeholder="8:00" value="">
                                                        </div>
                                                    </div>
                                                    <div class="form-group mt-auto">
                                                        <div class="custom-control custom-radio ">
                                                            <input class="custom-control-input" type="radio" id="rbGOODayCurrent" name="rbForDay">
                                                            <label for="rbGOODayCurrent" class="custom-control-label ">za tekoči dan</label>
                                                        </div>
                                                        <div class="custom-control custom-radio ">
                                                            <input class="custom-control-input" type="radio" id="rbGOODayNext" name="rbForDay">
                                                            <label for="rbGOODayNext" class="custom-control-label ">za naslednji dan</label>
                                                        </div>

                                                    </div>
                                                </div>
                                                <div id="goo-cals" class="form-group">
                                                    <label for="SMS_SenderName" class="col-sm-2 control-label pl-0">Za koledarje:</label>
                                                    @foreach (var item in Model.GoogleCalendars)
                                                    {
                                                        <div class="form-check">
                                                            <label class="form-check-label">
                                                                <input type="checkbox" class="form-check-input goocal" value="@item.Key">@Html.Raw(item.Value)
                                                            </label>
                                                        </div>
                                                    }
                                                </div>

                                                <div class="form-group col-sm-6 d-flex flex-column justify-content-end">
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" id="SMS_GOO_AutoApprove">
                                                        <label class="form-check-label" for="SMS_GOO_AutoApprove">
                                                            Pred pošiljanjem želim sporočila pregledati in potrditi pošiljanje
                                                            <a href="#!" data-toggle="popover" data-content="Uro pred pošiljanjem sms boste po el. pošti prejeli seznam sms sporočil, ki jih boste lahko potrdili ali preklicali."><i class="fa fa-info-circle"></i></a>
                                                        </label>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="form-group col-sm-6 d-flex flex-column justify-content-end">
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input" id="SMS_AppointmentSMS">
                                                    <label class="form-check-label" for="SMS_AppointmentSMS">
                                                        Obvesti stranko ob vpisu naročila
                                                        <a href="#!" data-toggle="popover" data-content="Ob vpisu ali premiku naročila pošlje stranki sms s terminom"><i class="fa fa-info-circle"></i></a>
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="form-group col-sm-6 d-flex flex-column justify-content-end">
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input" id="SMS_genRDsms" onclick="$('#SMS_RD_Props').toggle(1000);">
                                                    <label class="form-check-label" for="SMS_genRDsms">Generiraj sporočila za rojstni dan stranke</label>
                                                </div>
                                            </div>
                                            <div id="SMS_RD_Props" style="display: none;" class="ml-4">
                                                <div class="form-group">
                                                    <label for="SMS_RD_Time" class="col-sm-2 control-label">Ob:</label>
                                                    <div class="col-sm-10">
                                                        <input type="text" class="form-control" id="SMS_RD_Time" placeholder="8:00" value="">
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label id="lblMessage" for="SMS_RD_Msg" class="col-sm-2 control-label">Sporočilo:</label>
                                                    <div class="row">
                                                        <div class="col-sm-10">
                                                            <textarea rows="2" id="SMS_RD_Msg" name="SMS_RD_Msg" class="form-control" placeholder="Voščilo..." oninput="showSMSInfo(this.value,'lblRD_MsgSMSinfo')"></textarea>
                                                            <label id="lblRD_MsgSMSinfo" class="form-check-label">
                                                                [Pri pošiljanju se sporočilo lahko razdeli na več delov!]
                                                                <a href="#!" data-toggle="popover" data-content="Sporočilo se pri pošiljanju razdeli na dele dolge 160 znakov, če pa vsebuje šumnike ali posebne znake pa na dele dolge 67 znakov. Limit se porablja glede na število poslanih delov. Če želite prihraniti limit, naj bodo vaša sporočila kratka in brez šumnikov in posebnih znakov."><i class="fa fa-info-circle"></i></a>
                                                                </label>
                                                            </div>
                                                        <div class="col-sm-2">
                                                            <button type="button" class="btn btn-info" onclick="resetRDSMSText()">Privzeto sporočilo</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>                                            
                                            <div class="form-group">
                                                <div class="col-sm-offset-2 col-sm-10">
                                                    <button type="button" class="btn btn-danger" onclick="saveSMS()">Shrani</button>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                    <!-- /.tab-pane sms-->
                                </div>
                            </div>
                            <!-- /.card -->
                        </div>

                    </div>
                </div>

                <div class="clearfix"></div>
            </div>
        </div>

    </div>
    <br />

    </div>
</div>
<!-- /page content -->
<!-- Workplace modal content-->
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Delovno mesto</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="formWorkplace" class="formWorkplace" name="formWorkplace">
                    <div class="form-group">
                        <label for="txtPosition">
                            Pozicija:
                        </label>
                        <input type="text" id="txtPosition" name="txtPosition" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="txtName">
                            Ime/Naziv:
                        </label>
                        <input type="text" id="txtName" name="txtName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="cboGooCal">
                            Google koledar:
                        </label>
                        <select id="cboGooCal" name="cboGooCal" class="selectpicker custom-select custom-select-sm form-control">
                            <option value="0">[Create new calendar]</option>
                            @foreach (var item in Model.GoogleCalendars)
                            {
                                <option value="@item.Key">@Html.Raw(item.Value)</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="cbWPActive" value="true" checked="">
                            <span class="custom-control-label">Aktivno</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdDelete">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdSave">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->
<!-- modal new service group content-->
<div id="ServiceGroupModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="ServiceGroupModalLabel">Storitev</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="formServiceGroup" class="formServiceGroup" name="formServiceGroup">
                    <div class="form-group">
                        <label for="txtServiceGroupSortPosition">
                            Pozicija: 
                        </label>
                        <input id="txtServiceGroupSortPosition" type="number" pattern="[0-9.]+" name="txtServiceGroupSortPosition" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="txtServiceGroupName">
                            Naziv:
                        </label>
                        <input type="text" id="txtServiceGroupName" name="txtServiceGroupName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Barva:
                        <a href="#!" data-toggle="popover" data-content="Tako se bodo obarvala naročila s storitvami v tej skupini. Če barva ni določena se naročila obarvajo z barvo storitve (če je določena)."><i class="fa fa-info-circle"></i></a>
                        </label>
                        <div id="cpServiceGroupColor" class="input-group">
                            <input type="text" class="form-control">
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="fas fa-square"></i></span>
                            </div>
                        </div>
                        <!-- /.input group -->
                    </div>
                    <div class="form-group">
                        <label class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="cbServiceGroupActive" value="true" checked="">
                            <span class="custom-control-label">Aktivno</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdServiceGroupDelete">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdServiceGroupSave">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->
<!-- modal new service content-->
<div id="ServiceModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="ServiceModalLabel">Storitev</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="formService" class="formService" name="formService">
                    <div class="form-group">
                        <label for="txtServiceName">
                            Naziv:
                        </label>
                        <input type="text" id="txtServiceName" name="txtServiceName" class="form-control" />
                    </div>
                    <div class="row">
                    <div class="form-group col-6 d-flex flex-column justify-content-end">
                        <label for="txtServiceMinutes">
                            Trajanje (v minutah):
                        </label>
                        <input id="txtServiceMinutes" type="number" pattern="[0-9.]+" name="txtServiceMinutes" class="form-control" />
                    </div>
                    <div class="form-group col-6 d-flex flex-column justify-content-end">
                        <label for="txtServiceOffset">
                            Zamik (v minutah):
                            <a href="#!" data-toggle="popover" data-content="Za koliko zamakne pričetek vsakega prostega termina za to storitev. Če zamik ni določen, se prosti termini zamikajo na 30 minut."><i class="fa fa-info-circle"></i></a>
                        </label>
                        <input id="txtServiceOffset" type="number" pattern="[0-9.]+" name="txtServiceOffset" class="form-control" />
                    </div>
                    </div>
                    <div class="form-group">
                        <label for="txtPriceDescription">
                            Cena ali opis:
                            <a href="#!" data-toggle="popover" data-content="Ta cena/opis bo prikazan pri storitvi pri samostojnem naročanju stranke."><i class="fa fa-info-circle"></i></a>
                        </label>
                        <input type="text" id="txtPriceDescription" name="txtPriceDescription" class="form-control" maxlength="50" />
                    </div>
                    <div class="form-group">
                        <label>Barva:
                        <a href="#!" data-toggle="popover" data-content="Tako se bodo obarvala naročila s to storitvijo. Če barva ni določena se naročila obarvajo z barvo skupine (če je določena)."><i class="fa fa-info-circle"></i></a>
                        </label>
                        <div id="cpServiceColor" class="input-group">
                            <input type="text" class="form-control">
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="fas fa-square"></i></span>
                            </div>
                        </div>
                        <!-- /.input group -->
                    </div>
                    <div class="form-group">
                        <label for="cboServiceGroup">
                            Skupina:
                        </label>
                        <select id="cboServiceGroup" name="cboServiceGroup" class="selectpicker custom-select custom-select-sm form-control">
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="cbUsedInClientBooking" value="true" checked="">
                            <span class="custom-control-label">Uporabi za samostojno naročanje</span>
                            <a href="#!" data-toggle="popover" data-content="Storitev bo na voljo pri samostojnem naročanju strank."><i class="fa fa-info-circle"></i></a>
                        </label>
                    </div>
                    <div class="form-group">
                        <label class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="cbActive" value="true" checked="">
                            <span class="custom-control-label">Aktivno</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdServiceDelete">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdServiceSave">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->

<!-- modal WorkplaceServices content-->
<div id="WorkplaceServicesModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="ServiceModalLabel">Storitve delovnega mesta</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <div class="formService" id="WorkplaceServices" style="height: 70vh; overflow-y: auto; ">
                   
                    
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <div class="float-left">
                <button type="button" class="btn btn-default" id="cmdServiceDisableAll" onclick="ChangeWPSChecks(false);">Onemogoči vse</button>
                <button type="button" class="btn btn-default" id="cmdServiceEnableAll" onclick="ChangeWPSChecks(true);">Omogoči vse</button>
                </div>
                    <button type="button" class="btn btn-primary" id="cmdsaveWPExcludedServices" onclick="saveWPExcludedServices()">Shrani</button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->

    <!-- Timetable modal content-->
<div id="TimetableModal" class="modal fade" data-keyboard="true" tabindex='-1' role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="TimetableModalLabel">Urnik</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body ui-front">
                <form id="formEvent" class="formEvent" name="formEvent">
                    
                    <div class="form-row">
                        <div class="form-group pr-2 col-9 ">
                            <label for="txtStartTime">
                                Od (ura):
                            </label>
                            <input type="text" id="txtStartTime" name="txtStartTime" class="form-control " />
                        </div>
                        <div class="form-group col-3 ">
                            <label for="txtEndTime">
                                Do (ura):
                            </label>
                            <div class="input-group  p-0">
                                <input type="text" id="txtEndTime" name="txtEndTime" class="form-control " />
                            </div>
                        </div>
                    </div>
                    
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdTimetableDelete">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdTimetableSave">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->

@section scripts{
    <!-- datables.net -->
    <script src="~/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>
    <script src="~/plugins/bootstrap-select/js/bootstrap-select.min.js"></script>
    <script src="~/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js"></script>
    <script src="~/plugins/sms-counter/sms_counter.min.js"></script>
    <script src="~/plugins/js-qrcode/qrcode.web.js"></script>
    <script src="~/plugins/share-api-polyfill/share-min.js"></script>
    
    <script src="~/plugins/flatpickr/flatpickr.min.js"></script>
    <script src="~/plugins/flatpickr/plugins/confirmDate/confirmDate.js"></script>
    <script src="~/plugins/dayjs/dayjs.min.js"></script>
    <script src="~/plugins/dayjs/plugin/utc.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_utc)</script>
    <script src="~/plugins/dayjs/plugin/localizedFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localizedFormat);</script>
    <script src="~/plugins/dayjs/plugin/localeData.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_localeData)</script>
    <script src="~/plugins/dayjs/plugin/customParseFormat.js"></script>
    <script>dayjs.extend(window.dayjs_plugin_customParseFormat)</script>

    <script src='~/lib/fullcalendar-scheduler-5.10.1/lib/main.js'></script>
    <script src='~/lib/fullcalendar-scheduler-5.10.1/lib/rrule.min.js'></script>
    <script src='~/lib/fullcalendar-scheduler-5.10.1/lib/main.global.min.js'></script>
    <script src="~/plugins/shepherdjs/shepherd.min.js"></script>
    <script src="~/plugins/summernote/summernote-bs4.min.js"></script>


    <script type="text/javascript">

        var wcalendar;
        var workplacesLoaded=false;
        var servicegroupsLoaded=false;
        var servicesLoaded=false;
        @await Html.PartialAsync("_ApiAccess")
        @await Html.PartialAsync("_GooApiAccess")

            var isFullScreen = false;
            function goFullScreen(p_ElementId) {

                var elem = document.getElementById(p_ElementId);

                if (elem.requestFullscreen) { elem.requestFullscreen(); }
                else if (elem.mozRequestFullScreen) { elem.mozRequestFullScreen(); }
                else if (elem.webkitRequestFullscreen) { elem.webkitRequestFullscreen(); }
                else if (elem.msRequestFullscreen) { elem.msRequestFullscreen(); }
                isFullScreen = true;
            }
            function exitFullScreen(){

                if(document.exitFullscreen){ document.exitFullscreen(); }
                else if(document.mozCancelFullScreen){ document.mozCancelFullScreen(); }
                else if(document.webkitExitFullscreen){ document.webkitExitFullscreen();}
                else if(document.msExitFullscreen){ document.msExitFullscreen();}
                isFullScreen = false;
            }

        $.validator.addMethod( "time", function( value, element ) {
	        return  /^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test( value );
        }, "Vnesite veljaven čas npr. 8:30 ali 17:45" );

        $.validator.addMethod("greaterThan",
        function (value, element, param) {
              var $otherElement = $(param);
              return (new Date("01/01/0001 "+value) >= new Date("01/01/0001 "+$otherElement.val()));
        }, "Konec mora biti večji od začetka.");

             async function loadScript(src) {
                return new Promise(function (resolve, reject) {
                    const s = document.createElement('script');
                    let r = false;
                    s.type = 'text/javascript';
                    s.src = src;
                    s.async = true;
                    s.onerror = function (err) {
                        reject(err, s);
                    };
                    s.onload = s.onreadystatechange = function () {
                        // console.log(this.readyState); // uncomment this line to see which ready states are called.
                        if (!r && (!this.readyState || this.readyState == 'complete')) {
                            r = true;
                            resolve();
                        }
                    };
                    const t = document.getElementsByTagName('script')[0];
                    t.parentElement.insertBefore(s, t);
                });
            }
         async function loadLocale(lang) {
            return new Promise(function (resolve, reject) {
                console.info("loadLocale:", lang);

                if (lang != "en") {
                    loadScript("/lib/fullcalendar-scheduler-5.10.1/lib/locales/" + navigator.language.slice(0, 2) + ".js").then(resolve());
                } else { resolve(); }
            });
        }

        $(document).ready(function () {
            loadGeneral();
            $('#txtPublicBookingTOS').summernote();
            //swal inside modal!
            $.fn.modal.Constructor.prototype._enforceFocus = function() {};
            //gapi init
            initializeGapi().catch((err) => { toastr.error("Napaka pri komunikaciji z Googlom!\nPoskusite se odjaviti in ponovno prijaviti."); });
            //bind cboLocations
            $("#cboLocations").val( @Html.Raw(@Model.Location.Id));
            $("#cboLocations").off('change').change(function (evt) {
                window.location = "../location/"+$(this).val();
            });

            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                 if (e.target.id == "workplaces-tab" && workplacesLoaded == false) { GetWorkplacesTable(); workplacesLoaded = true;}
                 if (e.target.id == "servicegroups-tab" && servicegroupsLoaded == false) { loadServiceGroupsTab();}
                 if (e.target.id == "services-tab" && servicesLoaded == false) { loadServicesTab();}
                 if (e.target.id == "timetable-tab" ) { wcalendar.render();}
            });


            $('#formGeneral').validate({
                rules: {
                    inputName: {
                        minlength: 3,
                        maxlength: 50,
                        required: true
                    }
                },
                messages: {
                    inputName: "Invalid name!"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });

            $('#formSchedule').validate({
                rules: {
                    Mo_from: { time: true },
                    Mo_to: { time: true, greaterThan: "#Mo_from" },
                    Tu_from: { time: true },
                    Tu_to: { time: true, greaterThan: "#Tu_from" },
                    We_from: { time: true },
                    We_to: { time: true, greaterThan: "#We_from" },
                    Th_from: { time: true },
                    Th_to: { time: true, greaterThan: "#Th_from" },
                    Fr_from: { time: true },
                    Fr_to: { time: true, greaterThan: "#Fr_from" },
                    Sa_from: { time: true },
                    Sa_to: { time: true, greaterThan: "#Sa_from" },
                    Su_from: { time: true },
                    Su_to: { time: true, greaterThan: "#Su_from" },
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.appendTo(element.parent('.input-group'));
                    } else {
                        if (element.parent('.mojgroup').length) {
                            error.appendTo(element.parent('.mojgroup'));
                        } else { error.insertAfter(element); }
                    }
                }
            });

            $('#formWorkplace').validate({
                rules: {
                    txtName: {
                        minlength: 3,
                        maxlength: 50,
                        required: true
                    }
                },
                messages: {
                    txtName: "Invalid name!"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });

            $('#formSMS').validate({
                rules: {
                    SMS_GOO_Time: { time: true }
                },
                messages: {
                    txtName: "Neveljavna ura!"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });

            $('#formServiceGroup').validate({
                    rules: {
                        txtServiceGroupName: {
                            minlength: 3,
                            maxlength: 150,
                            required: true
                        }
                    },
                    messages: {
                        txtServiceGroupName: "Neveljavno ime!"
                    },
                    highlight: function (element) {
                        $(element).closest('.form-control').addClass('is-invalid');
                    },
                    unhighlight: function (element) {
                        $(element).closest('.form-control').removeClass('is-invalid');
                    },
                    errorElement: 'span',
                    errorClass: 'invalid-feedback',
                    errorPlacement: function (error, element) {
                        if (element.parent('.input-group').length) {
                            error.insertAfter(element.parent());
                        } else { error.insertAfter(element); }
                    }
                });
            $('#formService').validate({
                    rules: {
                        txtServiceName: {
                            minlength: 3,
                            maxlength: 150,
                            required: true
                        }
                    },
                    messages: {
                        txtServiceName: "Neveljavno ime!"
                    },
                    highlight: function (element) {
                        $(element).closest('.form-control').addClass('is-invalid');
                    },
                    unhighlight: function (element) {
                        $(element).closest('.form-control').removeClass('is-invalid');
                    },
                    errorElement: 'span',
                    errorClass: 'invalid-feedback',
                    errorPlacement: function (error, element) {
                        if (element.parent('.input-group').length) {
                            error.insertAfter(element.parent());
                        } else { error.insertAfter(element); }
                    }
                });

            $('#cboGooCal').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
                var selected = $(e.currentTarget).val();
                if (selected == "0" && isSelected==true) { addGooCalendar();}
            });

            $('#myModal').on('hidden.bs.modal', function (e) {
                CancelModal();
            });
            $('#ServiceGroupModal').on('hidden.bs.modal', function (e) {
                CancelServiceGroupModal();
            });
            $('#ServiceModal').on('hidden.bs.modal', function (e) {
                CancelServiceModal();
            });

            //sms
            loadSMS();

            //count message characters
            document.getElementById('SMS_RD_Msg').onkeyup = function () {
                document.getElementById('lblMessage').innerHTML = "Sporočilo (" + (640 - this.value.length)+"/640):";
            };
            //sms end

            //service color - color picker with addon
            $('#cpServiceColor').colorpicker({useAlpha: false,useHashPrefix: false,autoInputFallback:false})

            $('#cpServiceColor').on('colorpickerChange', function(event) {
                if (event.color != null) { $('#cpServiceColor .fa-square').removeClass('far').addClass('fas').css('color', event.color.toString()); }
                else { $('#cpServiceColor .fa-square').removeClass('fas').addClass('far'); $('#cpServiceColor .form-control').val(''); }
            })
            //service group color
            $('#cpServiceGroupColor').colorpicker({useAlpha: false,useHashPrefix: false,autoInputFallback:false})

            $('#cpServiceGroupColor').on('colorpickerChange', function(event) {
                if (event.color != null) { $('#cpServiceGroupColor .fa-square').removeClass('far').addClass('fas').css('color', event.color.toString()); }
                else { $('#cpServiceGroupColor .fa-square').removeClass('fas').addClass('far'); $('#cpServiceGroupColor .form-control').val(''); }
            })

            //init popovers
            $('[data-toggle="popover"]').popover({ trigger: "click hover" });

            $('#inputPublicBookingToken').on('keyup', function () {showQRCode(); });
            //show qrcode
            showQRCode();

                loadLocale(navigator.language.slice(0, 2))
                .then(function () {
                    wcalendar = new FullCalendar.Calendar(document.getElementById('wcalendar'), {
                        locale: navigator.language.slice(0, 2), eventResizableFromStart: true,
                        eventDisplay: 'block',
                        eventOverlap: false,
                        selectOverlap: false,
                        headerToolbar: {
                            left: '',
                            center: '',
                            right: 'save fullscreen'
                        },
                        
                        themeSystem: 'bootstrap',
                        stickyFooterScrollbar: true,
                        initialView: 'resourceTimeGridDay',
                        //initialDate: 'today',
                        slotMinTime: "@Html.Raw(Model.Location.Schedule.minTime())", //"7:00:00",
                        slotMaxTime: "@Html.Raw(Model.Location.Schedule.maxTime())", //"21:00:00",
                        slotDuration: '00:30:00',
                        allDaySlot: false,
                        //scrollTime: getScrollTime(), //"8:00:00",
                        slotLabelFormat: {
                            hour: 'numeric',
                            hour12: false,
                            minute: '2-digit',
                            omitZeroMinute: true,
                            meridiem: false
                        },
                        slotLabelInterval: "00:30",
                        height:'auto',
                        dayMinWidth:100,
                        expandRows: true,
                        editable: true,
                        selectable: true,
                        dayMaxEvents: true, // allow "more" link when too many events
                        //dayMinWidth: 200,
                        customButtons: {
                            fullscreen: {
                                click: function () {
                                    if (isFullScreen) { exitFullScreen(); } else { goFullScreen('fs'); }
                                }
                            },
                            save: {
                                text: 'Shrani',
                                click: function () {
                                    saveSchedule();
                                }
                            }
                        },
                        resourceOrder: 'order',
                        resources: [

                            @for (int j = 1; j < 8; j++)
                            {
                                var i = j % 7;
                                FullCalendar.Resource myResource = new FullCalendar.Resource(i.ToString(),j,CultureInfo.CurrentCulture.DateTimeFormat.DayNames[i],"blue");
                                FullCalendar.businessHours myBH;
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.SundayStart.ToString("HH:mm"), Model.Location.Schedule.SundayEnd.ToString("HH:mm"), new int[]{0});
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.MondayStart.ToString("HH:mm"), Model.Location.Schedule.MondayEnd.ToString("HH:mm"), new int[]{1});
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.TuesdayStart.ToString("HH:mm"), Model.Location.Schedule.TuesdayEnd.ToString("HH:mm"), new int[]{2});
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.WednesdayStart.ToString("HH:mm"), Model.Location.Schedule.WednesdayEnd.ToString("HH:mm"), new int[]{3});
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.ThursdayStart.ToString("HH:mm"), Model.Location.Schedule.ThursdayEnd.ToString("HH:mm"), new int[]{4});
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.FridayStart.ToString("HH:mm"), Model.Location.Schedule.FridayEnd.ToString("HH:mm"), new int[]{5});
                                myResource.businessHours.Add(myBH);
                                myBH = new FullCalendar.businessHours(Model.Location.Schedule.SaturdayStart.ToString("HH:mm"), Model.Location.Schedule.SaturdayEnd.ToString("HH:mm"), new int[]{6});
                                myResource.businessHours.Add(myBH);

                                @Html.Raw(myResource.ToJson()+",");
                            }

                        ],
                        events:@Html.Raw(Model.calWEvents),
                        eventTimeFormat: {
                            hour: "2-digit",
                            minute: "2-digit",
                            hour12: false
                        },
                        eventClick: function (info) {
                            showEvent(info);
                        },
                        eventDrop: function (info) {
                            //prevent drag/drop between "resources" (weekdays)
                            if (info.newResource != null) {
                                info.revert();
                            }

                        },

                        select: function (arg) {
                            if (typeof arg.resource === "undefined") {
                                //switch view
                                wcalendar.changeView("resourceTimeGridDay", arg.start);
                            } else {
                                //show new Event modal
                                newEvent(wcalendar, arg);
                            }


                        }
                    });
                    wcalendar.render();
                });



            $('#formEvent').validate({
                rules: {
                    txtStartTime: { time: true },
                    txtEndTime: { time: true, greaterThan: "#txtStartTime" },
                },
                messages: {
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });

            $("#TimetableModal").on('shown.bs.modal', function(){
                $(this).find('#txtStartTime').focus();

            });

            //$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            //    if (e.target.id = "general-tab") {wcalendar.render(); }
            //    if (e.target.id = "day-tab") {dcalendar.render(); }
            //});

            $('#TimetableModal').on('hidden.bs.modal', function (e) {
                CancelModal();
            });

            initPageTour();
        });

        function shareTheLink() {
            var pbhandle = $('#inputPublicBookingToken').val();
            if (pbhandle.length > 2) {
                navigator.share({
                    title: 'Spletno naročanje',
                    text: 'V salonu @Model.Location.Name se lahko naročite tudi prek spleta!',
                    url: 'https://kdajbi.si/narocanje/' + pbhandle,
                    hashtags: ['salon @Model.Location.Name', 'spletno naročanje', 'kdajbi.si', ]
                },
                    {
                        copy: true,
                        email: true,
                        print: true,
                        sms: true,
                        messenger: true,
                        facebook: true,
                        whatsapp: true,
                        twitter: true,
                        linkedin: true,
                        telegram: true,
                        skype: true,
                        language: 'sl'
                    });
            }
        }

        function showQRCode() {
            var pbt = $('#inputPublicBookingToken').val();
            if (pbt.length > 2) {
                const config = {
                    level: 'H', // use high error correction level
                    padding: 0, // do not use padding around qr code data
                    size: 100
                };
                const qrCanvas = new jsqrcode.QRCodeCanvas('https://KdajBi.si/narocanje/' + $('#inputPublicBookingToken').val(), config);
                const promise = qrCanvas.toDataUrl();
                document.getElementById("imgQR").src = promise;
            }
            else {
            document.getElementById("imgQR").src="";}
        }

        function SaveRadio(p_Opt) {
            saveSettings();
        }

        async function loadServiceGroupsTab() { GetServiceGroupsTable(); loadSettings(); servicegroupsLoaded = true; }
        async function loadServicesTab() { GetServicesTable(); loadSettings(); FillCboServiceGroups(); servicesLoaded = true; }

        async function loadSettings() {
            var settings = new Object();
            settings["AppointmentsSumServicesLength"] = 'false';

            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL+"/api/Settings/Load/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                     success: function (result) {
                         if (result["AppointmentsSumServicesLength"] != undefined) {
                             if (result["AppointmentsSumServicesLength"] == "true") { $('#optAppointmentsSumServicesLength').prop('checked', true);}
                         }

                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }

        function saveSettings() {
            var settings = new Object();
            settings["AppointmentsSumServicesLength"] = $("#optAppointmentsSumServicesLength").prop("checked");

            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL + "/api/Settings/Save/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranjeno"); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }

        async function CreateCalendar(p_name) {
            return new Promise(function (resolve, reject) {
                refreshGAPIToken().then(() => {
                    var request = gapi.client.calendar.calendars.insert({ "summary": p_name })
                        .execute(function (resp) {
                            if (typeof resp.error === "undefined") {
                                $("#cboGooCal").append($("<option />").val(resp.id).text(p_name));
                                $("#cboGooCal").selectpicker('refresh');
                                $("#cboGooCal").selectpicker('val', resp.id);
                                resolve(true);
                            }
                            else { reject(resp.error.message); }
                        });
                });

            });
        }


        //#region Location
        function saveGeneral() {
            if ($('#formGeneral').valid()) {
                var location={};
                location.id = @Model.Location.Id;
                location.name = $('#inputName').val();
                location.tel = $('#inputTel').val();
                location.address = $('#inputAddress').val();
                location.timetable = $('#inputTimetable').val();
                location.publicBookingToken = $('#inputPublicBookingToken').val();
                if (location.publicBookingToken.length < 3) { location.publicBookingToken = null; $('#inputPublicBookingToken').val(""); }
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(location),
                    url: apiURL+"/api/Location",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer '+result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                         if (result == "OK") { toastr.success("Shranjeno"); return true; }
                        else { toastr.error("Napaka:"+result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });
                //save public booking text
                var settings = new Object();
                settings["PublicBooking_Text"] = $("#txtPublicBookingText").val();
                settings["PublicBooking_MaxDays"] = $("#txtPublicBookingMaxDays").val();
                settings["PublicBooking_AllowCurrentDay"] = $("#chkPublicBookingAllowCurrentDay").prop("checked");
                settings["PublicBooking_AlertMeWithSMS"] = $("#chkPublicBookingAlertMeWithSMS").prop("checked");
                settings["PublicBooking_AuthorizeAfterSlotSelection"] = $("#chkPublicBookingAuthorizeAfterSlotSelection").prop("checked");
                settings["PublicBooking_ClientDataIsMandatory"] = $("#chkPublicBookingClientDataIsMandatory").prop("checked");

                if ($('#txtPublicBookingTOS').summernote('isEmpty'))
                    { settings["PublicBooking_TOS"] = "";}
                else 
                    {settings["PublicBooking_TOS"] = $('#txtPublicBookingTOS').summernote('code'); }

                settings["PublicBooking_CSS"] = $("#txtPublicBookingCSS").val();

                getAPIToken().then((result) => {
                    $.ajax({
                        type: "post",
                        data: JSON.stringify(settings),
                        url: apiURL + "/api/Settings/Save/" + $("#cboLocations").val(),
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") { toastr.success("Shranjeno"); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                });
            } else { return false; }
        }
        function loadGeneral() {
            var settings = new Object();
            settings["PublicBooking_Text"] = $("#txtPublicBookingText").val();
            settings["PublicBooking_MaxDays"] = $("#txtPublicBookingMaxDays").val();
            settings["PublicBooking_AllowCurrentDay"] = 'true';
            settings["PublicBooking_AlertMeWithSMS"] = 'true';
            settings["PublicBooking_AuthorizeAfterSlotSelection"] = 'false';
            settings["PublicBooking_ClientDataIsMandatory"] = 'false';
            settings["PublicBooking_TOS"] = $('#txtPublicBookingTOS').summernote('code');
            settings["PublicBooking_CSS"] = $("#txtPublicBookingCSS").val();

            getAPIToken().then((result) => {
            $.ajax({
                type: "post",
                data: JSON.stringify(settings),
                url: apiURL+"/api/Settings/Load/" + $("#cboLocations").val(),
                contentType: "application/json; charset=utf-8",
                headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                dataType: "json",
                 success: function (result) {
                     $("#txtPublicBookingText").val(result["PublicBooking_Text"]);
                     $("#txtPublicBookingMaxDays").val(result["PublicBooking_MaxDays"]);
                     if (result["PublicBooking_AllowCurrentDay"] != undefined) {
                        if (result["PublicBooking_AllowCurrentDay"] == "true") { $('#chkPublicBookingAllowCurrentDay').prop('checked', true);}
                     }
                    if (result["PublicBooking_AlertMeWithSMS"] != undefined) {
                        if (result["PublicBooking_AlertMeWithSMS"] == "true") { $('#chkPublicBookingAlertMeWithSMS').prop('checked', true);}
                    }
                    if (result["PublicBooking_AuthorizeAfterSlotSelection"] != undefined) {
                        if (result["PublicBooking_AuthorizeAfterSlotSelection"] == "true") { $('#chkPublicBookingAuthorizeAfterSlotSelection').prop('checked', true); }
                    }
                    if (result["PublicBooking_ClientDataIsMandatory"] != undefined) {
                            if (result["PublicBooking_ClientDataIsMandatory"] == "true") { $('#chkPublicBookingClientDataIsMandatory').prop('checked', true); }
                    }
                    $("#txtPublicBookingTOS").summernote('code', result["PublicBooking_TOS"]);
                    $("#txtPublicBookingCSS").val(result["PublicBooking_CSS"]);

                 },
                error: function (xhr, status, error) {
                    toastr.error("Napaka:" + error.toString());
                    return false;
                }
            });
            });
        }
        document.getElementById('inputPublicBookingToken').onkeyup = function () {
            if (this.value.length > 2)
            { document.getElementById('lblPublicBookingToken').innerHTML = "Samostojno naročanje bo omogočeno na povezavi <a href=' https://kdajbi.si/narocanje/' + (this.value) +' target='_blank'> https://kdajbi.si/narocanje/" + (this.value) + "</a>"; }
            else
            { document.getElementById('lblPublicBookingToken').innerHTML = "[Samostojno naročanje ne bo omogočeno]"; }
            };
        //#endregion

        //#region Schedule
        function getUTCDate(p_HHmm) {
            var t= p_HHmm.split(':');
            return new Date(Date.UTC(2020, 00, 01, t[0], t[1]));
        }
        function saveSchedule() {
            //save workplace schedule
            var myEvents=[];
            const visibleEvents = wcalendar.getEvents().filter(event => {
                const s = wcalendar.view.activeStart, e = wcalendar.view.activeEnd
                if (event.start > e || event.end < s) return false
                return true
            });
            for (var j = 0; j < visibleEvents.length; j++) {
                var myEvent = {};
                myEvent.startTime =  dayjs(visibleEvents[j].start).format("HH:mm");
                myEvent.endTime = dayjs(visibleEvents[j].end).format("HH:mm");
                myEvent.resourceId = visibleEvents[j].getResources()[0].id;
                myEvents.push(myEvent);
            }

                var schedule={};
                schedule.id = @Model.Location.Schedule.Id;
                schedule.EventsJson = JSON.stringify(myEvents);
            
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                        data: JSON.stringify(schedule),
                        url: apiURL+"/api/schedule/@Model.Location.Schedule.Id",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranil..."); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
            

        }

            //#region weekly Events (wcalendar)

        function newEvent(p_calendar, arg) {
            //clear form
            var cHour = arg.start.getHours();
            var cMinuts = arg.start.getMinutes();
            var outStr = (cHour <= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts <= 9 ? ('0' + cMinuts) : cMinuts);
            $("#txtStartTime").val(outStr);
            cHour = arg.end.getHours();
            cMinuts = arg.end.getMinutes();
            outStr = (cHour <= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts <= 9 ? ('0' + cMinuts) : cMinuts);
            $("#txtEndTime").val(outStr);
            $('#cmdTimetableDelete').addClass('invisible');
            $("#TimetableModal").modal("show");
            $("#cmdTimetableSave").off('click').click(function (evt) {
                if (SaveNewEvent(p_calendar, arg.resource.id) != false) { $("#TimetableModal").modal("hide"); }
            });
            $("#txtStartTime").focus();


        }

        function showEvent(info) {
            //show urnik info
            var cHour = info.event.start.getHours();
            var cMinuts = info.event.start.getMinutes();
            var outStr = (cHour <= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts <= 9 ? ('0' + cMinuts) : cMinuts);
            $("#txtStartTime").val(outStr);
            cHour = info.event.end.getHours();
            cMinuts = info.event.end.getMinutes();
            outStr = (cHour <= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts <= 9 ? ('0' + cMinuts) : cMinuts);
            $("#txtEndTime").val(outStr);
            $('#cmdDelete').removeClass('invisible');
            $("#TimetableModal").modal("show");
            $("#cmdTimetableSave").off('click').click(function (evt) {
                if (SaveEvent(info) != false) { $("#TimetableModal").modal("hide"); }
            });
            $("#cmdTimetableDelete").off('click').click(function (evt) {
                if (DeleteEvent(info) != false) { $("#TimetableModal").modal("hide"); }
            });
        }

        function DeleteEvent(info) {
            Swal.fire({
                title: 'Zbrišem urnik?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("Deleted event: %s", info.event.id);
                    if (info.event.display == "background") { HideBackgroundEvents(info.event.start); }
                    else { info.event.remove();  }
                    return true;
                } else { return false; }
            });
        }

        function SaveNewEvent(p_calendar, resId) {
            if ($('#formEvent').valid()) {
                //create new event
                console.log("Created event on calendar " + p_calendar.name);
                var startElement = dayjs(new Date()).format("l") + " " + $("#txtStartTime").val();
                var endElement = dayjs(new Date()).format("l") + " " + $("#txtEndTime").val();
                p_calendar.addEvent({
                    //id: event.id,
                    title: "",
                    start: dayjs(startElement).toDate(),
                    end: dayjs(endElement).toDate(),
                    resourceId: resId
                });
            } else { return false; }
        }

        function SaveEvent(p_event) {
            if ($('#formEvent').valid()) {
                //save client (if changed)
                var startElement = dayjs(new Date()).format("l") + " " + $("#txtStartTime").val();
                var endElement = dayjs(new Date()).format("l") + " " + $("#txtEndTime").val();
                p_event.event.setStart(dayjs(startElement).toDate());
                p_event.event.setEnd(dayjs(endElement).toDate());

            } else { return false; }
        }



        //#endregion

        //#endregion

        //#region Workplaces
         function GetWorkplacesTable() {
             getAPIToken().then((result) => {
            var table = $('#dtWorkplaces').DataTable({
                destroy: true,
                responsive: true,
                'order': [[0, 'desc']],
                //                dom: '<""top"">rt<""bottom""ilp><""container"">',
                searching: false,
                'processing': true,
                'serverSide': true,
                'ajax': {
                    'url': apiURL + "/api/workplacestable/@Model.Location.Id",
                    type: 'POST', dataType: 'json',
                    data: function (dtParms) {
                        return JSON.stringify(dtParms);
                    },
                    'contentType': 'application/json; charset=utf-8',
                    "crossDomain": true,
                    "beforeSend": function (xhr, settings) {
                        getAPIToken().then((result) => {
                            $.ajax($.extend(settings, {
                                headers: { "Authorization": "Bearer " +result.AccessToken },
                                beforeSend: $.noop
                            }));
                        });
                        return false;
                    }

                },
                'columns': [
                    { 'data': 'sortPosition' },
                    { 'data': 'name' },
                    { 'data': 'googleCalendarSummary' },
                    {
                        'data': 'active', className: 'text-center',
                        render: function (data, type, row, meta) {
                            if (row.active == true)
                            { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" checked="checked"><label class="custom-control-label"></label></div>'; }
                            else
                            { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" ><label class="custom-control-label"></label></div>'; }
                        }
                    },
                    {
                        data: null, 'orderable': false,
                        render: function (data, type, row, meta) {
                            return '<a class="btn btn-default" onclick="showDetail(' + row.id + ');">Urejanje</a><a class="btn btn-default" onclick="showScheduleForWorkplace(' + row.id + ');">Urnik</a><a class="btn btn-default" onclick="showWorkplaceServices(' + row.id + ');">Storitve</a>';
                        }
                    }
                ]
            });
            });

        }

        function CancelModal() {
            $('#formWorkplace').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#formWorkplace input").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }



        function cmdAdd_Click() {
            setForm(0);
            $('#cmdDelete').addClass('invisible')
            $("#myModal").modal("show");
            $("#cmdSave").off('click').click(function (evt) {
                if (SaveRecord(0) != false) {
                    $("#myModal").modal("hide");
                    GetWorkplacesTable();
                }
            });


        }

        function setForm(p_ID) {
            if (p_ID == 0) {
                //clear form
                $("#txtPosition").val('');
                $("#txtName").val('');
                $("#cboGooCal").selectpicker('val', '');
                $("#cbWPActive").prop('checked', true);
            }
            else {
                //fill form
                getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/workplace/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtPosition").val(result.sortPosition);
                        $("#txtName").val(result.name);
                        $("#cboGooCal").selectpicker('val',result.googleCalendarID);
                        $("#cbWPActive").prop('checked', result.active);
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                    }
                });
                });
            }

        }

        function showDetail(p_ID) {
            setForm(p_ID);
            $('#cmdDelete').removeClass('invisible');
            $("#myModal").modal("show");
            $("#cmdSave").off('click').click(function (evt) {
                if (SaveRecord(p_ID) != false) { $("#myModal").modal("hide"); }
            });
            $("#cmdDelete").off('click').click(function (evt) {
                if (DeleteRecord(p_ID) != false) { $("#myModal").modal("hide"); }
            });

        }

        function DeleteRecord(p_ID) {
            Swal.fire({
                title: 'Zbrišem delovno mesto?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                    $.ajax({
                        type: "DELETE",
                        url: apiURL + "/api/workplace/" + p_ID,
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") {toastr.success("Zbrisano");  GetWorkplacesTable(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                    });

                } else { return false; }
            });
        }

        function SaveRecord(p_ID) {
            if ($('#formWorkplace').valid()) {
                var workplace={};
                workplace.id = p_ID;
                workplace.sortPosition = parseInt($('#txtPosition').val());
                if (isNaN(workplace.sortPosition)) { workplace.sortPosition = 0;}
                workplace.name = $('#txtName').val();
                workplace.googleCalendarId = $('#cboGooCal').val();
                workplace.active = $("#cbWPActive").prop('checked');
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(workplace),
                    url: apiURL+"/api/workplace/@Model.Location.Id",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                         if (result == "OK") { GetWorkplacesTable(); return true; }
                        else { toastr.error("Napaka:"+result);  return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });
            } else { return false; }
        }


    function addGooCalendar() {
        Swal.fire({
            html: `<div class="form-group">
                Name:
                <p class="">
                    <input id="gooName" class="form-control" type="text" placeholder="Name">
                </p>
            </div>`,
            confirmButtonText: 'Confirm',
            showCancelButton: true,
            preConfirm: function () {
                return new Promise((resolve, reject) => {
                    resolve($('input[placeholder="Name"]').val());
                });
            }
        }).then((data) => {
            if (data.isConfirmed) { CreateCalendar(data.value).catch((result) => { toastr.error(result); }).then(toastr.success("Calendar created")); }
        });
    }

        function showScheduleForWorkplace(p_wpid) {
            //open schedule in new tab
            window.open('@Url.Content("~/wps/")'+p_wpid+"/0", '_blank').focus();
        }

        function showWorkplaceServices(p_wpid) {
            //show Workplace Services Modal
            $("#WorkplaceServices").empty();
            $("#WorkplaceServices").data('wpid',p_wpid);
            getAPIToken().then((result) => {
                var at = result.AccessToken;
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/locationservices/@Model.Location.Id",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + at },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        
                         result.forEach(function(entry) {
                                addWorkplaceServiceItem(entry);
                            });
                        //exclude services
                        $.ajax({
                            type: "get",
                            url: apiURL+"/api/workplaceexcludedservices/"+p_wpid+"/",
                            contentType: "application/json; charset=utf-8",
                            headers: { 'Authorization': 'Bearer ' + at },
                            dataType: "json",
                            async: true,
                            success: function (result) {
                        
                                 result.forEach(function(item) {
                                        $("#wps_"+item.serviceId).attr('checked', false);
                                    });
                            },
                            error: function (xhr, status, error) {
                                toastr.error("Napaka:" + error.toString());
                            }
                        });




                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                    }
                });
                });
            $("#WorkplaceServicesModal").modal("show");
        }

        function addWorkplaceServiceItem(item) {
            var newDiv = $('<div/>').addClass("form-group");
            var lbl = $('<label/>').addClass("custom-control custom-checkbox");
            var input = $('<input/>').addClass("custom-control-input").attr({ type: 'checkbox', value: true, checked: '' })
                .attr({ id: 'wps_' + item.id });
            var span = $("<span/>").text(item.name).addClass("custom-control-label");
            lbl.append(input).append(span);
            newDiv.append(lbl);
            //input.click(function () { console.log(this); });
            $('#WorkplaceServices').append(newDiv);
        }

        function ChangeWPSChecks(p_state) {
            $('#WorkplaceServices').find(':checkbox').each(function(){
                $(this).attr('checked', p_state);
            });     
        }

        function saveWPExcludedServices() {
            var notChecked = new Array();
            $('#WorkplaceServices').find('input[type="checkbox"]:not(:checked)').each(function () {
                notChecked.push(this.id);
            });
            if (notChecked.length == 0) { notChecked.push('0'); };
            var wpid=$('#WorkplaceServices').data('wpid');
            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(notChecked),
                    url: apiURL+"/api/workplaceexcludedservices/@Model.Location.Id/"+wpid,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranjeno"); $("#WorkplaceServicesModal").modal("hide"); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }
        //#endregion

           //#region ServiceGroups

   function CancelServiceGroupModal() {
       $('#formServiceGroup').validate().resetForm();
       //remove higlight ( reset form does not do this!)
       $("#formServiceGroup input").each(function (key, value) {
           $(this).closest('.form-control').removeClass('is-invalid');
       });
   }

   var GetServiceGroupsTable = async function () {

       var table = $('#dtServiceGroups').DataTable({
           destroy: true,
           responsive: true,
           'order': [[0, 'desc']],
           //                dom: '<""top"">rt<""bottom""ilp><""container"">',
           searching: false,
           'processing': true,
           'serverSide': true,
           'ajax': {
               'url': apiURL + "/api/servicegroupstable/" + $("#cboLocations").val(),
               type: 'POST', dataType: 'json',
               data: function (dtParms) {
                   return JSON.stringify(dtParms);
               },
               'contentType': 'application/json; charset=utf-8',
               "crossDomain": true,
               "beforeSend": function (xhr, settings) {
                   getAPIToken().then((result) => {
                       $.ajax($.extend(settings, {
                           headers: { "Authorization": "Bearer " +result.AccessToken },
                           beforeSend: $.noop
                       }));
                   });
                   return false;
               }

           },
           'columns': [
               { 'data': 'sortPosition' },
               { 'data': 'name' },
                {
                    'data': 'color', className: 'text-center',
                    render: function (data, type, row, meta) {
                        if ( row.color !=null && row.color.length > 0 )
                        { return '<i class="fas fa-square" style=\"color:#' + row.color + '\"></i>'; }
                        else
                        { return '<i class="far fa-square"></i>'; }
                    }
                },
               {
                   'data': 'active', className: 'text-center',
                   render: function (data, type, row, meta) {
                       if (row.active == true)
                       { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" checked="checked"><label class="custom-control-label"></label></div>'; }
                       else
                       { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" ><label class="custom-control-label"></label></div>'; }
                   }
               },
               {
                   data: null, 'orderable': false,
                   render: function (data, type, row, meta) {
                       return '<a class="btn btn-default" onclick="showServiceGroupDetail(' + row.id + ');">Urejanje</a>';
                   }
               }
           ]
       });

       //refresh cboServiceGroup
       FillCboServiceGroups();

   }

   function cmdServiceGroupAdd_Click() {
       setServiceGroupForm(0);
       $('#cmdServiceGroupDelete').addClass('invisible')
       $("#ServiceGroupModal").modal("show");
       $("#cmdServiceGroupSave").off('click').click(function (evt) {
           if (SaveServiceGroup(0) != false) {
               $("#ServiceGroupModal").modal("hide");
               GetServiceGroupsTable();
           }
       });


   }

   function setServiceGroupForm(p_ID) {
       if (p_ID == 0) {
           //clear form
           $("#txtServiceGroupName").val('');
           $("#txtServiceGroupMinutes").val('');
           $("#cpServiceGroupColor").colorpicker('setValue', null);
           $("#cbUsedInClientBooking").prop('checked', false);
           $("#cbActive").prop('checked', true);
       }
       else {
           //fill form
           getAPIToken().then((result) => {
           $.ajax({
               type: "get",
               url: apiURL+"/api/servicegroup/"+p_ID,
               contentType: "application/json; charset=utf-8",
               headers: { 'Authorization': 'Bearer ' + result.AccessToken },
               dataType: "json",
               async: true,
               success: function (result) {
                   $("#txtServiceGroupName").val(result.name);
                    if (result.color != null) { $("#cpServiceGroupColor").colorpicker('setValue', '#' + result.color); }
                        else { $("#cpServiceGroupColor").colorpicker('setValue', ''); }
                   $("#txtServiceGroupSortPosition").val(result.sortPosition);
                   $("#cbActive").prop('checked', result.active);

               },
               error: function (xhr, status, error) {
                   toastr.error("Napaka:" + error.toString());
               }
           });
           });
       }

   }

   function showServiceGroupDetail(p_ID) {
       setServiceGroupForm(p_ID);
       $('#cmdServiceGroupDelete').removeClass('invisible');
       $("#ServiceGroupModal").modal("show");
       $("#cmdServiceGroupSave").off('click').click(function (evt) {
           if (SaveServiceGroup(p_ID) != false) { $("#ServiceGroupModal").modal("hide"); }
       });
       $("#cmdServiceGroupDelete").off('click').click(function (evt) {
           if (DeleteServiceGroup(p_ID) != false) { $("#ServiceGroupModal").modal("hide"); }
       });

   }

   function DeleteServiceGroup(p_ID) {
       Swal.fire({
           title: 'Zbrišem skupino storitev?',
           showDenyButton: true,
           confirmButtonText: 'Da',
           denyButtonText: 'Ne',
       }).then((result) => {
           if (result.isConfirmed) {
           getAPIToken().then((result) => {
               $.ajax({
               type: "DELETE",
               url: apiURL+"/api/servicegroup/"+p_ID,
               contentType: "application/json; charset=utf-8",
               headers: { 'Authorization': 'Bearer ' + result.AccessToken },
               dataType: "json",
               success: function (result) {
                   if (result == "OK") {toastr.success("skupina zbrisana"); GetServiceGroupsTable(); return true; }
                   else { toastr.error("Napaka:" + result); return false; }
               },
               error: function (xhr, status, error) {
                   toastr.error("Napaka:" + error.toString());
                   return false;
               }
           });
           });

       } else { return false; }
       });

   }

   function SaveServiceGroup(p_ID) {
       if ($('#formServiceGroup').valid()) {
           var service={};
           service.id = p_ID;
           service.LocationId = parseInt($("#cboLocations").val());
           service.Name = $('#txtServiceGroupName').val();
           service.color = $('#cpServiceGroupColor .form-control').val();
           if (service.color.length != 6) { service.color = null; }
           service.SortPosition = parseInt($("#txtServiceGroupSortPosition").val());
           if (isNaN(service.SortPosition)) { service.SortPosition = 0; }
           
           service.Active = $("#cbActive").prop('checked');
           getAPIToken().then((result) => {
           $.ajax({
               type: "post",
               data: JSON.stringify(service),
               url: apiURL+"/api/servicegroup/",
               contentType: "application/json; charset=utf-8",
               headers: { 'Authorization': 'Bearer ' + result.AccessToken },
               dataType: "json",
               success: function (result) {
                    if (result == "OK") { toastr.success("Shranjeno"); GetServiceGroupsTable(); return true; }
                   else { toastr.error("Napaka:" + result); return false; }
               },
               error: function (xhr, status, error) {
                   toastr.error("Napaka:" + error.toString());
                   return false;
               }
           });
           });
       } else { return false; }
   }

  function FillCboServiceGroups() {
        $.ajax({
            type: 'GET', dataType: 'json',
            'url': apiURL + "/api/servicegroups/" + $("#cboLocations").val(),
            async: false,
            data: "",
            'contentType': 'application/json; charset=utf-8',
                "crossDomain": true,
                "beforeSend": function (xhr, settings) {
                    getAPIToken().then((result) => {
                        $.ajax($.extend(settings, {
                            headers: { "Authorization": "Bearer " +result.AccessToken },
                            beforeSend: $.noop
                        }));
                    });
                    return false;
                },
            success: function (msg) {
                $("#cboServiceGroup").empty();
                
                $.each(msg, function (index, item) {
                    if (this.active == true) { $("#cboServiceGroup").append($("<option />").val(this.id).text(this.name)); }
                    else { $("#cboServiceGroup").append($("<option />").val(this.id).text(this.name).attr('disabled', 'disabled')); }
                });
                $('#cboServiceGroup').selectpicker('refresh');

            },
            error: function () {
                toastr.error("Error loading Service Groups");
            }
        });
    }

   //#endregion

        //#region Services

        function CancelServiceModal() {
            $('#formService').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#formService input").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }

        function pickTextColorBasedOnBgColorSimple(bgColor) {
            if (bgColor==null){return 'white';}
            try {
              var color = (bgColor.charAt(0) === '#') ? bgColor.substring(1, 7) : bgColor;
              var r = parseInt(color.substring(0, 2), 16); // hexToR
              var g = parseInt(color.substring(2, 4), 16); // hexToG
              var b = parseInt(color.substring(4, 6), 16); // hexToB
              return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186) ? 'black' : 'white';
                } catch (error) { return 'white';}
            }

        var GetServicesTable = async function () {

            var table = $('#dtServices').DataTable({
                stateSave: true,
                destroy: true,
                responsive: true,
                'order': [[0, 'desc']],
                //                dom: '<""top"">rt<""bottom""ilp><""container"">',
                searching: false,
                'processing': true,
                'serverSide': true,
                'ajax': {
                    'url': apiURL + "/api/servicestable/" + $("#cboLocations").val(),
                    type: 'POST', dataType: 'json',
                    data: function (dtParms) {
                        return JSON.stringify(dtParms);
                    },
                    'contentType': 'application/json; charset=utf-8',
                    "crossDomain": true,
                    "beforeSend": function (xhr, settings) {
                        getAPIToken().then((result) => {
                            $.ajax($.extend(settings, {
                                headers: { "Authorization": "Bearer " +result.AccessToken },
                                beforeSend: $.noop
                            }));
                        });
                        return false;
                    }

                },
                'columns': [
                          {  
                              'data': 'serviceGroup', 
                              render: function (data, type, row, meta) {
                                if ( row.serviceGroup !=null  )
                                    {
                                        if ( row.serviceGroup.color !=null && row.serviceGroup.color.length > 0 )
                                        { return '<span class="badge " style=\"font-size: unset;background-color:#' + row.serviceGroup.color + '; color:' + pickTextColorBasedOnBgColorSimple(row.serviceGroup.color) + ';line-height: 3;padding-left: 2em;padding-right: 2em;\">'+row.serviceGroup.name+'</span> '; }
                                        else
                                              { return '<span class="badge " style=\"font-size: unset;border: solid 1px;line-height: 3;padding-left: 2em;padding-right: 2em;\">'+row.serviceGroup.name+'</span> '; }
                                    }
                                  else
                                  { return ''; }
                              } 
                          },
                    { 
                        'data': 'name',
                          render: function (data, type, row, meta) {
                              var retval="";
                              var barva=row.color;
                                if (barva==null && row.serviceGroup !=null ) 
                                { if ( row.serviceGroup.color !=null && row.serviceGroup.color.length > 0 ) { barva= row.serviceGroup.color; } }
                                if (barva!=null)
                                {retval='<span class="badge " style=\"width: 100%;text-align: left;font-size: initial;background-color:#' + barva + '; color:' + pickTextColorBasedOnBgColorSimple(barva) + ';\">'+row.name+'</span> ';}
                                    else
                                            {retval='<span class="badge " style=\"width: 100%;text-align: left;font-size: initial;border: solid 1px;\">'+row.name+'</span> ';}
                                
                                if ( row.priceDescription !=null && row.priceDescription.length > 0 ) { retval+= '<p style="font-size: smaller;margin-bottom: initial;">' + row.priceDescription + '</p>'; }
                                return retval;
                              }
                    },
                          { 'data': 'minutes', className: 'text-center', 
                          render:  function (data, type, row, meta) { return row.minutes+' min'}
                          },
                    {
                        'data': 'color', className: 'text-center',
                        render: function (data, type, row, meta) {
                            if ( row.color !=null && row.color.length > 0 )
                             { return '<i class="fas fa-square" style=\"color:#' + row.color + '\"></i>'; }
                            else
                            { return '<i class="far fa-square"></i>'; }
                        }
                    },
                    {
                        'data': 'usedInClientBooking', className: 'text-center',
                        render: function (data, type, row, meta) {
                            if (row.usedInClientBooking == true)
                            { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" checked="checked"><label class="custom-control-label"></label></div>'; }
                            else
                            { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" ><label class="custom-control-label"></label></div>'; }
                        }
                    },
                    {
                        'data': 'active', className: 'text-center',
                        render: function (data, type, row, meta) {
                            if (row.active == true)
                            { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" checked="checked"><label class="custom-control-label"></label></div>'; }
                            else
                            { return '<div class="custom-control custom-checkbox"><input type="checkbox" class="custom-control-input" ><label class="custom-control-label"></label></div>'; }
                        }
                    },
                    {
                        data: null, 'orderable': false,
                        render: function (data, type, row, meta) {
                            return '<a class="btn btn-default" onclick="showServiceDetail(' + row.id + ');">Urejanje</a>';
                        }
                    }
                ]
            });


        }

        function cmdServiceAdd_Click() {
            setServiceForm(0);
            $('#cmdServiceDelete').addClass('invisible')
            $("#ServiceModal").modal("show");
            $("#cmdServiceSave").off('click').click(function (evt) {
                if (SaveService(0) != false) {
                    $("#ServiceModal").modal("hide");
                    GetServicesTable();
                }
            });


        }

        function setServiceForm(p_ID) {
            if (p_ID == 0) {
                //clear form
                $("#txtServiceName").val('');
                $("#txtServiceMinutes").val('');
                $("#txtServiceOffset").val('');
                $("#txtPriceDescription").val('');
                $("#cboServiceGroup").selectpicker('val', '0');
                $("#cpServiceColor").colorpicker('setValue', null);
                $("#cbUsedInClientBooking").prop('checked', false);
                $("#cbActive").prop('checked', true);
            }
            else {
                //fill form
                getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/service/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtServiceName").val(result.name);
                        $("#txtServiceMinutes").val(result.minutes);
                              $("#txtServiceOffset").val(result.offset);
                        $("#txtPriceDescription").val(result.priceDescription);
                        $("#cboServiceGroup").selectpicker('val', result.serviceGroupId);
                        if (result.color != null) { $("#cpServiceColor").colorpicker('setValue', '#' + result.color); }
                        else { $("#cpServiceColor").colorpicker('setValue', ''); }
                        $("#cbUsedInClientBooking").prop('checked', result.usedInClientBooking);
                        $("#cbActive").prop('checked', result.active);

                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                    }
                });
                });
            }

        }

        function showServiceDetail(p_ID) {
            setServiceForm(p_ID);
            $('#cmdServiceDelete').removeClass('invisible');
            $("#ServiceModal").modal("show");
            $("#cmdServiceSave").off('click').click(function (evt) {
                if (SaveService(p_ID) != false) { $("#ServiceModal").modal("hide"); }
            });
            $("#cmdServiceDelete").off('click').click(function (evt) {
                if (DeleteService(p_ID) != false) { $("#ServiceModal").modal("hide"); }
            });

        }

        function DeleteService(p_ID) {
            Swal.fire({
                title: 'Zbrišem storitev?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                getAPIToken().then((result) => {
                    $.ajax({
                    type: "DELETE",
                    url: apiURL+"/api/service/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") {toastr.success("storitev zbrisana"); GetServicesTable(); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });

            } else { return false; }
            });

        }

        function SaveService(p_ID) {
            if ($('#formService').valid()) {
                var service={};
                service.id = p_ID;
                service.LocationId = parseInt($("#cboLocations").val());
                service.Name = $('#txtServiceName').val();
                service.Minutes = parseInt($("#txtServiceMinutes").val());
                service.Offset = parseInt($("#txtServiceOffset").val());
                if (isNaN(service.Offset)) { service.Offset = 0; }
                service.PriceDescription = $("#txtPriceDescription").val();
                if (isNaN(service.Minutes)) { service.Minutes = 0; }
                service.serviceGroupId = Number($('#cboServiceGroup').val());
                service.color = $('#cpServiceColor .form-control').val();
                if (service.color.length != 6) { service.color = null; }
                service.Active = $("#cbActive").prop('checked');
                service.UsedInClientBooking = $("#cbUsedInClientBooking").prop('checked');
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(service),
                    url: apiURL+"/api/service/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                         if (result == "OK") { toastr.success("Shranjeno"); GetServicesTable(); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });
            } else { return false; }
        }

        //#endregion


        //#region SMS
         function addGoogleCalendar(p_value)
        {
            $('.goocal').each(function() {
                if ($(this).val() == p_value) { $(this).prop("checked", true); }
             });
        }
        function resetSMSText() {
            $("#SMS_GOO_Msg").val('Pozdravljeni! Naročeni ste <DANESJUTRI> <DATUM> ob <URA> v salonu ***.\nV primeru odpovedi ali dodatnih informacij pokličite: ***.');
        }
        function resetRDSMSText() {
            $("#SMS_RD_Msg").val('Ob Vašem prazniku vam iskreno čestitamo in želimo vse najboljše! Salon ***');
        }
        function DelovZBesedo(p_Number) {
            if (p_Number.toString().substr(-2) == '00' ) { return "delov"; }
            if (p_Number.toString().substr(-2) == '01' ||p_Number==1 ) { return "del";}
            if (p_Number.toString().substr(-2) == '02' ||p_Number==2 ) { return "dela";}
            if (p_Number.toString().substr(-2) == '03' ||p_Number==3 ) { return "dele";}
            if (p_Number.toString().substr(-2) == '04' ||p_Number==4 ) { return "dele";}
            if (p_Number > 4) { return "delov";}
        }
        function showSMSInfo(p_text,p_IdlblInfo) {
            var smsi = SmsCounter.count(p_text);
            if (smsi.messages > 1)
            { document.getElementById(p_IdlblInfo).innerHTML="To sporočilo bo pri pošiljanju razdeljeno na " + smsi.messages + " " + DelovZBesedo(smsi.messages) + "."; }
            else
            { document.getElementById(p_IdlblInfo).innerHTML="To sporočilo bo poslano v enem delu."; }
        }
        function saveSMS() {
                        if ($("#formSMS").validate().element('#SMS_GOO_Time') == false) {return; }
            var settings = new Object();

            settings["SMS_SenderName"] = $("#SMS_SenderName").val();
            if ($("#SMS_genRDsms").prop("checked") == false) { settings["SMS_RD_Time"] = ''; }
            else { settings["SMS_RD_Time"] = $("#SMS_RD_Time").val(); }
            settings["SMS_RD_Msg"] = $("#SMS_RD_Msg").val();

            let data = $('.goocal:checked').map(function () {
                return $(this).val();
            }).get();
            settings["SMS_GOO_Cals"] = JSON.stringify(data);
            if ($("#SMS_genGOOsms").prop("checked") == false) { settings["SMS_GOO_Time"] = ''; }
            else { 
                settings["SMS_GOO_Time"] = $("#SMS_GOO_Time").val(); 
            }

            if ($("#rbGOODayCurrent").prop("checked")) { settings["SMS_GOO_Day"] = "CURR"; }
            if ($("#rbGOODayNext").prop("checked")) { settings["SMS_GOO_Day"] = "NEXT"; }
            settings["SMS_GOO_Msg"] = $("#SMS_GOO_Msg").val();
            settings["SMS_GOO_AutoApprove"] = !$("#SMS_GOO_AutoApprove").prop("checked");
            settings["SMS_AppointmentSMS"] = $("#SMS_AppointmentSMS").prop("checked");

            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL + "/api/Settings/Save/" + $("#cboLocations").val(),
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranjeno"); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }

        function loadSMS() {
            var settings = new Object();
            settings["SMS_SenderName"] = $("#SMS_SenderName").val();
            settings["SMS_RD_Time"] = $("#SMS_RD_Time").val();
            settings["SMS_RD_Msg"] = $("#SMS_RD_Msg").val();
            settings["SMS_GOO_Time"] = $("#SMS_GOO_Time").val();
            settings["SMS_GOO_Msg"] = $("#SMS_GOO_Msg").val();
            settings["SMS_GOO_Day"] = '';
            settings["SMS_GOO_Cals"] = '';
            settings["SMS_GOO_AutoApprove"] = 'false';
            settings["SMS_AppointmentSMS"] = 'true';
            getAPIToken().then((result) => {
            $.ajax({
                type: "post",
                data: JSON.stringify(settings),
                url: apiURL+"/api/Settings/Load/" + $("#cboLocations").val(),
                contentType: "application/json; charset=utf-8",
                headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                dataType: "json",
                 success: function (result) {
                     $("#SMS_SenderName").val(result["SMS_SenderName"]);
                     if (result["SMS_RD_Time"] != '') {
                         $("#SMS_genRDsms").prop("checked", true);
                         $("#SMS_RD_Props").show();
                     } else {
                         $("#SMS_genRDsms").prop("checked", false);
                         $("#SMS_RD_Props").hide();
                     }
                     $("#SMS_RD_Time").val(result["SMS_RD_Time"]);
                     $("#SMS_RD_Msg").val(result["SMS_RD_Msg"]);

                     if (result["SMS_GOO_Time"] != '') {
                         $("#SMS_genGOOsms").prop("checked", true);
                         $("#SMS_GOO_Props").show();
                     } else {
                         $("#SMS_genGOOsms").prop("checked", false);
                         $("#SMS_GOO_Props").hide();
                     }
                     $("#SMS_GOO_Time").val(result["SMS_GOO_Time"]);
                     $("#SMS_GOO_Msg").val(result["SMS_GOO_Msg"]);
                     if (result["SMS_GOO_Day"] != undefined) {
                         if (result["SMS_GOO_Day"] == "CURR") { $('#rbGOODayCurrent').prop('checked', true);}
                         if (result["SMS_GOO_Day"] == "NEXT") { $('#rbGOODayNext').prop('checked', true); }
                     }
                     if (result["SMS_GOO_Cals"] != undefined && result["SMS_GOO_Cals"]!="")
                     {
                         var data = JSON.parse(result["SMS_GOO_Cals"]);
                         data.forEach(function(entry) {
                                addGoogleCalendar(entry);
                            });
                     }
                     if (result["SMS_GOO_AutoApprove"] != undefined) {
                         if (result["SMS_GOO_AutoApprove"] == "false") { $('#SMS_GOO_AutoApprove').prop('checked', true);}
                     }
                     if (result["SMS_AppointmentSMS"] != undefined) {
                         if (result["SMS_AppointmentSMS"] == "true") { $('#SMS_AppointmentSMS').prop('checked', true);}
                     }
                },
                error: function (xhr, status, error) {
                    toastr.error("Napaka:" + error.toString());
                    return false;
                }
            });
            });
        }
        //#endregion

        //#region PageTour
        function initPageTour(){
            
            gPageTour = new Shepherd.Tour({
			defaultStepOptions: {
				cancelIcon: {enabled: true},
				classes: 'class-1 class-2',
					scrollTo: { behavior: 'smooth', block: 'center' },
			showOn()  {
				if (this.attachTo === undefined)
						{return true;}
						else
						{
						const element = document.querySelector(this.attachTo.element);
						if (Boolean(element) == true)
						{
							let sidemenu=$($('.main-sidebar')[0]);
							if (Boolean(sidemenu) == true)
						{
							if($(element).closest(sidemenu).length > 0)
							{
							return (sidemenu.offset().left>=0)
							}
							
						return ($(element).is(":visible"));
						}
						else {return ($(element).is(":visible"));}
						}
						else
						{return false;}
						}
					}
				},
			    useModalOverlay: true
		    });

		    gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Splošne informacije o salonu uporabljene pri samostojnem naročanju strank.`,
			    attachTo: {	element: '#general-tab',on: 'bottom'},
                buttons: [{action() {	return this.next();	},	text: 'Naprej'	}
			    ]
		    });
            gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Samostojno naročanje.`,
			    attachTo: {	element: '#inputPublicBookingToken',on: 'bottom'},
                    buttons: [{action() {return this.back();},text: 'Nazaj'},	{action() {return this.next();},text: 'Naprej'	}	]
		    });
            gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Tu določite splošni urnik salona. Urnik zaposlenih določate na zavihku Delovna mesta.`,
			    attachTo: {	element: '#timetable-tab',on: 'bottom'},
                    buttons: [{action() {return this.back();},text: 'Nazaj'},	{action() {return this.next();},text: 'Naprej'	}	]
		    });
            gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Tu urejate vaša delovna mesta. Praviloma je vsak zaposleni eno delovno mesto (en stolpec v tabeli za naročanje).<br/>
                Pri vsakem delovnem mestu lahko določite google koledar, kamor se shranjujejo njegova naročila, urnik in katere storitve opravlja (če nič ne določite, lahko opravlja vse storitve).`,
			    attachTo: {	element: '#workplaces-tab',on: 'bottom'},
                    buttons: [{action() {return this.back();},text: 'Nazaj'},	{action() {return this.next();},text: 'Naprej'	}	]
		    });
            
            gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Storitve lahko združite v skupine tako so bolj pregledno prikazane pri samostojnem naročanju.`,
			    attachTo: {	element: '#servicegroups-tab',on: 'bottom'},
                    buttons: [{action() {return this.back();},text: 'Nazaj'},	{action() {return this.next();},text: 'Naprej'	}	]
		    });
            gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Tu urejate storitve, ki se uporabijo pri naročanju strank. Pri vsaki je obvezen vsaj naziv in trajanje.<br/>
                Pri vsaki pa lahko določite še v katero skupino spada in ali naj bo na voljo za samostojno naročanje.`,
			    attachTo: {	element: '#services-tab',on: 'bottom'},
                    buttons: [{action() {return this.back();},text: 'Nazaj'},	{action() {return this.next();},text: 'Naprej'	}	]
		    });
            gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Izberite kako naj vam predlaga dolžino termina pri naročanju: Naj uporabi trajanje najdaljše storitve ali naj sešteje vse storitve naročila.`,
			    attachTo: {	element: '#ServiceLength',on: 'bottom'},
                    buttons: [{action() {return this.back();},text: 'Nazaj'},	{action() {return this.next();},text: 'Naprej'	}	]
		    });
            gPageTour.addStep({
			    title: 'Kratek vodič po KajBi.si',
			    text: `Tu nastavite vse z zvezi z obveščanjem stranki prek SMS.`,
			    attachTo: {	element: '#sms-tab',on: 'bottom'},
                    buttons: [{action() {return this.back();},text: 'Nazaj'},	{action() {return this.next();},text: 'Zapri'	}	]
		    });
        }
        //#endregion
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoadOkay()" onerror="gapiLoadFail(event)"></script>


}

