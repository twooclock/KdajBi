@using Newtonsoft.Json;
@using KdajBi.Web.ViewModels;
@model vmLocation
@{
    ViewData["Title"] = "Nastavitve podjetja";
}

@section styles{
    <!-- datatables.net -->
    <link href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />"
    <link href="~/plugins/datatables-buttons/css/buttons.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-fixedheader/css/fixedHeader.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-scroller/css/scroller.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.min.css" rel="stylesheet" />
}


<!-- page content -->
<div class="right_col col-md-12" role="main">


    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="dashboard_graph">

                <div class="row x_title">
                    <div class="col-md-6">
                        <h3>Nastavitve podjetja</h3>
                    </div>

                </div>
                <div class="row">
                    <div class="col-12">


                        <div class="card card-primary card-outline card-outline-tabs">
                            <div class="card-header p-0 border-bottom-0">
                                <ul class="nav nav-tabs" role="tablist">
                                    <li class="nav-item"><a class="nav-link active" id="user-tab" data-toggle="tab" href="#user" role="tab" aria-controls="user" aria-selected="true">Pravice uporabnikov</a></li>
                                    <li class="nav-item"><a class="nav-link" id="appointments-tab" data-toggle="tab" href="#appointments" role="tab" aria-controls="appointments" aria-selected="false">Naročanje</a></li>
                                    <li class="nav-item"><a class="nav-link" id="password-tab" data-toggle="tab" href="#password" role="tab" aria-controls="password" aria-selected="false">Geslo nadzornika</a></li>
                                    <li class="nav-item" role="presentation">
                                        <a class="nav-link" id="tags-tab" data-toggle="tab" href="#tags" role="tab" aria-controls="tags" aria-selected="false">Oznake pri strankah</a>
                                    </li>
                                </ul>
                                <div class="card-body">
                                    <div class="tab-content" id="custom-tabs-four-tabContent">
                                        <div id="user" class="tab-pane fade active show" role="tabpanel" aria-labelledby="user-tab">
                                            <form id="UserUI" class="form-horizontal">
                                                <div class="form-group">
                                                    <div class="custom-control custom-checkbox">
                                                        <input class="custom-control-input" type="checkbox" id="cbShowAppointments" value="true">
                                                        <label for="cbShowAppointments" class="custom-control-label">Prikaži Naročila</label>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="custom-control custom-checkbox">
                                                        <input class="custom-control-input" type="checkbox" id="cbShowClients" value="true">
                                                        <label for="cbShowClients" class="custom-control-label">Prikaži Stranke</label>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="custom-control custom-checkbox">
                                                        <input class="custom-control-input" type="checkbox" id="cbShowClientsList" value="true">
                                                        <label for="cbShowClientsList" class="custom-control-label">Prikaži Stranke (seznam)</label>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="custom-control custom-checkbox">
                                                        <input class="custom-control-input" type="checkbox" id="cbShowSMSNotification" value="true">
                                                        <label for="cbShowSMSNotification" class="custom-control-label">Prikaži Obvesti prek SMS</label>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <div class="custom-control custom-checkbox">
                                                        <input class="custom-control-input" type="checkbox" id="cbShowSMSCampaigns" value="true">
                                                        <label for="cbShowSMSCampaigns" class="custom-control-label">Prikaži Pregled poslanih SMS</label>
                                                    </div>
                                                </div>
                                                
                                            </form>
                                            <div class="form-group">
                                                <div class="col-sm-offset-2 col-sm-10">
                                                    <button class="btn btn-danger" onclick="SaveUserUISettings()">Shrani</button>
                                                </div>
                                            </div>
                                        </div>

                                        <div id="appointments" class="tab-pane fade" role="tabpanel" aria-labelledby="appointments-tab">
                                            <form class="form-horizontal">
                                                <div class="form-group">
                                                    <div class="custom-control custom-checkbox">
                                                    <input class="custom-control-input" type="checkbox" id="cbShow3Calendars" value="true">
                                                    <label for="cbShow3Calendars" class="custom-control-label">Prikaži 3 koledarčke pri naročanju</label>
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    <label for="txtRowHeight">
                                                        Višna vrstice:
                                                    </label>
                                                    <input type="text" id="txtRowHeight" name="txtRowHeight" class="form-control" />
                                                </div>
                                                <div class="form-group">
                                                    <label for="txtMinColWidth">
                                                        Min. širina stolpca:
                                                    </label>
                                                    <input type="text" id="txtMinColWidth" name="txtMinColWidth" class="form-control" />
                                                </div>
                                            </form>
                                            <div class="form-group">
                                                <div class="col-sm-offset-2 col-sm-10">
                                                    <button class="btn btn-danger" onclick="SaveAppointmentSettings()">Shrani</button>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div id="password" class="tab-pane fade" role="tabpanel" aria-labelledby="password-tab">
                                            <form class="form-horizontal">

                                                <div class="form-group">
                                                    <label for="txtCurrPass">
                                                        Trenutno geslo:
                                                    </label>
                                                    <input type="password" id="txtCurrPass" name="txtCurrPass" class="form-control" />
                                                </div>
                                                <div class="form-group">
                                                    <label for="txtNewPass1">
                                                        Novo geslo:
                                                    </label>
                                                    <input type="password" id="txtNewPass1" name="txtNewPass1" class="form-control" />
                                                </div>
                                                <div class="form-group">
                                                    <label for="txtNewPass2">
                                                        Ponovno vnesite novo geslo:
                                                    </label>
                                                    <input type="password" id="txtNewPass2" name="txtNewPass2" class="form-control" />
                                                </div>
                                            </form>
                                            <div class="form-group">
                                                <div class="col-sm-offset-2 col-sm-10">
                                                    <button class="btn btn-danger" onclick="SavePassword()">Spremeni geslo</button>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="tab-pane fade" id="tags" role="tabpanel" aria-labelledby="tags-tab">
                                            <div class="card">
                                                <!-- /.card-header -->
                                                <div class="card-body p-0">
                                                    <div class="col-12">
                                                        <div class="table-responsive">

                                                            <table id="dtTags" class="table table-striped table-bordered" width="100%">
                                                                <thead>
                                                                    <tr>
                                                                        <th>
                                                                            Oznaka
                                                                        </th>

                                                                        <th>
                                                                        </th>

                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                </tbody>
                                                            </table>
                                                            <button type="button" id="cmdAdd" onclick="cmdAddTag_Click();" class="btn btn-primary btn-lg">
                                                                Dodaj
                                                            </button>
                                                        </div>
                                                    </div>

                                                </div>

                                                <!-- /.card-body -->
                                            </div>
                                        </div>
                                    </div>
                                    <!-- /.tab-content -->
                                </div>
                            </div>
                        </div>


                    </div>
                </div>

                <div class="clearfix"></div>
            </div>
        </div>

    </div>
    <br />


</div>
<!-- /page content -->
<!-- modal content-->
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Locations</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="dataform" class="dataform" name="dataform">
                    <div class="form-group">
                        <label for="txtEmail">
                            name:
                        </label>
                        <input type="text" id="txtName" name="txtName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="cbActive" value="true" checked="">
                            <span class="custom-control-label">Active</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdDelete">
                    Delete
                </button>
                <button type="button" class="btn btn-primary" id="cmdSave">
                    Save
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->
<!-- clienttags modal content-->
<div id="myTagModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Oznaka</h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <form id="dfTag" class="dataform" name="dfTag">
                    <div class="form-group">
                        <label for="txtTag">
                            Ime:
                        </label>
                        <input type="text" id="txtTag" name="txtTag" class="form-control" />
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" id="cmdDeleteTag">
                    Zbriši
                </button>
                <button type="button" class="btn btn-primary" id="cmdSaveTag">
                    Shrani
                </button>
            </div>
        </div>
    </div>
</div>
<!-- /modal content-->
@section scripts{
    <!-- datables.net -->
    <script src="~/plugins/datatables/jquery.dataTables.js"></script>
    <script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>
    <script src="~/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.min.js"></script>

    <script type="text/javascript">

        var myTable;
        var AppointmentSettingsLoaded=false;
        var tagsLoaded=false;
        @await Html.PartialAsync("_ApiAccess")

        $(document).ready(function () {

            loadUserUISettings();
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                 if (e.target.id == "appointments-tab" && AppointmentSettingsLoaded == false) { LoadAppointmentsSettings(); AppointmentSettingsLoaded = true;}
                 if (e.target.id == "tags-tab" && tagsLoaded == false) {GetTagsTable(); tagsLoaded = true; }
            });

            //init toastr
            toastr.options.preventDuplicates = true;
            toastr.options.timeOut = 1000;

            $('#dataform').validate({
                rules: {
                    txtName: {
                        minlength: 3,
                        maxlength: 50,
                        required: true
                    }
                },
                messages: {
                    txtName: "Neveljavno ime!"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });

            $('#dfTag').validate({
                rules: {
                    txtTag: {
                        minlength: 3,
                        maxlength: 20,
                        required: true
                    }
                },
                messages: {
                    txtName: "Neveljavna oznaka"
                },
                highlight: function (element) {
                    $(element).closest('.form-control').addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid');
                },
                errorElement: 'span',
                errorClass: 'invalid-feedback',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else { error.insertAfter(element); }
                }
            });

            $('#myModal').on('hidden.bs.modal', function (e) {
                CancelModal();
            });

            $('#myTagModal').on('hidden.bs.modal', function (e) {
                CancelTagModal();
            });

            
        });

        function SaveUserUISettings() {
            var userui=[];
            var settings = new Object();
            if ($("#cbShowAppointments").prop("checked")==true) {userui.push('Appointments');}
            if ($("#cbShowClients").prop("checked")==true) {userui.push('Clients');}
            if ($("#cbShowClientsList").prop("checked")==true) {userui.push('ClientsList');}
            if ($("#cbShowSMSNotification").prop("checked")==true) {userui.push('SMSNotification');}
            if ($("#cbShowSMSCampaigns").prop("checked") == true) { userui.push('SMSCampaigns'); }
            settings["UserUIShow"] = JSON.stringify(userui);
            
        
            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL + "/api/Settings/Save/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranjeno"); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }

        async function loadUserUISettings() {
            var settings = new Object();
            settings["UserUIShow"] = '[]';
            
            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL+"/api/Settings/Load/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                     success: function (result) {
                        if (result["UserUIShow"] != undefined) {
                            var userui=JSON.parse(result["UserUIShow"])
                            if (userui.indexOf("Appointments") > -1 ) { $('#cbShowAppointments').prop('checked', true); }
                            if (userui.indexOf("Clients") > -1) { $('#cbShowClients').prop('checked', true); }
                            if (userui.indexOf("ClientsList") > -1 ) { $('#cbShowClientsList').prop('checked', true); }
                            if (userui.indexOf("SMSNotification") > -1 ) { $('#cbShowSMSNotification').prop('checked', true); }
                            if (userui.indexOf("SMSCampaigns") > -1) { $('#cbShowSMSCampaigns').prop('checked', true); }
                         }
                         
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }


        function SaveAppointmentSettings() {
            var settings = new Object();
            settings["AppointmentsShow3Calendars"] = $("#cbShow3Calendars").prop("checked");
            settings["AppointmentsRowHeight"] = $("#txtRowHeight").val(); 
            settings["AppointmentsMinColWidth"] = $("#txtMinColWidth").val();
            
            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL + "/api/Settings/Save/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                        if (result == "OK") { toastr.success("Shranjeno"); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }

        async function LoadAppointmentsSettings() {
            var settings = new Object();
            settings["AppointmentsShow3Calendars"] = 'false';
            settings["AppointmentsRowHeight"] = '';
            settings["AppointmentsMinColWidth"] = '';

            getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(settings),
                    url: apiURL+"/api/Settings/Load/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                     success: function (result) {
                         if (result["AppointmentsShow3Calendars"] != undefined) {
                             if (result["AppointmentsShow3Calendars"] == "true") { $('#cbShow3Calendars').prop('checked', true);}
                         }
                         if (result["AppointmentsRowHeight"] != undefined) {
                             if (result["AppointmentsRowHeight"].length > 0) { $('#txtRowHeight').val(result["AppointmentsRowHeight"]); }
                         }
                         if (result["AppointmentsMinColWidth"] != undefined) {
                             if (result["AppointmentsMinColWidth"].length > 0) { $('#txtMinColWidth').val(result["AppointmentsMinColWidth"]); }
                         }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
            });
        }

        function SavePassword() {
            if ($("#txtNewPass1").val()==$("#txtNewPass2").val())
            {
                var oldP=$("#txtCurrPass").val();
                var newP = $("#txtNewPass1").val();
                var changePass = new Array();
                changePass.push(oldP);
                changePass.push(newP);
                getAPIToken().then((result) => {
                    $.ajax({
                        type: "post",
                        data: JSON.stringify(changePass),
                        url: apiURL + "/api/Settings/ChangePassword/",
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") { toastr.success("Uspešno spremenil geslo"); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                });
            }
            else { toastr.error("Novi gesli nista enaki!" ); }
        }


        function CancelModal() {
            $('#dataform').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#dataform input, #dataform label").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }



        function cmdAdd_Click() {
            setForm(0);
            $('#cmdDelete').addClass('invisible')
            $("#myModal").modal("show");
            $("#cmdSave").off('click').click(function (evt) {
                if (SaveRecord(0) != false) {
                    $("#myModal").modal("hide");
                    GetTable();
                }
            });


        }

        function setForm(p_ID) {
            if (p_ID == 0) {
                //clear form
                $("#txtName").val('');
                $("#cbActive").prop('checked', true);
            }
            else {
                //fill form
                getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/Locations/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer '+result.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtName").val(result.name);
                        $("#cbActive").prop('checked', result.active);
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                    }
                });
                });
            }

        }

        function showDetail(p_ID) {
            setForm(p_ID);
            $('#cmdDelete').removeClass('invisible');
            $("#myModal").modal("show");
            $("#cmdSave").off('click').click(function (evt) {
                if (SaveRecord(p_ID) != false) { $("#myModal").modal("hide"); }
            });
            $("#cmdDelete").off('click').click(function (evt) {
                if (DeleteRecord(p_ID) != false) { $("#myModal").modal("hide"); }
            });

        }

        function DeleteRecord(p_ID) {
            Swal.fire({
                title: 'Zbrišem nastavitev?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                        $.ajax({
                            type: "DELETE",
                            url: apiURL + "/api/locations/" + p_ID,
                            contentType: "application/json; charset=utf-8",
                            headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                            dataType: "json",
                            success: function (result) {
                                if (result == "OK") { toastr.success("Zbrisano"); GetTable(); return true; }
                                else { toastr.error("Napaka:" + result); return false; }
                            },
                            error: function (xhr, status, error) {
                                toastr.error("Napaka:" + error.toString());
                                return false;
                            }
                        });
                    });

                } else { return false; }
            });
        }

        function SaveRecord(p_ID) {
            if ($('#dataform').valid()) {
                var company={};
                company.id = p_ID;
                company.Name = $('#txtName').val();
                company.Active = $("#cbActive").prop('checked');
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(company),
                    url: apiURL+"/api/location/",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                         if (result == "OK") { toastr.success("Shranjeno"); GetTable(); return true; }
                        else { toastr.error("Napaka:" + result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });
            } else { return false; }
        }

         //#region Tag
         var GetTagsTable = function () {

            var table = $('#dtTags').DataTable({
                destroy: true,
                responsive: true,
                'order': [[0, 'desc']],
                //                dom: '<""top"">rt<""bottom""ilp><""container"">',
                searching: false,
                'processing': true,
                'serverSide': true,
                'ajax': {
                    'url': apiURL + "/api/tagstable",
                    type: 'POST', dataType: 'json',
                    data: function (dtParms) {
                        // I send it as a string to reduce the chance of an error before it reaches the server.
                        return JSON.stringify(dtParms);
                    },
                    'contentType': 'application/json; charset=utf-8',
                    "crossDomain": true,
                    "beforeSend": function (xhr, settings) {
                        getAPIToken().then((result) => {
                            $.ajax($.extend(settings, {
                                headers: { "Authorization": "Bearer " +result.AccessToken },
                                beforeSend: $.noop
                            }));
                        });
                        return false;
                    }

                },
                'columns': [
                    { 'data': 'title' },
                    {
                        data: null, 'orderable': false,
                        render: function (data, type, row, meta) {
                            return '<a class="btn btn-default" onclick="showTagDetail(' + row.id + ');">Urejanje</a>';
                        }
                    }
                ]
            });

        }

        function CancelTagModal() {
            $('#dfTag').validate().resetForm();
            //remove higlight ( reset form does not do this!)
            $("#dfTag input").each(function (key, value) {
                $(this).closest('.form-control').removeClass('is-invalid');
            });
        }


        function cmdAddTag_Click() {
            setTagForm(0);
            $('#cmdDeleteTag').addClass('invisible')
            $("#myTagModal").modal("show");
            $("#cmdSaveTag").off('click').click(function (evt) {
                if (SaveTag(0) != false) {
                    $("#myTagModal").modal("hide");
                    GetTagsTable();
                }
            });


        }

        function setTagForm(p_ID) {
            if (p_ID == 0) {
                //clear form
                $("#txtTag").val('');

            }
            else {
                //fill form
                getAPIToken().then((result) => {
                $.ajax({
                    type: "get",
                    url: apiURL+"/api/tag/"+p_ID,
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    async: true,
                    success: function (result) {
                        $("#txtTag").val(result.title);
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error getting data:" + error);
                    }
                });
                });
            }

        }

        function showTagDetail(p_ID) {
            setTagForm(p_ID);
            $('#cmdDeleteTag').removeClass('invisible');
            $("#myTagModal").modal("show");
            $("#cmdSaveTag").off('click').click(function (evt) {
                if (SaveTag(p_ID) != false) { $("#myTagModal").modal("hide"); }
            });
            $("#cmdDeleteTag").off('click').click(function (evt) {
                if (DeleteTag(p_ID) != false) { $("#myTagModal").modal("hide"); }
            });

        }

        function DeleteTag(p_ID) {

            Swal.fire({
                title: 'Zbrišem oznako?',
                showDenyButton: true,
                confirmButtonText: 'Da',
                denyButtonText: 'Ne',
            }).then((result) => {
                if (result.isConfirmed) {
                    getAPIToken().then((result) => {
                    $.ajax({
                        type: "DELETE",
                        url: apiURL + "/api/tag/" + p_ID,
                        contentType: "application/json; charset=utf-8",
                        headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                        dataType: "json",
                        success: function (result) {
                            if (result == "OK") { toastr.success("Zbrisano"); GetTagsTable(); return true; }
                            else { toastr.error("Napaka:" + result); return false; }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Napaka:" + error.toString());
                            return false;
                        }
                    });
                    });

                } else { return false; }

            });
        }

        function SaveTag(p_ID) {
            if ($('#dfTag').valid()) {
                var tag={};
                tag.id = p_ID;
                tag.Title = $('#txtTag').val();
                getAPIToken().then((result) => {
                $.ajax({
                    type: "post",
                    data: JSON.stringify(tag),
                    url: apiURL+"/api/tag",
                    contentType: "application/json; charset=utf-8",
                    headers: { 'Authorization': 'Bearer ' + result.AccessToken },
                    dataType: "json",
                    success: function (result) {
                         if (result == "OK") { toastr.success("Shranjeno");GetTagsTable(); return true; }
                        else { toastr.error("Napaka:"+result); return false; }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Napaka:" + error.toString());
                        return false;
                    }
                });
                });
            } else { return false; }
        }
        //#endregion


    </script>
}

